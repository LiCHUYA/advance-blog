import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/04-HTTP-缓存3-刨根问底——缓存新鲜度与使用期算法.md","filePath":"src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/04-HTTP-缓存3-刨根问底——缓存新鲜度与使用期算法.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/04-HTTP-缓存3-刨根问底——缓存新鲜度与使用期算法.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p>在我们的日常生活中，每一样食品都有保质期限，在保质期内食用不会对我们的身体健康产生影响，但是一旦存储了过长的时间以致超过了保质期，我们便不能再进行食用，需要丢弃并重新购买，而强缓存亦是如此。</p><h2 id="从-食品是否新鲜-到-强缓存是否新鲜" tabindex="-1">从“食品是否新鲜”到“强缓存是否新鲜” <a class="header-anchor" href="#从-食品是否新鲜-到-强缓存是否新鲜" aria-label="Permalink to &quot;从“食品是否新鲜”到“强缓存是否新鲜”&quot;">​</a></h2><p>正如与食品保质期一样，强缓存也有着它的“保质期”，我们这里一般称其为“新鲜度”。为了让读者便于理解，笔者这里拿生活中的牛奶来进行举例。</p><p>假如你的冰箱里有一瓶牛奶，那么它是否新鲜取决于哪些因素？这里相信大家面对这样的生活常识都能够清楚的知道主要取决于牛奶的保质期和生产日期。比如牛奶的保质期为 6 个月，生产日期为 2021 年 1 月 1日，那么牛奶是否新鲜的计算公式应该是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>牛奶是否新鲜 = 保质期 &gt; (当前日期 - 生产日期)</span></span></code></pre></div><p>也就是说，当当前日期减去生产日期超过 6 个月时牛奶便不新鲜了（过期了），不难得出牛奶应该在 2021 年 7 月 1 日前饮用完毕。</p><p>我们统一并简化下上述公式，使得所有食品都能公用，上述<code>当前日期 - 生产日期</code>其实就是 <code>使用期</code>，简化后的公式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>食品是否新鲜 = 食品保质期 &gt; 食品使用期</span></span></code></pre></div><p>那么回归强缓存，上述计算食品是否新鲜的公式同样也适用于强缓存。我们只需要把食品改为强缓存，把食品保质期修改为缓存新鲜度：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>强缓存是否新鲜 = 缓存新鲜度 &gt; 缓存使用期</span></span></code></pre></div><p>按如上公式所示，<strong>强缓存是否新鲜取决于两个关键词：缓存新鲜度和缓存使用期</strong>。</p><h2 id="缓存新鲜度" tabindex="-1">缓存新鲜度 <a class="header-anchor" href="#缓存新鲜度" aria-label="Permalink to &quot;缓存新鲜度&quot;">​</a></h2><p>我们先来认识下什么是缓存新鲜度，其和食品保质期概念大体相同，单位是时间长度。那么在浏览器中强缓存的保质期限怎么计算？</p><p>小册前面部分章节介绍强缓存时涉及时间单位的首部字段主要有两个：max-age 和 expires。而缓存的新鲜度公式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>缓存新鲜度 = max-age || (expires - date)</span></span></code></pre></div><p>上述公式不难理解：当 max-age 存在时缓存新鲜度等于 max-age 的秒数，是一个时间单位，就像保质期为 6 个月一样。当 max-age 不存在时，缓存新鲜度等于 <code>expires - date</code> 的值，expires 我们应该已经熟悉，它是一个绝对时间，表示缓存过期的时间，那么下面主要介绍下首部字段 <strong>date</strong>。</p><p><strong>Date 表示创建报文的日期时间</strong>，可以理解为服务器（包含源服务器和代理服务器）返回新资源的时间，和 expires 一样是一个绝对时间，比如</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>date：Wed, 25 Aug 2021 13:52:55 GMT</span></span></code></pre></div><p>那么过期时间（expires）减去创建时间（date）就可以计算出浏览器真实可以缓存的时间（默认已经转化为秒数），即缓存的保质期限（缓存新鲜度）。</p><p>至此，以上关于缓存新鲜度的计算公式便介绍完了，大家可以把缓存新鲜度看作是缓存的保质期（即浏览器可以缓存该资源的时间）后其公式便不难理解。</p><h2 id="缓存使用期" tabindex="-1">缓存使用期 <a class="header-anchor" href="#缓存使用期" aria-label="Permalink to &quot;缓存使用期&quot;">​</a></h2><p>相对于缓存新鲜度，缓存使用期的计算就比较复杂了，涉及到的公式和知识点也会相对较多，根据字面意思，<strong>缓存使用期可以理解为浏览器已经使用该资源的时间</strong>。相比食品的使用期与当前日期和生产日期有关，<strong>缓存使用期主要与响应使用期、传输延迟时间和停留缓存时间有关</strong>，计算公式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>缓存使用期 = 响应使用期 + 传输延迟时间 + 停留缓存时间</span></span></code></pre></div><h3 id="响应使用期" tabindex="-1">响应使用期 <a class="header-anchor" href="#响应使用期" aria-label="Permalink to &quot;响应使用期&quot;">​</a></h3><p>我们先来介绍下响应使用期，响应使用期可以通过以下两种方式进行计算：</p><ul><li>max(0, response_time - date_value)</li><li>age_value</li></ul><p>第一种方式中的 <code>response_time</code>（浏览器缓存收到响应的本地时间）是电脑客户端缓存获取到响应的本地时间，而 date_value（响应首部 date 值） 上面已经介绍过是服务器创建报文的时间，两者相减与 0 取最大值。</p><p>第二种方式直接获取 <code>age_value</code> （响应首部 age 值），<strong>Age 表示推算资源创建经过时间，可以理解为源服务器在多久前创建了响应或在代理服务器中存贮的时长</strong>，单位为秒。如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>age：600</span></span></code></pre></div><p>以下是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Age" target="_blank" rel="noreferrer">MDN</a> 中的介绍</p><blockquote><p>Age 的值通常接近于 0。表示此对象刚刚从原始服务器获取不久；其他的值则是表示代理服务器当前的系统时间与此应答中的通用头 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Date" target="_blank" rel="noreferrer"><code>Date</code></a> 的值之差。</p></blockquote><p>最终我们可以将以上两种方式进行组合，组合后的计算公式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>apparent_age = max(0, response_time - date_value) </span></span>\n<span class="line"><span>响应使用期 = max(apparent_age, age_value)</span></span></code></pre></div><h3 id="传输延迟时间" tabindex="-1">传输延迟时间 <a class="header-anchor" href="#传输延迟时间" aria-label="Permalink to &quot;传输延迟时间&quot;">​</a></h3><p>因为 HTTP 的传输是耗时的，所以传输延迟时间是存在的，<strong>传输延迟时间可以理解为浏览器缓存发起请求到收到响应的时间差</strong>，其计算公式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>传输延迟时间 = response_time - request_time</span></span></code></pre></div><p><code>response_time</code> 代表浏览器缓存收到响应的本地时间，<code>request_time</code> 代表浏览器缓存发起请求的本地时间，两者相减便得到了传输延迟时间。</p><h3 id="停留缓存时间" tabindex="-1">停留缓存时间 <a class="header-anchor" href="#停留缓存时间" aria-label="Permalink to &quot;停留缓存时间&quot;">​</a></h3><p>停留缓存时间表示资源在浏览器上已经缓存的时间，其计算公式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>停留缓存时间 = now - response_time</span></span></code></pre></div><p><code>now</code> 代表电脑客户端的当前时间，<code>response_time</code> 代表浏览器缓存收到响应的本地时间，两者相减便得到了停留缓存时间。</p><h3 id="max-age-仍然受到本地时间影响揭秘" tabindex="-1">max-age 仍然受到本地时间影响揭秘 <a class="header-anchor" href="#max-age-仍然受到本地时间影响揭秘" aria-label="Permalink to &quot;max-age 仍然受到本地时间影响揭秘&quot;">​</a></h3><p>通过上述字段及公式的介绍，最终我们总结出影响强缓存使用期的因素有以下几个：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>age_value：响应首部 age 值</span></span>\n<span class="line"><span>date_value：响应首部 date 值</span></span>\n<span class="line"><span>request_time：浏览器缓存发起请求的本地时间</span></span>\n<span class="line"><span>response_time：浏览器缓存收到响应的本地时间</span></span>\n<span class="line"><span>now：客户端当前时间</span></span></code></pre></div><p>需要注意的是以上 request_time、response_time 和 now 取的都是客户端本地时间，而 now 则是修改客户端本地时间直接导致强缓存失效的“罪魁祸首”。</p><p><strong>因此一旦修改了电脑客户端本地时间为未来时间，缓存使用期的计算便会受到影响，主要是停留缓存时间会变大，从而导致缓存使用期超出缓存新鲜度范围（强缓存失效）。</strong> 这便是 max-age 仍然受到本地时间影响的原因所在。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>读完本章内容，相信大家对于强缓存已经有了非常深刻的了解，至此对于强缓存的介绍也便告一段落。希望各位读者不要仅局限于文章中所介绍的内容，针对强缓存的探索还需亲自分析与实践，跳出书本的牢笼，寻找更广阔的天地。</p><p>关于 HTTP 缓存的介绍，我们也只到了半山腰，后半部分还有很多知识点等待大家汲取与思考，笔者我也会继续带领大家探索 HTTP 缓存中的奥秘。下一章节我们即将开启协商缓存的关卡大门。</p>', 49);
const _hoisted_50 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_50);
}
const _04HTTP___3__________________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _04HTTP___3__________________ as default
};
