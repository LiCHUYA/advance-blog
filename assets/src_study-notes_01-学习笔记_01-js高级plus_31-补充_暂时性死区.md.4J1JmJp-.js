import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/01-js高级plus/31-补充_暂时性死区.md","filePath":"src/study-notes/01-学习笔记/01-js高级plus/31-补充_暂时性死区.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/01-js高级plus/31-补充_暂时性死区.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="暂时性死区-temporal-dead-zone-tdz-详解" tabindex="-1">暂时性死区（Temporal Dead Zone, TDZ）详解 <a class="header-anchor" href="#暂时性死区-temporal-dead-zone-tdz-详解" aria-label="Permalink to &quot;暂时性死区（Temporal Dead Zone, TDZ）详解&quot;">​</a></h2><p><strong>暂时性死区</strong>是ES6（ECMAScript 2015）引入<code>let</code>和<code>const</code>关键字时产生的一个概念，描述了在变量声明前但已经进入其作用域后的那段时间内，该变量不可访问的情况。</p><h3 id="_1-暂时性死区的原因" tabindex="-1">1. 暂时性死区的原因 <a class="header-anchor" href="#_1-暂时性死区的原因" aria-label="Permalink to &quot;1. 暂时性死区的原因&quot;">​</a></h3><p>在ES6之前，JavaScript仅有<code>var</code>用于声明变量。由于<code>var</code>声明的变量会被<strong>提升</strong>，即在作用域内即使在声明前使用，也不会报错，只是值为<code>undefined</code>。这种机制容易导致难以调试的错误。为了解决这一问题，ES6引入了<code>let</code>和<code>const</code>，它们声明的变量在进入作用域时即被提升，但在声明之前不可访问，这就是<strong>暂时性死区</strong>的根源。</p><h3 id="_2-暂时性死区的定义" tabindex="-1">2. 暂时性死区的定义 <a class="header-anchor" href="#_2-暂时性死区的定义" aria-label="Permalink to &quot;2. 暂时性死区的定义&quot;">​</a></h3><p><strong>暂时性死区</strong>是指代码块执行时，从块作用域的开始到变量声明语句之间的区域。在此区域内，使用<code>let</code>或<code>const</code>声明的变量如果在声明前被访问，会抛出<code>ReferenceError</code>。</p><p><strong>示例</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ReferenceError: Cannot access &#39;x&#39; before initialization</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 5</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在这个示例中，<code>x</code>在块作用域开始时进入暂时性死区，直到<code>let x = 5;</code>执行后才可以正常访问。</p><h3 id="_3-v8-引擎中的实现" tabindex="-1">3. V8 引擎中的实现 <a class="header-anchor" href="#_3-v8-引擎中的实现" aria-label="Permalink to &quot;3. V8 引擎中的实现&quot;">​</a></h3><p><strong>V8引擎</strong>，作为Google的开源JavaScript引擎，通过<strong>词法环境</strong>管理变量的生命周期。执行上下文创建时，V8会生成一个词法环境，其中<code>let</code>和<code>const</code>声明的变量在解析时标记为“未初始化”。在代码块执行时，如果在变量初始化之前访问这些变量，V8引擎会抛出<code>ReferenceError</code>。</p><h4 id="核心机制" tabindex="-1">核心机制 <a class="header-anchor" href="#核心机制" aria-label="Permalink to &quot;核心机制&quot;">​</a></h4><ol><li><strong>未初始化状态</strong>：V8引擎在变量声明之前标记为“未初始化”。</li><li><strong>初始化时机</strong>：当代码执行到变量声明行时，V8引擎将该变量从“未初始化”更新为“初始化”，此时变量才可被访问。</li></ol><h4 id="伪代码示例" tabindex="-1">伪代码示例 <a class="header-anchor" href="#伪代码示例" aria-label="Permalink to &quot;伪代码示例&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ExecuteBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lexicalEnvironment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CreateLexicalEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 将变量标记为未初始化</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    lexicalEnvironment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">DeclareVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">UNINITIALIZED</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 开始执行代码块</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> statement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> block) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (statement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">accesses</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">            // 检查变量是否已初始化</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (lexicalEnvironment.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">GetVariableState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> UNINITIALIZED</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ReferenceError</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Cannot access &#39;x&#39; before initialization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        ExecuteStatement</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(statement);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> DeclareVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 将变量标记为未初始化状态</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.environmentRecord[name] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        state: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">UNINITIALIZED</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">undefined</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> InitializeVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 初始化变量</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.environmentRecord[name] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        state: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">INITIALIZED</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        value: value</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_4-暂时性死区的意义" tabindex="-1">4. 暂时性死区的意义 <a class="header-anchor" href="#_4-暂时性死区的意义" aria-label="Permalink to &quot;4. 暂时性死区的意义&quot;">​</a></h3><ul><li><strong>防止未初始化变量的访问</strong>：避免潜在的错误和异常行为。</li><li><strong>提高代码的确定性</strong>：明确指出变量在声明前不可用，行为更加一致和可预测。</li><li><strong>增强调试体验</strong>：抛出<code>ReferenceError</code>，帮助开发者更快定位问题。</li></ul><blockquote><p><strong>暂时性死区</strong>是为了解决JavaScript中变量提升带来的问题而引入的机制。它在V8等引擎中的实现通过将未初始化的变量标记为“未初始化状态”，确保变量在声明前不可访问，从而提高了代码的安全性和可读性。理解TDZ对于掌握JavaScript中的变量作用域和生命周期至关重要。</p></blockquote><h2 id="v8分析" tabindex="-1">V8分析 <a class="header-anchor" href="#v8分析" aria-label="Permalink to &quot;V8分析&quot;">​</a></h2><h3 id="_1-v8-中的执行上下文和词法环境" tabindex="-1">1. V8 中的执行上下文和词法环境 <a class="header-anchor" href="#_1-v8-中的执行上下文和词法环境" aria-label="Permalink to &quot;1. V8 中的执行上下文和词法环境&quot;">​</a></h3><p>V8 引擎中，每个执行上下文都有一个词法环境（Lexical Environment），它用于存储变量绑定信息。当 JavaScript 代码被解析时，V8 会创建一个 <code>Scope</code> 对象来表示当前的作用域，这个作用域包含了所有在该作用域内声明的变量和函数。</p><h3 id="_2-变量的声明和初始化" tabindex="-1">2. 变量的声明和初始化 <a class="header-anchor" href="#_2-变量的声明和初始化" aria-label="Permalink to &quot;2. 变量的声明和初始化&quot;">​</a></h3><p>当 V8 解析代码时，它会首先进行变量声明的扫描，并为这些变量在内存中分配空间。这一阶段称为<strong>变量声明阶段</strong>。在此阶段，<code>var</code>、<code>let</code>、<code>const</code> 都会被记录到作用域链上。</p><p>对于 <code>let</code> 和 <code>const</code> 声明的变量，在变量声明阶段，它们会被标记为 <code>uninitialized</code>，意味着这些变量在初始化之前是不可访问的。而对于 <code>var</code> 声明的变量，它们会被初始化为 <code>undefined</code>，所以即使在声明之前访问也不会抛出错误。</p><h3 id="_3-v8-中处理-tdz-的关键实现" tabindex="-1">3. V8 中处理 TDZ 的关键实现 <a class="header-anchor" href="#_3-v8-中处理-tdz-的关键实现" aria-label="Permalink to &quot;3. V8 中处理 TDZ 的关键实现&quot;">​</a></h3><p>V8 引擎使用了 <code>DeclarationScope</code> 和 <code>Variable</code> 类来处理作用域和变量。下面是一些简化的伪代码，展示了 V8 处理 <code>let</code> 和 <code>const</code> 变量的流程：</p><h4 id="_1-变量声明时的标记" tabindex="-1">1. 变量声明时的标记 <a class="header-anchor" href="#_1-变量声明时的标记" aria-label="Permalink to &quot;1. 变量声明时的标记&quot;">​</a></h4><p>当变量被声明时，V8 会将 <code>let</code> 和 <code>const</code> 变量标记为未初始化状态 (<code>uninitialized</code>)，这通常发生在词法分析阶段。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> DeclarationScope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">DeclareVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Variable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (var-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> LET </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> var-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CONST) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        var-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_initialization_state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(UNINITIALIZED);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (var-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> VAR) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        var-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_initialization_state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(INITIALIZED);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 其他逻辑...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在上面的伪代码中，<code>DeclareVariable</code> 函数会根据变量的类型 (<code>let</code>、<code>const</code> 或 <code>var</code>) 设置其初始化状态。如果变量是 <code>let</code> 或 <code>const</code>，则会被标记为 <code>UNINITIALIZED</code>。</p><h4 id="_2-检测暂时性死区" tabindex="-1">2. 检测暂时性死区 <a class="header-anchor" href="#_2-检测暂时性死区" aria-label="Permalink to &quot;2. 检测暂时性死区&quot;">​</a></h4><p>在代码执行时，V8 引擎会检测变量的状态。如果一个变量处于未初始化状态（即在 TDZ 中），并且尝试访问该变量时，V8 会抛出一个 <code>ReferenceError</code>。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Variable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CheckTemporalDeadZone</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">initialization_state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UNINITIALIZED) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        ThrowReferenceError</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Cannot access variable before initialization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在这个函数中，当 V8 引擎尝试访问一个变量时，它会检查该变量的初始化状态。如果变量是 <code>UNINITIALIZED</code>，则会抛出 <code>ReferenceError</code> 错误。</p><h4 id="_3-变量的初始化" tabindex="-1">3. 变量的初始化 <a class="header-anchor" href="#_3-变量的初始化" aria-label="Permalink to &quot;3. 变量的初始化&quot;">​</a></h4><p>当代码执行到变量声明所在的行时，V8 会将变量从 <code>uninitialized</code> 状态切换到 <code>initialized</code> 状态，并赋予其初始值。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Variable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">InitializeVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> initial_value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">initialization_state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UNINITIALIZED) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_initialization_state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(INITIALIZED);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(initial_value);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在这个函数中，当变量被初始化时，V8 会更新变量的状态，并赋值给它。此时，变量离开了 TDZ，可以被安全访问。</p><h3 id="_4-代码示例和分析" tabindex="-1">4. 代码示例和分析 <a class="header-anchor" href="#_4-代码示例和分析" aria-label="Permalink to &quot;4. 代码示例和分析&quot;">​</a></h3><p>我们以一个简单的代码片段来说明上述机制：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> example</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ReferenceError: Cannot access &#39;x&#39; before initialization</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 10</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">example</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>在这个例子中，当 <code>example</code> 函数被调用时：</p><ol><li>V8 创建 <code>example</code> 函数的执行上下文和词法环境。</li><li>在 <code>example</code> 的词法环境中，<code>x</code> 被声明为一个 <code>let</code> 变量，并被标记为 <code>uninitialized</code>。</li><li>执行 <code>console.log(x);</code> 时，V8 检测到 <code>x</code> 仍处于 <code>uninitialized</code> 状态，抛出 <code>ReferenceError</code>。</li><li>执行到 <code>let x = 10;</code> 时，V8 将 <code>x</code> 从 <code>uninitialized</code> 状态更新为 <code>initialized</code> 并赋值为 <code>10</code>。</li><li>之后再执行 <code>console.log(x);</code>，此时 <code>x</code> 已被正确初始化，输出 <code>10</code>。</li></ol>', 43);
const _hoisted_44 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_44);
}
const _31_________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _31_________ as default
};
