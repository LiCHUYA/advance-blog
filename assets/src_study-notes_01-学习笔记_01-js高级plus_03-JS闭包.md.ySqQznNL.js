import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/闭包的理解.MsV3h5Od.png";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/01-js高级plus/03-JS闭包.md","filePath":"src/study-notes/01-学习笔记/01-js高级plus/03-JS闭包.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/01-js高级plus/03-JS闭包.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h3 id="javascript-解析与执行过程详解" tabindex="-1">JavaScript 解析与执行过程详解 <a class="header-anchor" href="#javascript-解析与执行过程详解" aria-label="Permalink to &quot;JavaScript 解析与执行过程详解&quot;">​</a></h3><p>JavaScript 代码在解析和执行时，会经过几个重要的阶段：<strong>解析阶段</strong>和<strong>执行阶段</strong>。在这两个阶段中，V8 引擎会创建和管理多个数据结构，如 <code>GlobalObject</code>、执行栈、执行上下文等。这些结构和机制一起确保 JavaScript 代码能够正确、高效地运行。</p><h4 id="_1-解析阶段" tabindex="-1">1. 解析阶段 <a class="header-anchor" href="#_1-解析阶段" aria-label="Permalink to &quot;1. 解析阶段&quot;">​</a></h4><p>解析阶段的主要任务是将源代码转换为抽象语法树 (AST)，并准备执行环境。以下是详细的步骤：</p><ol><li><p><strong>创建 <code>GlobalObject</code> 对象</strong>：</p><ul><li>在解析开始时，V8 引擎会创建一个全局对象 <code>GlobalObject</code>。这个对象包含 JavaScript 环境中的所有全局变量和函数声明。</li><li>内置属性和方法（如 <code>console</code>、<code>Math</code>）也会被加入 <code>GlobalObject</code>。</li></ul></li><li><p><strong>变量对象 (VO) 和全局执行上下文 (GEC)</strong>：</p><ul><li>全局执行上下文 (Global Execution Context, GEC) 是整个 JavaScript 程序的运行环境。</li><li>在 GEC 中，变量对象 (Variable Object, VO) 指向 <code>GlobalObject</code>。VO 包含了所有在全局上下文中声明的变量和函数。</li><li>在解析过程中，所有变量和函数声明会被添加到 <code>GlobalObject</code> 中，但值会被初始化为 <code>undefined</code>。</li></ul></li></ol><h4 id="_2-执行阶段" tabindex="-1">2. 执行阶段 <a class="header-anchor" href="#_2-执行阶段" aria-label="Permalink to &quot;2. 执行阶段&quot;">​</a></h4><p>执行阶段包括代码的实际运行，这时候 JavaScript 引擎会创建和管理多个执行上下文，并处理变量和函数调用。</p><ol><li><p><strong>创建执行栈</strong>：</p><ul><li>执行栈 (Execution Stack) 是一个用来管理执行上下文的栈结构。每当进入一个新的执行上下文时，该上下文会被推入执行栈。</li><li>最开始的全局执行上下文 (GEC) 会被推入执行栈，开始执行全局代码。</li></ul></li><li><p><strong>函数调用和执行上下文</strong>：</p><ul><li>当调用一个函数时，会创建一个新的执行上下文，该上下文包含： <ul><li><strong>Activation Object (AO)</strong>：包含函数的参数、局部变量、内部函数声明等。</li><li><strong>Scope Chain</strong>：作用域链，包含当前执行上下文的变量对象和所有父执行上下文的变量对象。</li></ul></li><li>函数的执行上下文会被推入执行栈，当函数执行完毕后，该上下文会被弹出并销毁。</li></ul></li><li><p><strong>编译和预编译</strong>：</p><ul><li>在编译函数时，会生成一个专门的函数空间，其中 <code>scope</code> 指向父执行上下文的 <code>scope</code>。</li><li>即使函数中没有 <code>return</code> 语句，AO 仍会在预编译过程中被创建和初始化。</li></ul></li><li><p><strong>特殊语法处理</strong>：</p><ul><li>例如，当执行 <code>a = 10</code> 时，如果 <code>a</code> 没有在当前上下文中声明，JavaScript 引擎会将其添加到 <code>GlobalObject</code> 中。</li></ul></li></ol><h3 id="v8-引擎实现细节" tabindex="-1">V8 引擎实现细节 <a class="header-anchor" href="#v8-引擎实现细节" aria-label="Permalink to &quot;V8 引擎实现细节&quot;">​</a></h3><h4 id="_1-解析与全局执行上下文的初始化" tabindex="-1">1. 解析与全局执行上下文的初始化 <a class="header-anchor" href="#_1-解析与全局执行上下文的初始化" aria-label="Permalink to &quot;1. 解析与全局执行上下文的初始化&quot;">​</a></h4><p>V8 引擎在解析和执行 JavaScript 代码时，会创建 <code>GlobalObject</code> 并初始化全局执行上下文。这些步骤确保了全局作用域中的变量和函数声明可以被正确管理和访问。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/execution/isolate.cc</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Init</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  global_object_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewGlobalObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建 GlobalObject 对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  execution_stack_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">vector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 初始化执行栈</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  execution_stack_.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewGlobalExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(global_object_));</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 推入全局执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewGlobalExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">GlobalObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> global_object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  context-&gt;global_object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global_object;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 绑定 GlobalObject</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  context-&gt;variable_object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global_object;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // VO 指向 GlobalObject</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> context;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="_2-解析程序中的声明" tabindex="-1">2. 解析程序中的声明 <a class="header-anchor" href="#_2-解析程序中的声明" aria-label="Permalink to &quot;2. 解析程序中的声明&quot;">​</a></h4><p>在解析全局代码时，V8 会将所有声明加入 <code>GlobalObject</code> 中。此过程发生在解析阶段，变量和函数声明会被标记，但不会立即赋值。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/parsing/parser.cc</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Parser</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ParseProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建全局执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">global_execution_context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 遍历并处理所有全局声明</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">auto&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> declaration : program_declarations_) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (declaration-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">is_function_declaration</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 将函数声明添加到 GlobalObject</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      global_context-&gt;global_object-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">AddFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(declaration-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), declaration-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (declaration-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">is_variable_declaration</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 将变量声明添加到 GlobalObject</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      global_context-&gt;global_object-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">AddVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(declaration-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), declaration-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">initial_value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="_3-函数调用与执行上下文" tabindex="-1">3. 函数调用与执行上下文 <a class="header-anchor" href="#_3-函数调用与执行上下文" aria-label="Permalink to &quot;3. 函数调用与执行上下文&quot;">​</a></h4><p>当函数被调用时，会创建一个新的执行上下文，并将其推入执行栈。这使得函数可以有自己的作用域和变量对象 (AO)。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/execution/execution.cc</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CallFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Arguments</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建新的函数执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  function_context-&gt;activation_object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ActivationObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(function, args);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建 AO</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  function_context-&gt;scope_chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(function_context-&gt;activation_object);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 添加 AO 到作用域链</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 将父上下文的作用域链加入当前上下文的作用域链</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  function_context-&gt;scope_chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    function_context-&gt;scope_chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(),</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    current_context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;scope_chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(),</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    current_context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;scope_chain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  );</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 将函数执行上下文推入执行栈</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">execution_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(function_context);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 执行函数体</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  function-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Execute</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 函数执行完毕后，弹出函数执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">execution_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pop_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function_context;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="_4-未声明变量赋值的处理" tabindex="-1">4. 未声明变量赋值的处理 <a class="header-anchor" href="#_4-未声明变量赋值的处理" aria-label="Permalink to &quot;4. 未声明变量赋值的处理&quot;">​</a></h4><p>当执行 <code>a = 10</code> 这种语句时，如果 <code>a</code> 没有在当前上下文中声明，JavaScript 引擎会将其添加到 <code>GlobalObject</code> 中。这是一种特殊的处理方式，确保未声明的变量能够全局访问。</p><p>这意味着即使 <code>a</code> 没有使用 <code>var</code>、<code>let</code> 或 <code>const</code> 声明，它仍然会成为一个全局变量。以下是一个具体的例子来说明这种行为：</p><h5 id="例子" tabindex="-1">例子： <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子：&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 没有使用 var、let 或 const 声明</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 10</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 在全局作用域中访问 a</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 仍然可以访问 a，输出 10</span></span></code></pre></div><h5 id="解释" tabindex="-1">解释： <a class="header-anchor" href="#解释" aria-label="Permalink to &quot;解释：&quot;">​</a></h5><ol><li><strong>函数 <code>foo</code> 内部：</strong><ul><li>当 <code>a = 10</code> 被执行时，JavaScript 引擎会检测当前的作用域链。</li><li>由于 <code>a</code> 没有在函数作用域或块作用域中声明，JavaScript 引擎会将 <code>a</code> 添加到全局对象 <code>GlobalObject</code> 中。</li><li><code>a</code> 成为全局变量，并且在函数内部可以访问其值 <code>10</code>。</li></ul></li><li><strong>全局作用域中：</strong><ul><li>即使 <code>a</code> 是在函数内部首次定义的，由于它被隐式添加到全局对象中，因此在全局作用域中仍然可以访问到 <code>a</code>。</li><li>因此，<code>console.log(a)</code> 在全局作用域中也会输出 <code>10</code>。</li></ul></li></ol><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/runtime/runtime-variables.cc</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">RUNTIME_FUNCTION</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Runtime_StoreIC) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  HandleScope </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  DCHECK_EQ</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> receiver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> args.at</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> args.at</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> args.at</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">receiver-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">IsJSGlobalProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 如果接收者不是全局对象代理，执行标准存储操作</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(receiver, name, value, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">StoreOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::kNamed);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 如果接收者是全局对象代理，处理为全局变量赋值</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSGlobalObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">global_object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">GlobalDictionary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(global-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">global_dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 检查变量是否已在全局对象中声明</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dictionary-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">FindEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> GlobalDictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::kNotFound) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 更新已存在变量的值</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PropertyCell</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dictionary-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CellAt</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(entry);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    cell-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">value);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 创建新的全局变量</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">PropertyCell</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CreatePropertyCell</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    cell-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">value);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    dictionary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> GlobalDictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dictionary, name, cell, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">PropertyDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    global-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_global_dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dictionary);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">value;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ol><li><p><strong>解析阶段</strong>：</p><ul><li>创建 <code>GlobalObject</code> 对象。</li><li>建立全局执行上下文 (GEC)，并将变量对象 (VO) 指向 <code>GlobalObject</code>。</li><li>将全局变量和函数声明加入 <code>GlobalObject</code>，初始化为 <code>undefined</code>。</li></ul></li><li><p><strong>执行阶段</strong>：</p><ul><li>创建执行栈，推入全局执行上下文。</li><li>函数调用时，创建函数执行上下文，包括 AO 和作用域链。</li><li>预编译函数时，创建函数空间，初始化 AO。</li><li>特殊语法处理，如未声明变量赋值，直接添加到 <code>GlobalObject</code> 中。</li></ul></li></ol><p>通过以上机制，V8 引擎能够高效管理 JavaScript 的解析和执行过程，确保代码在运行时能够正确处理变量、函数调用和内存管理。</p><h3 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h3><h4 id="高阶函数" tabindex="-1">高阶函数 <a class="header-anchor" href="#高阶函数" aria-label="Permalink to &quot;高阶函数&quot;">​</a></h4><p>​ 高阶函数是把另一个函数作为参数或者返回值</p><h4 id="方法和函数的区别" tabindex="-1">方法和函数的区别 <a class="header-anchor" href="#方法和函数的区别" aria-label="Permalink to &quot;方法和函数的区别&quot;">​</a></h4><p>函数是独立的</p><p>方法是属于某一个对象的函数</p><h3 id="什么是闭包" tabindex="-1">什么是闭包 <a class="header-anchor" href="#什么是闭包" aria-label="Permalink to &quot;什么是闭包&quot;">​</a></h3><h3 id="词法解析和闭包的详细讲解" tabindex="-1">词法解析和闭包的详细讲解 <a class="header-anchor" href="#词法解析和闭包的详细讲解" aria-label="Permalink to &quot;词法解析和闭包的详细讲解&quot;">​</a></h3><h4 id="_1-闭包的定义" tabindex="-1">1. 闭包的定义 <a class="header-anchor" href="#_1-闭包的定义" aria-label="Permalink to &quot;1. 闭包的定义&quot;">​</a></h4><p>闭包是一个函数及其外部环境的组合。具体来说，闭包包括两部分：</p><ul><li><strong>函数</strong>：要执行的代码。</li><li><strong>外部的自由变量</strong>：函数外部但被函数引用的变量。</li></ul><blockquote><h5 id="ecma-规范中的闭包概念" tabindex="-1">ECMA 规范中的闭包概念 <a class="header-anchor" href="#ecma-规范中的闭包概念" aria-label="Permalink to &quot;ECMA 规范中的闭包概念&quot;">​</a></h5><p>根据 ECMA-262 规范，闭包是由一个函数对象以及该函数对象引用的外部词法环境组合而成的实体。闭包使函数能够访问其声明时所处的词法作用域外部的变量。</p></blockquote><h4 id="_2-词法解析阶段" tabindex="-1">2. 词法解析阶段 <a class="header-anchor" href="#_2-词法解析阶段" aria-label="Permalink to &quot;2. 词法解析阶段&quot;">​</a></h4><p>在词法解析阶段，JavaScript 引擎会进行以下操作：</p><ol><li><strong>创建词法环境（Lexical Environment）</strong>：每个函数都会创建一个词法环境，用于存储函数内部的变量和参数。</li><li><strong>建立作用域链（Scope Chain）</strong>：词法环境中包含对外部词法环境的引用，这些词法环境通过作用域链连接在一起。</li></ol><p>在解析阶段，函数的作用域就已经确定了。也就是说，在解析过程中，JavaScript 引擎会确定哪些变量是函数内部的，哪些是从外部词法环境中引用的。这些引用的外部变量形成了函数的闭包。</p><h4 id="_3-示例代码解析" tabindex="-1">3. 示例代码解析 <a class="header-anchor" href="#_3-示例代码解析" aria-label="Permalink to &quot;3. 示例代码解析&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> innerFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 闭包，引用外部变量 a</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> innerFunction;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> closure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">closure</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 10</span></span></code></pre></div><p>在上面的示例中：</p><ul><li><strong>解析阶段</strong>： <ol><li><code>test1</code> 函数的词法环境创建，包含变量 <code>a</code>。</li><li><code>innerFunction</code> 创建时，其词法环境包含对 <code>a</code> 的引用。</li></ol></li><li><strong>执行阶段</strong>： <ol><li><code>test1</code> 执行，<code>a</code> 被赋值为 10。</li><li>返回 <code>innerFunction</code>，形成闭包。</li><li>调用 <code>closure()</code>，输出 <code>a</code> 的值 10。</li></ol></li></ul><h3 id="v8-引擎中的闭包实现" tabindex="-1">V8 引擎中的闭包实现 <a class="header-anchor" href="#v8-引擎中的闭包实现" aria-label="Permalink to &quot;V8 引擎中的闭包实现&quot;">​</a></h3><p>V8 引擎是 Google 开发的高性能 JavaScript 引擎，广泛应用于 Chrome 浏览器和 Node.js。以下是 V8 引擎中闭包实现的关键步骤和概念：</p><h4 id="_1-创建词法环境" tabindex="-1">1. 创建词法环境 <a class="header-anchor" href="#_1-创建词法环境" aria-label="Permalink to &quot;1. 创建词法环境&quot;">​</a></h4><p>在 V8 中，当一个函数被解析时，会为其创建一个 <code>Context</code> 对象，这个对象代表了函数的词法环境。</p><h4 id="_2-scopeinfo-和-scope" tabindex="-1">2. ScopeInfo 和 Scope <a class="header-anchor" href="#_2-scopeinfo-和-scope" aria-label="Permalink to &quot;2. ScopeInfo 和 Scope&quot;">​</a></h4><p>V8 使用 <code>ScopeInfo</code> 和 <code>Scope</code> 对象来管理函数的词法环境和作用域链。</p><ul><li><strong>ScopeInfo</strong>：存储了关于函数作用域的信息，包括哪些变量是局部的，哪些是从外部环境引用的。</li><li><strong>Scope</strong>：表示词法环境，包含了变量的实际值。</li></ul><h4 id="_3-绑定作用域链" tabindex="-1">3. 绑定作用域链 <a class="header-anchor" href="#_3-绑定作用域链" aria-label="Permalink to &quot;3. 绑定作用域链&quot;">​</a></h4><p>当函数被创建时，V8 会将函数的 <code>ScopeInfo</code> 和 <code>Context</code> 绑定在一起，形成函数的作用域链。</p><p>以下是一个简化的示例代码，展示了 V8 引擎中如何创建和绑定词法环境和作用域链：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CreateAndBindScope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">GetCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 获取函数的 ScopeInfo 对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ScopeInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> scope_info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">shared</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">scope_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建词法环境 (Scope)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Scope</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> scope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Create</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(function, scope_info, context);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 将函数的词法环境与 ScopeInfo 绑定</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  function-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">scope);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在实际的 V8 引擎中，当一个函数引用了外部变量时，会在其 <code>ScopeInfo</code> 中记录这些引用信息。然后在执行时，通过 <code>Scope</code> 对象保持对这些外部变量的引用，确保在函数执行时能够访问这些变量，从而形成闭包。</p><p>通过这些机制，V8 实现了对闭包的支持，使得 JavaScript 能够灵活地管理和访问不同作用域中的变量。</p><h5 id="_2-闭包的作用" tabindex="-1">2. 闭包的作用 <a class="header-anchor" href="#_2-闭包的作用" aria-label="Permalink to &quot;2. 闭包的作用&quot;">​</a></h5><p>闭包可以捕获并保留对外部变量的引用，使得在函数执行过程中仍然可以访问这些外部变量，即使外部函数已经执行完毕。这种特性使得 JavaScript 具有灵活的变量作用域管理能力。</p><h5 id="_3-v8-引擎示例代码" tabindex="-1">3. V8 引擎示例代码 <a class="header-anchor" href="#_3-v8-引擎示例代码" aria-label="Permalink to &quot;3. V8 引擎示例代码&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> outerFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> outerVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;I am from the outer function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> innerFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(outerVar); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用外部函数的变量</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> innerFunction;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> closureExample</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> outerFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">closureExample</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出：I am from the outer function</span></span></code></pre></div><p>在上述示例中，<code>innerFunction</code> 是一个闭包，它引用了外部函数 <code>outerFunction</code> 中的变量 <code>outerVar</code>。即使 <code>outerFunction</code> 执行完毕后，<code>innerFunction</code> 仍然可以访问并输出 <code>outerVar</code> 的值。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建闭包</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CreateClosure</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">GetCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  HandleScope </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 外部函数中定义的变量</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> outerVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewFromUtf8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;I am from the outer function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 内部函数引用外部变量</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> innerFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, [](</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> FunctionCallbackInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">GetCurrentContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Local</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> context-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Global</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewFromUtf8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;outerVar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ToLocalChecked</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Utf8Value</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> utf8_value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">%s\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">utf8_value);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  });</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 将外部变量添加到全局上下文中</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">GetCurrentContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Global</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">GetCurrentContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewFromUtf8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;outerVar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), outerVar).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">FromJust</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 在这里可以继续使用 innerFunction 作为闭包</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="闭包的作用" tabindex="-1">闭包的作用 <a class="header-anchor" href="#闭包的作用" aria-label="Permalink to &quot;闭包的作用&quot;">​</a></h3><h3 id="闭包的作用、优点和缺点" tabindex="-1">闭包的作用、优点和缺点 <a class="header-anchor" href="#闭包的作用、优点和缺点" aria-label="Permalink to &quot;闭包的作用、优点和缺点&quot;">​</a></h3><h4 id="_1-闭包的作用" tabindex="-1">1. 闭包的作用 <a class="header-anchor" href="#_1-闭包的作用" aria-label="Permalink to &quot;1. 闭包的作用&quot;">​</a></h4><p>闭包在 JavaScript 中具有广泛的用途，包括但不限于以下几个方面：</p><ul><li><strong>数据隐藏和封装</strong>：闭包可以创建私有变量，这些变量只能通过闭包内部的函数访问，无法从外部直接访问。</li><li><strong>维持函数的状态</strong>：闭包可以保持函数执行上下文中的变量状态，即使外部函数已经执行完毕，变量依然保留。</li><li><strong>回调和异步编程</strong>：在事件处理、回调函数和异步编程中，闭包非常有用，可以捕获和保持执行上下文。</li><li><strong>模块化编程</strong>：通过闭包，可以创建模块，封装变量和函数，避免全局命名空间污染。</li></ul><h4 id="_2-闭包的优点" tabindex="-1">2. 闭包的优点 <a class="header-anchor" href="#_2-闭包的优点" aria-label="Permalink to &quot;2. 闭包的优点&quot;">​</a></h4><ul><li><strong>数据封装</strong>：闭包能够创建私有作用域，使得内部变量和函数不暴露到全局作用域，增强了数据的封装性和安全性。</li><li><strong>保持状态</strong>：闭包可以在多次调用之间保持变量的状态，适用于需要记住执行上下文的场景。</li><li><strong>灵活的功能组合</strong>：闭包使得函数可以组合并创建新的功能，有助于代码的复用和模块化。</li><li><strong>函数工厂</strong>：闭包可以用来创建工厂函数，根据不同的初始参数生成定制的函数。</li></ul><h4 id="_3-闭包的缺点" tabindex="-1">3. 闭包的缺点 <a class="header-anchor" href="#_3-闭包的缺点" aria-label="Permalink to &quot;3. 闭包的缺点&quot;">​</a></h4><ul><li><strong>内存泄漏</strong>：由于闭包持有对外部变量的引用，可能导致这些变量无法及时被垃圾回收，造成内存泄漏。</li><li><strong>调试困难</strong>：闭包使得函数的作用域链变得复杂，调试时需要追踪不同的作用域，增加了调试的难度。</li><li><strong>性能影响</strong>：闭包在某些情况下会增加内存消耗和执行开销，尤其是在频繁创建和销毁闭包时。</li><li><strong>不易理解</strong>：对于初学者来说，闭包的概念和实现机制比较复杂，可能不易理解和掌握。</li></ul><h4 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h4><p>以下是一个使用闭包实现数据封装和状态保持的示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createCounter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 私有变量</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    increment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(count);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    decrement</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(count);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    getCount</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> count;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> counter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createCounter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">counter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">increment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">counter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">increment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 2</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">counter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">decrement</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(counter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getCount</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 1</span></span></code></pre></div><p>在这个示例中，<code>createCounter</code> 函数返回一个包含三个方法的对象，这些方法可以访问和修改函数内部的 <code>count</code><img src="' + _imports_0 + '" alt="image.png"></p><p><a href="https://www.yuque.com/qingshanruwohuai/pmut75/ywbaalzkdqifz3cg" target="_blank" rel="noreferrer">闭包比较好的文章</a></p><blockquote><p>以下盒子是一个视频 请在盒子内部右键-&gt;复制链接-&gt;下载观看</p></blockquote>', 82);
const _hoisted_83 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_83);
}
const _03JS__ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _03JS__ as default
};
