import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/20210824215429.jpg-6.PqK2iBIq.jpg";
const _imports_1 = "/advance-blog/assets/首次访问流程.png-7.m7becbrH.jpg";
const _imports_2 = "/advance-blog/assets/20210825212127.jpg-8.ioI-GW04.jpg";
const _imports_3 = "/advance-blog/assets/强缓存生效流程.png-9.RlwbymMX.jpg";
const _imports_4 = "/advance-blog/assets/20210825225010.jpg-10.bgEp5vAi.jpg";
const _imports_5 = "/advance-blog/assets/20210826212213.jpg-11.xb-Wmpcp.jpg";
const _imports_6 = "/advance-blog/assets/客户端.png-12.yl3vynr9.jpg";
const _imports_7 = "/advance-blog/assets/20210827212431.jpg-13.NsSOjEmc.jpg";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/03-HTTP-缓存2-卧虎藏龙——网页由慢到快背后的强缓存.md","filePath":"src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/03-HTTP-缓存2-卧虎藏龙——网页由慢到快背后的强缓存.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/03-HTTP-缓存2-卧虎藏龙——网页由慢到快背后的强缓存.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p>前面章节部分提到了很多次<strong>强缓存</strong>，但都从未真正意义上详细地介绍过它。这里笔者将花费一整节的内容来对强缓存进行一次单独的“采访”，继续加深读者对于强缓存的理解。</p><p>还记得小册开篇提到的“第一次访问网站打开速度会有点慢，再次访问的时候就快了很多”这一现象吗？其背后主要还是强缓存在起作用。</p><p>接下来我们不妨通过现象看本质，从第一次访问某一网站开始。</p><h2 id="由慢到快的过程" tabindex="-1">由慢到快的过程 <a class="header-anchor" href="#由慢到快的过程" aria-label="Permalink to &quot;由慢到快的过程&quot;">​</a></h2><p>这里，我们模拟第一次打开某宝首页（浏览器未有缓存资源），打开开发者工具我们可以看到资源的加载情况。</p><p><img src="' + _imports_0 + '" alt="20210824215429.jpg"></p><p>我们重点关注下 <code>Size</code> 和 <code>Time</code> 列的数据，Size 列表示浏览器从服务器获取资源的大小，Time 列表示资源加载耗时。因为几乎每一个资源都需要从服务器获取并加载，所以网页打开速度会受到影响，这里浏览器用了 <strong>1.76s</strong> 加载完了页面的所有资源（图片、脚本、样式等），1.1 MB 的数据被传输到了本地。</p><p>那么从强缓存的角度来看，其实第一次访问网页时浏览器已经开始在背后进行强缓存的判断和处理，我们可以通过下方流程图一探究竟。</p><p><img src="' + _imports_1 + '" alt="首次访问流程.png"></p><p>图中，当浏览器发起 HTTP 请求时，会向浏览器缓存进行一次询问，若浏览器缓存没有该资源的缓存数据，那么浏览器便会向服务器发起请求，服务器接收请求后将资源返回给浏览器，浏览器会将资源的响应数据存储到浏览器缓存中，这便是<strong>强缓存的生成过程</strong>。</p><p>接下来，聪明的读者应该已经猜到下面我们将第二次访问某宝，继续观察开发者工具中原来的几项指标。</p><p><img src="' + _imports_2 + '" alt="20210825212127.jpg"></p><p>我们发现 Size 一列大部分由原先的资源加载大小变成了 <code>disk cache</code>（<strong>磁盘缓存</strong>），而变成这一数据对应的 Time 列资源加载速度异常之快，加载总耗时由原来的 1.76s 变成了 <strong>1.10s</strong>，而传输到本地的数据降到了 44.3 KB，<strong>加载速度提升了 37.5%</strong>（受网速影响该数据每次都不一样，只用做对比参考）。这便是强缓存生效导致的现象。</p><p>强缓存的生效流程如下图所示：</p><p><img src="' + _imports_3 + '" alt="强缓存生效流程.png"></p><p>图中我们可以看到<strong>浏览器并没有和服务器进行交互</strong>，而是在发起请求时浏览器缓存告诉浏览器它那有该资源的缓存数据并且还没有过期，于是浏览器直接加载了缓存中的数据资源。就好比你要买牛奶，原本需要跑去生产厂商买，但是发现楼下的超市就有该厂商生产的牛奶并且没有过期，那你只需要花费跑一趟楼下的功夫就可以喝到新鲜的牛奶，大大缩短了你买牛奶的时间。</p><p>写到这里，大家是否会认为只有开发者工具中的 Size 值变成了 disk cache 才代表强缓存生效，也称为<strong>命中强缓存</strong>。其实不然，别忘了开篇提到除了 Disk cache，还有 <code>Memory Cache</code>（<strong>内存缓存</strong>）。这时候我们不关闭 Tab 页，重新刷新下某宝页面，再观察下 Network 面板中的变化。</p><p><img src="' + _imports_4 + '" alt="20210825225010.jpg"></p><p>此时，开发者工具中的 Size 列大部分变成了 memory Cache，其对应的 Time 列变成了 <strong>0ms</strong>。可见，<strong>memory Cache 比 disk cache 更快</strong>，快到不需要时间。加载总耗时缩短到了 766ms。</p><p>按照缓存位置的读取顺序，相比 disk cache，浏览器会优先读取 memory Cache。通过对以上开发者工具图例的对比不难得出，读取磁盘缓存会存在稍许的耗时，而读取内存缓存是及时性的，不存在耗时。</p><p>由于 Disk cache 和 Memory Cache 这两者属于浏览器缓存的一部分，本章节不做详细的介绍，大家会在小册浏览器缓存部分与它们见面。</p><h2 id="max-age-与-s-maxage" tabindex="-1">max-age 与 s-maxage <a class="header-anchor" href="#max-age-与-s-maxage" aria-label="Permalink to &quot;max-age 与 s-maxage&quot;">​</a></h2><p>我们继续来看一下那些被浏览器缓存的资源的特点，响应报头中都包含了与强缓存有关的首部字段：Expires 或 Cache-Control。</p><p><img src="' + _imports_5 + '" alt="20210826212213.jpg"></p><p>按照上图所示报头的 Cache-Control 首部，根据上一章节介绍的知识点，此资源将被浏览器缓存 2592000 秒（即 30 天），30 天之内我们再次访问，该资源都将从浏览器缓存中读取，这不难理解。但是需要注意图中首部值还包括了 s-maxage=3600 秒，下面便到了划重点的时候：</p><ul><li><strong>s-maxage 仅在代理服务器中生效</strong></li><li><strong>在代理服务器中 s-maxage 优先级高于 max-age，同时出现时 max-age 会被覆盖</strong></li></ul><p>理解完以上两点，我们再来看一下该资源其实是一个 CDN 资源，属于代理服务器资源，在其服务器中的缓存时间并不是 30 天，而是 3600 秒（1 个小时），所以当浏览器缓存 30 天之后重新向 CDN 服务器获取资源时，此时 CDN 缓存的资源也已经过期，会触发回源机制，即向源服务器发起请求更新缓存数据。</p><p><img src="' + _imports_6 + '" alt="客户端.png"></p><p>以上例子直接描述了 max-age 与 s-maxage 的联系和区别，相信大家多思考下便会轻车熟路。</p><h2 id="expires-与-max-age" tabindex="-1">expires 与 max-age <a class="header-anchor" href="#expires-与-max-age" aria-label="Permalink to &quot;expires 与 max-age&quot;">​</a></h2><p>上篇介绍到 <strong>Expires 设置的缓存过期时间是一个绝对时间，所以会受客户端时间的影响而变得不精准</strong>，这句话怎么理解？我们以下图为例来讲解：</p><p><img src="' + _imports_7 + '" alt="20210827212431.jpg"></p><p>该资源是掘金首页加载的一张图片，已经被笔者浏览器缓存，其首部 expires 字段值表示浏览器可以将该资源缓存至 2022 年 8 月 27 日的上述时间点，那么在我们把图中 max-age 首部当做不存在的情况下（因为 max-age 会覆盖 expires 值），把电脑客户端时间修改为 2022 年 8 月 28 日，此时再次访问网页你会发现浏览器重新向服务器获取了该资源，原来的缓存失效了。这便解释了 expires “不精准”的概念。</p><p><strong>expires “不精准” 是因为它的值是一个绝对时间，而 max-age 与其相反却是一个相对时间</strong>，还是拿上图举例，由于 max-age 优先级更高，表示浏览器可以将该资源缓存 3153600 秒（365天），起始时间是从浏览器获取并缓存该资源的时间开始算起。那么此时我们修改电脑客户端时间为 1 年后，该缓存是否就不会失效了？</p><p>在此笔者先给出答案：<strong>缓存还是会失效</strong>。</p><p>对于以上回答大家必然会产生不解，比如浏览器到底依据什么来判断缓存的有效期限？笔者会在下一章给出答案。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>本文从访问网页由慢到快的现象出发，从现象到本质揭示了网页背后的浏览器强缓存生成和生效的过程，至于针对强缓存关键首部字段的介绍，本文通过对比方式让大家产生思考并提升知识点的理解程度，最后通过<strong>不精准导致的资源失效问题</strong>为下文埋下伏笔。</p><p>下文我们将继续探索强缓存背后的秘密，揭秘影响强缓存有效性的公式和原理。</p>', 39);
const _hoisted_40 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_40);
}
const _03HTTP___2___________________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _03HTTP___2___________________ as default
};
