import { _ as __unplugin_components_4 } from "./chunks/ArticleMetadata.l7JwFtuX.js";
import { _ as _export_sfc, D as resolveComponent, o as openBlock, c as createElementBlock, I as createVNode, w as withCtx, k as createBaseVNode, a as createTextVNode, R as createStaticVNode, b as createBlock, e as createCommentVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/image-20240908084608178.YINR_qyE.png";
const _imports_1 = "/advance-blog/assets/image-20240908084636372.LIx5FKZO.png";
const _imports_2 = "/advance-blog/assets/image-20240908084803904.YfvtzgIu.png";
const _imports_3 = "/advance-blog/assets/image-20240908085049171.0RLOT4J0.png";
const _imports_4 = "/advance-blog/assets/image-20240908084853360.xZ3Lnid3.png";
const _imports_5 = "/advance-blog/assets/image-20240908085213190.G8ZzgF6D.png";
const _imports_6 = "/advance-blog/assets/image-20240908085309113.gxv2IEoN.png";
const _imports_7 = "/advance-blog/assets/image-20240908085350095.ajoEBZey.png";
const _imports_8 = "/advance-blog/assets/image-20240908085442839.mCddd51O.png";
const _imports_9 = "/advance-blog/assets/image-20240908085540464.1DFBdHcK.png";
const _imports_10 = "/advance-blog/assets/image-20240908085624225.PmQdvWvD.png";
const _imports_11 = "/advance-blog/assets/image-20240908085639679.i1xHER1r.png";
const _imports_12 = "/advance-blog/assets/image-20240908085737034.UlwgcxPZ.png";
const _imports_13 = "/advance-blog/assets/image-20240908085808532.bnH75Gl5.png";
const _imports_14 = "/advance-blog/assets/image-20240908085931751.0H5hXfAj.png";
const _imports_15 = "/advance-blog/assets/image-20240908090019495.oiAT2BAD.png";
const _imports_16 = "/advance-blog/assets/image-20240908090103945.YkR0H6FJ.png";
const _imports_17 = "/advance-blog/assets/image-20240908090215014.JJp37nqi.png";
const _imports_18 = "/advance-blog/assets/image-20240908090736516.Adz4l7WV.png";
const _imports_19 = "/advance-blog/assets/image-20240908090904354.jZvUDQ2z.png";
const _imports_20 = "/advance-blog/assets/image-20240908090755474.X2kkS1AV.png";
const _imports_21 = "/advance-blog/assets/image-20240908091029402.bwDBuOxK.png";
const _imports_22 = "/advance-blog/assets/image-20240908091059079.VL2Dvp62.png";
const _imports_23 = "/advance-blog/assets/image-20240908091143007.nPwrE9em.png";
const _imports_24 = "/advance-blog/assets/image-20240908091342535.TO7T7rJ9.png";
const _imports_25 = "/advance-blog/assets/image-20240908091352085.StBysVjR.png";
const _imports_26 = "/advance-blog/assets/image-20240908091807300.Bc8ZXofV.png";
const _imports_27 = "/advance-blog/assets/image-20240908101657763.quhcGGHs.png";
const _imports_28 = "/advance-blog/assets/image-20240908103344933.BBRH3vgr.png";
const _imports_29 = "/advance-blog/assets/image-20240908103620245.jerQn0F9.png";
const _imports_30 = "/advance-blog/assets/image-20240908103747466.apG2rC4H.png";
const _imports_31 = "/advance-blog/assets/image-20240908150938104.eFbvNX44.png";
const _imports_32 = "/advance-blog/assets/image-20240908151206313.08TYmLj2.png";
const _imports_33 = "/advance-blog/assets/image-20240908151224818.VGNJmiLv.png";
const _imports_34 = "/advance-blog/assets/image-20240908151255545.SeOsMgL6.png";
const _imports_35 = "/advance-blog/assets/image-20240908151511179.qs7Pk_X4.png";
const _imports_36 = "/advance-blog/assets/image-20240908151537424.42hioEt6.png";
const _imports_37 = "/advance-blog/assets/image-20240908155508609.1x4_piOK.png";
const _imports_38 = "/advance-blog/assets/image-20240908155521653.4YXbdfYa.png";
const _imports_39 = "/advance-blog/assets/image-20240908160147058.QSIZy7c_.png";
const _imports_40 = "/advance-blog/assets/image-20240908160240560.N6FLwMc-.png";
const _imports_41 = "/advance-blog/assets/image-20240908160610860.9VCv4c34.png";
const _imports_42 = "/advance-blog/assets/image-20240908161905024.h1scRqvn.png";
const _imports_43 = "/advance-blog/assets/image-20240908161855280.EBDG93Nm.png";
const _imports_44 = "/advance-blog/assets/image-20240908162208674.6CpE3nYk.png";
const _imports_45 = "/advance-blog/assets/image-20240908162227777.x12QiiBZ.png";
const _imports_46 = "/advance-blog/assets/image-20240908162418007.NFUCooQF.png";
const _imports_47 = "/advance-blog/assets/image-20240908162723559.e7aqXLvR.png";
const _imports_48 = "/advance-blog/assets/image-20240908162902333.YH9J99gY.png";
const _imports_49 = "/advance-blog/assets/image-20240908162932313.9rsqLktb.png";
const _imports_50 = "/advance-blog/assets/image-20240908163023246.0pXHwET_.png";
const _imports_51 = "/advance-blog/assets/image-20240908163032124.V6N7ub4y.png";
const _imports_52 = "/advance-blog/assets/image-20240908163050101.YdT55Epx.png";
const __pageData = JSON.parse('{"title":"性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/06-性能优化/01-性能优化.md","filePath":"src/study-notes/01-学习笔记/06-性能优化/01-性能优化.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/06-性能优化/01-性能优化.md" };
const _hoisted_1 = /* @__PURE__ */ createBaseVNode("h1", {
  id: "性能优化",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createTextVNode("性能优化 "),
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#性能优化",
    "aria-label": 'Permalink to "性能优化"'
  }, "​")
], -1);
const _hoisted_2 = /* @__PURE__ */ createBaseVNode("h1", {
  id: "静态资源优化",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createTextVNode("静态资源优化 "),
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#静态资源优化",
    "aria-label": 'Permalink to "静态资源优化"'
  }, "​")
], -1);
const _hoisted_3 = /* @__PURE__ */ createStaticVNode('<h2 id="_1-图片优化" tabindex="-1">1.图片优化 <a class="header-anchor" href="#_1-图片优化" aria-label="Permalink to &quot;1.图片优化&quot;">​</a></h2><h4 id="_1-使用不同的包对不同格式的图片进行压缩" tabindex="-1">1.使用不同的<code>包</code>对<code>不同格式</code>的图片进行压缩 <a class="header-anchor" href="#_1-使用不同的包对不同格式的图片进行压缩" aria-label="Permalink to &quot;1.使用不同的`包`对`不同格式`的图片进行压缩&quot;">​</a></h4><h4 id="_2-图片尺寸随网络环境改变" tabindex="-1">2.图片尺寸随网络环境改变 <a class="header-anchor" href="#_2-图片尺寸随网络环境改变" aria-label="Permalink to &quot;2.图片尺寸随网络环境改变&quot;">​</a></h4><ul><li><p>在url后面添加参数</p></li><li><p>响应式的图片</p><p><img src="' + _imports_0 + '" alt="image-20240908084608178"></p></li><li><p>逐步加载图像</p><p><img src="' + _imports_1 + '" alt="image-20240908084636372"></p></li></ul><p><img src="' + _imports_2 + '" alt="image-20240908084803904"></p><h4 id="_3-服务端的图片优化" tabindex="-1">3.服务端的图片优化 <a class="header-anchor" href="#_3-服务端的图片优化" aria-label="Permalink to &quot;3.服务端的图片优化&quot;">​</a></h4><ul><li><p>在url参数添加不同参数请求图片</p><p><img src="' + _imports_3 + '" alt="image-20240908085049171"></p></li></ul><h4 id="_4-更好的方式" tabindex="-1">4.更好的方式 <a class="header-anchor" href="#_4-更好的方式" aria-label="Permalink to &quot;4.更好的方式&quot;">​</a></h4><p><img src="' + _imports_4 + '" alt="image-20240908084853360"></p><hr><h3 id="_2-html的优化" tabindex="-1">2.HTML的优化 <a class="header-anchor" href="#_2-html的优化" aria-label="Permalink to &quot;2.HTML的优化&quot;">​</a></h3><h4 id="_1-精简html代码" tabindex="-1">1.精简html代码 <a class="header-anchor" href="#_1-精简html代码" aria-label="Permalink to &quot;1.精简html代码&quot;">​</a></h4><p><img src="' + _imports_5 + '" alt="image-20240908085213190"></p><h4 id="_2-文件放在合适的位置" tabindex="-1">2.文件放在合适的位置 <a class="header-anchor" href="#_2-文件放在合适的位置" aria-label="Permalink to &quot;2.文件放在合适的位置&quot;">​</a></h4><p><img src="' + _imports_6 + '" alt="image-20240908085309113"></p><h4 id="_3-增加用户体验" tabindex="-1">3.增加用户体验 <a class="header-anchor" href="#_3-增加用户体验" aria-label="Permalink to &quot;3.增加用户体验&quot;">​</a></h4><p><img src="' + _imports_7 + '" alt="image-20240908085350095"></p><h3 id="_3-css的优化" tabindex="-1">3.CSS的优化 <a class="header-anchor" href="#_3-css的优化" aria-label="Permalink to &quot;3.CSS的优化&quot;">​</a></h3><h4 id="_1-提升css渲染性能" tabindex="-1">1.提升css渲染性能 <a class="header-anchor" href="#_1-提升css渲染性能" aria-label="Permalink to &quot;1.提升css渲染性能&quot;">​</a></h4><p><img src="' + _imports_8 + '" alt="image-20240908085442839"></p><h4 id="_2-合适的使用css选择器" tabindex="-1">2.合适的使用css选择器 <a class="header-anchor" href="#_2-合适的使用css选择器" aria-label="Permalink to &quot;2.合适的使用css选择器&quot;">​</a></h4><p><img src="' + _imports_9 + '" alt="image-20240908085540464"></p><h4 id="_3-提升css文件加载性能" tabindex="-1">3.提升css文件加载性能 <a class="header-anchor" href="#_3-提升css文件加载性能" aria-label="Permalink to &quot;3.提升css文件加载性能&quot;">​</a></h4><p><img src="' + _imports_10 + '" alt="image-20240908085624225"></p><h4 id="_4-精简css代码" tabindex="-1">4.精简css代码 <a class="header-anchor" href="#_4-精简css代码" aria-label="Permalink to &quot;4.精简css代码&quot;">​</a></h4><p><img src="' + _imports_11 + '" alt="image-20240908085639679"></p><h4 id="_5-使用webfont" tabindex="-1">5.使用webfont <a class="header-anchor" href="#_5-使用webfont" aria-label="Permalink to &quot;5.使用webfont&quot;">​</a></h4><p><img src="' + _imports_12 + '" alt="image-20240908085737034"></p><h3 id="_4-js的优化" tabindex="-1">4.JS的优化 <a class="header-anchor" href="#_4-js的优化" aria-label="Permalink to &quot;4.JS的优化&quot;">​</a></h3><p><img src="' + _imports_13 + '" alt="image-20240908085808532"></p><h4 id="_1-js变量和函数的优化" tabindex="-1">1.js变量和函数的优化 <a class="header-anchor" href="#_1-js变量和函数的优化" aria-label="Permalink to &quot;1.js变量和函数的优化&quot;">​</a></h4><p><img src="' + _imports_14 + '" alt="image-20240908085931751"></p><h4 id="_2-js动画优化" tabindex="-1">2.js动画优化 <a class="header-anchor" href="#_2-js动画优化" aria-label="Permalink to &quot;2.js动画优化&quot;">​</a></h4><p><img src="' + _imports_15 + '" alt="image-20240908090019495"></p><h4 id="_3-合理使用缓存" tabindex="-1">3.合理使用缓存 <a class="header-anchor" href="#_3-合理使用缓存" aria-label="Permalink to &quot;3.合理使用缓存&quot;">​</a></h4><p><img src="' + _imports_16 + '" alt="image-20240908090103945"></p><h4 id="_4-缓存技术选型" tabindex="-1">4.缓存技术选型 <a class="header-anchor" href="#_4-缓存技术选型" aria-label="Permalink to &quot;4.缓存技术选型&quot;">​</a></h4><h5 id="cookie" tabindex="-1">cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;cookie&quot;">​</a></h5><p><img src="' + _imports_17 + '" alt="image-20240908090215014"></p><h5 id="sessionstorage" tabindex="-1">sessionstorage <a class="header-anchor" href="#sessionstorage" aria-label="Permalink to &quot;sessionstorage&quot;">​</a></h5><p><img src="' + _imports_18 + '" alt="image-20240908090736516"></p><h5 id="localstorage" tabindex="-1">localstorage <a class="header-anchor" href="#localstorage" aria-label="Permalink to &quot;localstorage&quot;">​</a></h5><p><img src="' + _imports_19 + '" alt="image-20240908090904354"></p><h5 id="indexeddb" tabindex="-1">indexeddb <a class="header-anchor" href="#indexeddb" aria-label="Permalink to &quot;indexeddb&quot;">​</a></h5><p><img src="' + _imports_20 + '" alt="image-20240908090755474"></p><h3 id="_5-减少重排和回流" tabindex="-1">5.减少重排和回流 <a class="header-anchor" href="#_5-减少重排和回流" aria-label="Permalink to &quot;5.减少重排和回流&quot;">​</a></h3><h4 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-label="Permalink to &quot;css&quot;">​</a></h4><p><img src="' + _imports_21 + '" alt="image-20240908091029402"></p><h4 id="js" tabindex="-1">js <a class="header-anchor" href="#js" aria-label="Permalink to &quot;js&quot;">​</a></h4><p><img src="' + _imports_22 + '" alt="image-20240908091059079"></p><h4 id="dom优化" tabindex="-1">dom优化 <a class="header-anchor" href="#dom优化" aria-label="Permalink to &quot;dom优化&quot;">​</a></h4><p><img src="' + _imports_23 + '" alt="image-20240908091143007"></p><h3 id="_6-静态文件版本号更新策略" tabindex="-1">6.静态文件版本号更新策略 <a class="header-anchor" href="#_6-静态文件版本号更新策略" aria-label="Permalink to &quot;6.静态文件版本号更新策略&quot;">​</a></h3><p><img src="' + _imports_24 + '" alt="image-20240908091342535"></p><p><img src="' + _imports_25 + '" alt="image-20240908091352085"></p><h3 id="_7-webpack打包优化" tabindex="-1">7.webpack打包优化 <a class="header-anchor" href="#_7-webpack打包优化" aria-label="Permalink to &quot;7.webpack打包优化&quot;">​</a></h3><p><img src="' + _imports_26 + '" alt="image-20240908091807300"></p><h2 id="_2-浏览器渲染" tabindex="-1">2.浏览器渲染 <a class="header-anchor" href="#_2-浏览器渲染" aria-label="Permalink to &quot;2.浏览器渲染&quot;">​</a></h2><h3 id="_1-页面渲染" tabindex="-1">1.页面渲染 <a class="header-anchor" href="#_1-页面渲染" aria-label="Permalink to &quot;1.页面渲染&quot;">​</a></h3><p><img src="' + _imports_27 + '" alt="image-20240908101657763"></p><h3 id="_2-同构直出" tabindex="-1">2.同构直出 <a class="header-anchor" href="#_2-同构直出" aria-label="Permalink to &quot;2.同构直出&quot;">​</a></h3><p><img src="' + _imports_28 + '" alt="image-20240908103344933"></p><p><img src="' + _imports_29 + '" alt="image-20240908103620245"></p><h3 id="_3-pwa" tabindex="-1">3.PWA <a class="header-anchor" href="#_3-pwa" aria-label="Permalink to &quot;3.PWA&quot;">​</a></h3><p><img src="' + _imports_30 + '" alt="image-20240908103747466"></p><h3 id="_4-页面加载策略" tabindex="-1">4.页面加载策略 <a class="header-anchor" href="#_4-页面加载策略" aria-label="Permalink to &quot;4.页面加载策略&quot;">​</a></h3><h4 id="_1-懒加载" tabindex="-1">1.懒加载 <a class="header-anchor" href="#_1-懒加载" aria-label="Permalink to &quot;1.懒加载&quot;">​</a></h4><p><img src="' + _imports_31 + '" alt="image-20240908150938104"></p><h4 id="_2-预加载" tabindex="-1">2.预加载 <a class="header-anchor" href="#_2-预加载" aria-label="Permalink to &quot;2.预加载&quot;">​</a></h4><p><img src="' + _imports_32 + '" alt="image-20240908151206313"></p><p><img src="' + _imports_33 + '" alt="image-20240908151224818"></p><p><img src="' + _imports_34 + '" alt="image-20240908151255545"></p><h4 id="_3-按需加载" tabindex="-1">3.按需加载 <a class="header-anchor" href="#_3-按需加载" aria-label="Permalink to &quot;3.按需加载&quot;">​</a></h4><p><img src="' + _imports_35 + '" alt="image-20240908151511179"></p><p><img src="' + _imports_36 + '" alt="image-20240908151537424"></p><h2 id="_3-接口优化" tabindex="-1">3.接口优化 <a class="header-anchor" href="#_3-接口优化" aria-label="Permalink to &quot;3.接口优化&quot;">​</a></h2><p><img src="' + _imports_37 + '" alt="image-20240908155508609"><img src="' + _imports_38 + '" alt="image-20240908155521653"></p><h2 id="_4-webview" tabindex="-1">4.webview <a class="header-anchor" href="#_4-webview" aria-label="Permalink to &quot;4.webview&quot;">​</a></h2><p><img src="' + _imports_39 + '" alt="image-20240908160147058"></p><p><strong>WebView</strong> 是一种嵌入网页内容的组件，通常用于在应用程序中显示网页，而不需要用户跳出应用去使用浏览器。它是一种在应用内部加载和展示网页的技术，使得开发者能够将网页内容直接集成到应用中。</p><h3 id="工作原理" tabindex="-1">工作原理： <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理：&quot;">​</a></h3><p>WebView 可以将网页内容作为应用程序的一部分嵌入，无需用户在浏览器中打开。应用程序通过 WebView 加载网页，用户可以在应用界面内浏览网页内容。WebView 本质上是一个浏览器引擎，但它运行在应用程序内部，允许开发者更好地控制用户体验。</p><h3 id="使用场景" tabindex="-1">使用场景： <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景：&quot;">​</a></h3><ol><li><strong>显示网页内容</strong>：当应用需要展示来自网络的动态内容时，例如新闻、博客、商品信息等，可以使用 WebView 加载网页。</li><li><strong>混合应用（Hybrid Apps）</strong>：在移动应用开发中，WebView 被广泛用于构建混合应用。应用的一部分是原生代码，另一部分则是通过 Web 技术（HTML、CSS、JavaScript）实现的网页内容。</li><li><strong>嵌入外部服务</strong>：应用程序中常常需要嵌入外部的服务或工具，如支付页面、登录页面、地图等，使用 WebView 可以实现这种功能。</li></ol><h3 id="webview-在不同平台上的实现" tabindex="-1">WebView 在不同平台上的实现： <a class="header-anchor" href="#webview-在不同平台上的实现" aria-label="Permalink to &quot;WebView 在不同平台上的实现：&quot;">​</a></h3><ol><li><strong>Android WebView</strong>：在 Android 平台上，<code>WebView</code> 是 Android 系统自带的类，开发者可以直接在应用中使用。通过 <code>loadUrl()</code> 方法可以加载指定的网页 URL。<div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">WebView</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> myWebView</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (WebView) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">findViewById</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(R.id.webview);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">myWebView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">loadUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;https://www.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div></li><li><strong>iOS WKWebView</strong>：在 iOS 系统中，<code>WKWebView</code> 是一种用于加载和展示网页内容的组件。相比之前的 <code>UIWebView</code>，<code>WKWebView</code> 提供了更好的性能和安全性。<div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> webView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> WKWebView</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">frame</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: .zero)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">webView.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">URLRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;https://www.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">))</span></span></code></pre></div></li></ol><h3 id="webview-的优点" tabindex="-1">WebView 的优点： <a class="header-anchor" href="#webview-的优点" aria-label="Permalink to &quot;WebView 的优点：&quot;">​</a></h3><ol><li><strong>集成网页内容</strong>：可以轻松地将网络内容嵌入到应用程序中，而无需切换到外部浏览器。</li><li><strong>减少开发成本</strong>：通过 WebView，可以用现有的网页技术（HTML、CSS、JavaScript）构建应用的某些部分，降低开发原生代码的成本。</li><li><strong>灵活性</strong>：WebView 允许开发者在应用中动态加载和更新内容，无需发布新的应用版本。</li></ol><h3 id="webview-的缺点" tabindex="-1">WebView 的缺点： <a class="header-anchor" href="#webview-的缺点" aria-label="Permalink to &quot;WebView 的缺点：&quot;">​</a></h3><ol><li><strong>性能较差</strong>：与原生应用相比，WebView 的性能通常较差，尤其是在渲染复杂的网页或处理大量交互时。</li><li><strong>安全性问题</strong>：由于 WebView 可以加载外部网页，有时可能会带来安全隐患，开发者需要谨慎处理用户数据和权限问题。</li><li><strong>用户体验</strong>：与原生 UI 组件相比，WebView 的用户体验可能不够流畅，特别是在动画、手势操作等方面。</li></ol><h3 id="典型应用场景" tabindex="-1">典型应用场景： <a class="header-anchor" href="#典型应用场景" aria-label="Permalink to &quot;典型应用场景：&quot;">​</a></h3><ul><li>电商应用中的商品页面常通过 WebView 实现，因为网页更新速度快，且易于管理。</li><li>一些跨平台的移动应用，如 <strong>WeChat 小程序</strong>、<strong>支付宝小程序</strong>，也会用 WebView 来加载和展示网页内容。</li></ul><p>总之，WebView 为开发者提供了一种灵活、方便的方式，将网页内容与应用程序无缝集成，使得网页技术在应用中发挥作用。</p><p><strong>WebCore</strong> 是一个开源的网页渲染引擎，主要用于将网页内容解析并呈现给用户。它是 <strong>WebKit</strong> 项目的核心部分，负责处理 HTML、CSS、JavaScript 和图像等网页内容，将它们渲染为用户在浏览器中看到的页面。</p><h3 id="webcore-的功能与架构" tabindex="-1">WebCore 的功能与架构： <a class="header-anchor" href="#webcore-的功能与架构" aria-label="Permalink to &quot;WebCore 的功能与架构：&quot;">​</a></h3><ol><li><strong>HTML 解析</strong>：WebCore 解析 HTML 文件，生成对应的文档对象模型 (DOM)，这是网页内容的结构化表示。</li><li><strong>CSS 处理</strong>：WebCore 解析 CSS 样式表，计算网页元素的样式，包括布局、字体、颜色等。</li><li><strong>JavaScript 执行</strong>：WebCore 与 JavaScript 引擎（如 JavaScriptCore）协同工作，执行网页中的动态脚本，处理用户交互和事件。</li><li><strong>图像与多媒体渲染</strong>：WebCore 支持网页中的图像、视频和音频等多媒体内容的渲染和播放。</li><li><strong>页面布局与绘制</strong>：根据 HTML 结构和 CSS 样式计算页面的布局，并将其绘制到屏幕上。这个过程涉及盒模型的计算、页面的排版和显示。</li></ol><h3 id="webcore-的历史与发展" tabindex="-1">WebCore 的历史与发展： <a class="header-anchor" href="#webcore-的历史与发展" aria-label="Permalink to &quot;WebCore 的历史与发展：&quot;">​</a></h3><ul><li><strong>WebCore 的起源</strong>：WebCore 最早来源于 <strong>KDE</strong> 的 <strong>KHTML</strong> 项目，这是一个为 Linux 桌面环境开发的网页渲染引擎。2002年，<strong>Apple</strong> 在 KHTML 的基础上开发了 WebCore，用于 Safari 浏览器。随着 WebKit 的逐步开源，WebCore 也被广泛用于其他浏览器和应用中。</li><li><strong>WebKit 的演变</strong>：WebKit 是 WebCore 的上层框架，除了 WebCore 外，还包括 JavaScript 引擎（如 JavaScriptCore 或 V8）以及其他与网络相关的模块。尽管 WebKit 在很多地方被使用，Google 于 2013 年从 WebKit 分离出 <strong>Blink</strong> 引擎，用于 <strong>Chrome</strong> 浏览器，但 WebCore 依然在很多项目中作为基础技术存在。</li></ul><h3 id="使用-webcore-的浏览器和平台" tabindex="-1">使用 WebCore 的浏览器和平台： <a class="header-anchor" href="#使用-webcore-的浏览器和平台" aria-label="Permalink to &quot;使用 WebCore 的浏览器和平台：&quot;">​</a></h3><ol><li><strong>Safari</strong>：Apple 的 Safari 浏览器一直基于 WebKit 引擎，WebCore 是其中处理网页渲染的关键部分。</li><li><strong>iOS 和 macOS</strong>：苹果设备上的所有网页渲染，包括应用中的 WebView，都是基于 WebCore 实现的。</li><li><strong>QtWebKit</strong>：基于 Qt 框架开发的应用程序也曾使用 WebCore 作为网页渲染引擎。</li></ol><h3 id="webcore-的优点" tabindex="-1">WebCore 的优点： <a class="header-anchor" href="#webcore-的优点" aria-label="Permalink to &quot;WebCore 的优点：&quot;">​</a></h3><ol><li><strong>高效解析和渲染</strong>：作为 WebKit 的核心，WebCore 提供了高效的网页解析和渲染能力，特别是在处理标准 HTML 和 CSS 时表现良好。</li><li><strong>跨平台性</strong>：WebCore 是开源的，可以被集成到多个平台和设备上，从桌面到移动设备都可以使用它来渲染网页。</li><li><strong>模块化设计</strong>：WebCore 采用模块化设计，开发者可以灵活地扩展或定制某些功能以适应具体的需求。</li></ol><h3 id="webcore-的缺点" tabindex="-1">WebCore 的缺点： <a class="header-anchor" href="#webcore-的缺点" aria-label="Permalink to &quot;WebCore 的缺点：&quot;">​</a></h3><ol><li><strong>复杂度较高</strong>：由于 WebCore 涉及 HTML、CSS、JavaScript 等多个标准的实现，其内部架构相对复杂，开发者需要具备深厚的网页技术背景才能深入理解其工作机制。</li><li><strong>性能瓶颈</strong>：尽管 WebCore 经过了大量优化，但在处理过于复杂的网页时，性能可能会受到影响，尤其是在较低性能的设备上。</li></ol><h3 id="webcore-与其他引擎的对比" tabindex="-1">WebCore 与其他引擎的对比： <a class="header-anchor" href="#webcore-与其他引擎的对比" aria-label="Permalink to &quot;WebCore 与其他引擎的对比：&quot;">​</a></h3><ul><li><strong>Blink</strong>：Google 在 WebKit 的基础上开发的 Blink 引擎，虽然它与 WebCore 有共同的历史，但现在已经演变成独立的项目，主要用于 Chrome 浏览器。</li><li><strong>Gecko</strong>：Mozilla 的 Gecko 引擎也是一个常见的网页渲染引擎，与 WebCore 相比，Gecko 具有更长的历史，广泛用于 Firefox 浏览器中。</li></ul><p>总的来说，<strong>WebCore</strong> 是 WebKit 项目中的核心组件，专注于网页的解析与渲染。它在很多浏览器和应用程序中都起到了至关重要的作用，使得现代网页技术得以顺利呈现。</p><p><img src="' + _imports_40 + '" alt="image-20240908160240560"></p><h2 id="_5-浏览器优化" tabindex="-1">5.浏览器优化 <a class="header-anchor" href="#_5-浏览器优化" aria-label="Permalink to &quot;5.浏览器优化&quot;">​</a></h2><h3 id="_1-打通登录态" tabindex="-1">1.打通登录态 <a class="header-anchor" href="#_1-打通登录态" aria-label="Permalink to &quot;1.打通登录态&quot;">​</a></h3><p><img src="' + _imports_41 + '" alt="image-20240908160610860"></p><h3 id="_2-离线包" tabindex="-1">2.离线包 <a class="header-anchor" href="#_2-离线包" aria-label="Permalink to &quot;2.离线包&quot;">​</a></h3><p><img src="' + _imports_42 + '" alt="image-20240908161905024"></p><p><img src="' + _imports_43 + '" alt="image-20240908161855280"></p><h3 id="_3-cdn" tabindex="-1">3.CDN <a class="header-anchor" href="#_3-cdn" aria-label="Permalink to &quot;3.CDN&quot;">​</a></h3><p><img src="' + _imports_44 + '" alt="image-20240908162208674"></p><p><img src="' + _imports_45 + '" alt="image-20240908162227777"><img src="' + _imports_46 + '" alt="image-20240908162418007"></p><h3 id="_4-减少http请求" tabindex="-1">4.减少http请求 <a class="header-anchor" href="#_4-减少http请求" aria-label="Permalink to &quot;4.减少http请求&quot;">​</a></h3><p><img src="' + _imports_47 + '" alt="image-20240908162723559"></p><h3 id="_5-减少cookie" tabindex="-1">5.减少cookie <a class="header-anchor" href="#_5-减少cookie" aria-label="Permalink to &quot;5.减少cookie&quot;">​</a></h3><p><img src="' + _imports_48 + '" alt="image-20240908162902333"></p><h3 id="_6-协商缓存和强缓存" tabindex="-1">6.协商缓存和强缓存 <a class="header-anchor" href="#_6-协商缓存和强缓存" aria-label="Permalink to &quot;6.协商缓存和强缓存&quot;">​</a></h3><p><img src="' + _imports_49 + '" alt="image-20240908162932313"> <img src="' + _imports_50 + '" alt="image-20240908163023246"></p><p><img src="' + _imports_51 + '" alt="image-20240908163032124"><img src="' + _imports_52 + '" alt="image-20240908163050101"></p>', 124);
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ArticleMetadata = __unplugin_components_4;
  const _component_ClientOnly = resolveComponent("ClientOnly");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createVNode(_component_ClientOnly, null, {
      default: withCtx(() => {
        var _a, _b;
        return [
          (((_a = _ctx.$frontmatter) == null ? void 0 : _a.aside) ?? true) && (((_b = _ctx.$frontmatter) == null ? void 0 : _b.showArticleMetadata) ?? true) ? (openBlock(), createBlock(_component_ArticleMetadata, {
            key: 0,
            article: _ctx.$frontmatter
          }, null, 8, ["article"])) : createCommentVNode("", true)
        ];
      }),
      _: 1
    }),
    _hoisted_2,
    createVNode(_component_ClientOnly, null, {
      default: withCtx(() => {
        var _a, _b;
        return [
          (((_a = _ctx.$frontmatter) == null ? void 0 : _a.aside) ?? true) && (((_b = _ctx.$frontmatter) == null ? void 0 : _b.showArticleMetadata) ?? true) ? (openBlock(), createBlock(_component_ArticleMetadata, {
            key: 0,
            article: _ctx.$frontmatter
          }, null, 8, ["article"])) : createCommentVNode("", true)
        ];
      }),
      _: 1
    }),
    _hoisted_3
  ]);
}
const _01_____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _01_____ as default
};
