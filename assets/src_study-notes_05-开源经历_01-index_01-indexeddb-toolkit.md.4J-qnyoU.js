import { _ as __unplugin_components_4 } from "./chunks/ArticleMetadata.l7JwFtuX.js";
import { _ as _export_sfc, D as resolveComponent, o as openBlock, c as createElementBlock, I as createVNode, w as withCtx, k as createBaseVNode, a as createTextVNode, R as createStaticVNode, b as createBlock, e as createCommentVNode } from "./chunks/framework.b55ravPP.js";
const __pageData = JSON.parse('{"title":"indexeddb-toolkit","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/05-开源经历/01-index/01-indexeddb-toolkit.md","filePath":"src/study-notes/05-开源经历/01-index/01-indexeddb-toolkit.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/05-开源经历/01-index/01-indexeddb-toolkit.md" };
const _hoisted_1 = /* @__PURE__ */ createBaseVNode("h1", {
  id: "indexeddb-toolkit",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createBaseVNode("strong", null, "indexeddb-toolkit"),
  /* @__PURE__ */ createTextVNode(),
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#indexeddb-toolkit",
    "aria-label": 'Permalink to "**indexeddb-toolkit**"'
  }, "​")
], -1);
const _hoisted_2 = /* @__PURE__ */ createStaticVNode('<ul><li><strong>indexeddb-toolkit</strong>是一个用于浏览器的轻量级数据库操作库，使用 ts+promise 提供了对 IndexedDB 的封装和便捷的 API，用于简化数据库的创建、表的管理和数据的增删改查操作。它提供了一系列的方法来操作数据库和表，包括创建、删除、查询和更新数据等功能,来减少开发者的成本,API命名与主流数据库orm类似, 这是V2版本,所有版本可以在<code>gitee地址</code>中的<code>分支</code>中查看。</li></ul><blockquote><p>改变: <code>v1采用class的方式开发,而v2版本使用函数式范式进行全部重构,补充了大量的提示机制。</code></p></blockquote><h2 id="项目地址" tabindex="-1">项目地址 <a class="header-anchor" href="#项目地址" aria-label="Permalink to &quot;项目地址&quot;">​</a></h2><p>gitee : <a href="https://gitee.com/chen-jingsheng-123/indexeddb-toolkit" target="_blank" rel="noreferrer">https://gitee.com/chen-jingsheng-123/indexeddb-toolkit</a></p><p>github : <a href="https://github.com/LiCHUYA/indexeddb-toolkit" target="_blank" rel="noreferrer">https://github.com/LiCHUYA/indexeddb-toolkit</a></p><p>type-doc : <a href="https://lichuya.github.io/indexeddb-toolkit-typedocs/" target="_blank" rel="noreferrer">https://lichuya.github.io/indexeddb-toolkit-typedocs/</a></p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">npm i indexeddb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">toolkit</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">或</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">pnpm i indexeddb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">toolkit</span></span></code></pre></div><h2 id="使用方式" tabindex="-1">使用方式 <a class="header-anchor" href="#使用方式" aria-label="Permalink to &quot;使用方式&quot;">​</a></h2><p>方式一</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { useDatabase } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;indexeddb-toolkit&#39;</span></span></code></pre></div><p>方式二</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> indexeddbToolkit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;indexeddb-toolkit&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">useDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> indexeddbToolkit</span></span></code></pre></div><p>方式三</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;../dist/indexeddb-toolkit.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.log(indexeddbToolkit)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><h2 id="使用前必看" tabindex="-1"><strong><span style="color:red;">使用前必看!</span></strong> <a class="header-anchor" href="#使用前必看" aria-label="Permalink to &quot;**&lt;span style=&quot;color:red&quot;&gt;使用前必看!&lt;/span&gt;**&quot;">​</a></h2><blockquote><p>学习API之前,提前先了解一下核心基础</p><ol><li><strong>由于indexeddb的一些限制,请不要创建表和创建数据库同时进行。</strong></li><li>该库封装分为两大块:database,table的操作,对应着&quot;数据库&quot;,&quot;表&quot;,也对应着对它们的crud方法延申。</li><li>本库都采用promise的方式,我们可以轻松使用async,await的方式拿到其结果。</li><li>indexedb是支持nosql的非关系型数据库。</li></ol></blockquote><hr><blockquote><p>有很好用的三个API,笔者在这单独拿出来提一下</p><p>创建数据库<strong>useDatabase</strong>, 查询数据<strong>findDBData</strong>, 创建表<strong>createTable</strong></p><p>1.useDatabase(dbName: string)</p><p>该方法可以不用考虑繁杂琐碎的原生API, 只需要传入一个名字便,无感创建/使用数据库,极大减小心智负担。</p><p>2.<code>createTable(dbName: string, tableName: string, indexs: any[])</code></p><p>该方法接收三个参数,数据库名,表名和索引数组。</p><p>当不太熟悉什么是索引时,我们可以看以下示例:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">我们从indexeddb中某张表中查出了一条数据,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">sex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;男&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	以上对象中有id,age,sex为key,那么就可以任意选择这三个字段作为索引id数组中的某一项,这对后面查询方法会很有用,想查询出age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">18的数据,就可以用索引来进行查询。</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">示例</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createTable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;db&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;tb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//创建表</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> insertOne</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;db&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;tb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,{id:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,age:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,sex:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;男&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//插入一条数据</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">使用索引查询数据</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> findByIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;db&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;tb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;18&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//这样就能查询出所有age为18的这一条数据</span></span></code></pre></div><p>3.<code>findDBData(dbName: string, tableName?: string)</code></p><p>该方法用于查询数据库中表格的数据,可以传入两个参数,一个是dbName,一个是tbName,</p><p>当只传入dbName的时候,查询 该数据库下所有表,以及所有数据,呈树状结构</p></blockquote><h2 id="数据库的操作方法" tabindex="-1">数据库的操作方法 <a class="header-anchor" href="#数据库的操作方法" aria-label="Permalink to &quot;数据库的操作方法&quot;">​</a></h2><ul><li><code>useDatabase(dbName: string)</code>: 使用/创建指定数据库</li><li><code>deleteAllDatabases()</code>: 删除所有数据库</li><li><code>deleteDatabase(dbName: string)</code>: 删除指定数据库</li><li><code>getTableNames(dbName: string)</code>: 获取指定数据库的表名列表</li></ul><h4 id="usedatabase-dbname-string" tabindex="-1"><code>useDatabase(dbName: string)</code> <a class="header-anchor" href="#usedatabase-dbname-string" aria-label="Permalink to &quot;`useDatabase(dbName: string)`&quot;">​</a></h4><ul><li>功能：使用/创建指定数据库，如果数据库不存在则创建，存在则表示使用数据库</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li></ul></li><li>返回值：返回一个 Promise 对象，包含当前数据库实例</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//使用示例</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> useDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;数据库名称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//或者</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">useDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;dbName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span></code></pre></div><h4 id="deletealldatabases" tabindex="-1"><code>deleteAllDatabases()</code> <a class="header-anchor" href="#deletealldatabases" aria-label="Permalink to &quot;`deleteAllDatabases()`&quot;">​</a></h4><ul><li>功能：删除所有数据库</li><li>参数：无</li><li>返回值：返回一个 Promise 对象，包含删除结果的状态和消息</li></ul><h4 id="deletedatabase-dbname-string" tabindex="-1"><code>deleteDatabase(dbName: string)</code> <a class="header-anchor" href="#deletedatabase-dbname-string" aria-label="Permalink to &quot;`deleteDatabase(dbName: string)`&quot;">​</a></h4><ul><li>功能：删除指定数据库</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li></ul></li><li>返回值：返回一个 Promise 对象，包含删除结果的状态和消息</li></ul><h4 id="gettablenames-dbname-string" tabindex="-1"><code>getTableNames(dbName: string)</code> <a class="header-anchor" href="#gettablenames-dbname-string" aria-label="Permalink to &quot;`getTableNames(dbName: string)`&quot;">​</a></h4><ul><li>功能：获取指定数据库中的表名列表</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li></ul></li><li>返回值：返回一个 Promise 对象，包含表名称数组</li><li></li></ul><h2 id="表的操作方法" tabindex="-1">表的操作方法 <a class="header-anchor" href="#表的操作方法" aria-label="Permalink to &quot;表的操作方法&quot;">​</a></h2><h3 id="创建表" tabindex="-1">创建表 <a class="header-anchor" href="#创建表" aria-label="Permalink to &quot;创建表&quot;">​</a></h3><ul><li><code>createTable(dbName: string, tableName: string, indexs: any[])</code>: 创建表</li><li><code>deleteTable(dbName: string, tableName: string)</code>: 删除指定表</li><li>`deleteAllTables(dbName: string): 删除所有表</li></ul><h4 id="createtable-dbname-string-tablename-string-indexs-any" tabindex="-1"><code>createTable(dbName: string, tableName: string, indexs: any[])</code> <a class="header-anchor" href="#createtable-dbname-string-tablename-string-indexs-any" aria-label="Permalink to &quot;`createTable(dbName: string, tableName: string, indexs: any[])`&quot;">​</a></h4><ul><li>功能：创建表</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>tableName</code> - 表名称</li><li><code>indexs</code> - 索引数组</li></ul></li><li>返回值：返回一个 Promise 对象，包含创建结果的状态和状态码</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//创建表</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createTable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;数据库名称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;表的名称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;索引数组&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})();</span></span></code></pre></div><h4 id="deletetable-dbname-string-tablename-string" tabindex="-1"><code>deleteTable(dbName: string, tableName: string)</code> <a class="header-anchor" href="#deletetable-dbname-string-tablename-string" aria-label="Permalink to &quot;`deleteTable(dbName: string, tableName: string)`&quot;">​</a></h4><ul><li>功能：删除指定表</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>tableName</code> - 表名称</li></ul></li><li>返回值：返回一个 Promise 对象，包含删除结果的状态和消息</li></ul><h4 id="deletealltables-dbname-string" tabindex="-1"><code>deleteAllTables(dbName: string)</code> <a class="header-anchor" href="#deletealltables-dbname-string" aria-label="Permalink to &quot;`deleteAllTables(dbName: string)`&quot;">​</a></h4><ul><li>功能：删除指定数据库中的所有表</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li></ul></li><li>返回值：返回一个 Promise 对象，包含删除结果的状态和消息</li></ul><h2 id="表数据操作方法" tabindex="-1">表数据操作方法 <a class="header-anchor" href="#表数据操作方法" aria-label="Permalink to &quot;表数据操作方法&quot;">​</a></h2><h3 id="查询" tabindex="-1">查询 <a class="header-anchor" href="#查询" aria-label="Permalink to &quot;查询&quot;">​</a></h3><p><strong>注意事项:</strong></p><blockquote><p>findByKey和findByIndex时,最后一个参数为isAll,因为indexeddb根据主键和索引查询出来的数据只展示第一条,</p><p>可以通过这个参数来控制是展示查询到的第一条还是全部数据。</p></blockquote><ul><li><code>findDBData(dbName: string, tableName?: string)</code>: 查询表的数据</li><li><code>findByKey(dbName: string, tableName: string, key: any, isAll: boolean = true)</code>: 根据主键查询数据</li><li><code>findByIndex(dbName: string, tableName: string, indexName: string, indexValue: any,isAll: boolean = true)</code>: 根据索引查询</li></ul><h3 id="插入" tabindex="-1">插入 <a class="header-anchor" href="#插入" aria-label="Permalink to &quot;插入&quot;">​</a></h3><ul><li><code>insertOne(dbName: any, tableName: string, data: any)</code>: 向指定表中插入一条数据</li><li>`insertMany(dbName: any, tableName: string, data: any[]): 向指定表中插入多条数据</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  //插入一条数据</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> insertOne</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;数据库名称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;表的名称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;数据&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})();</span></span></code></pre></div><h3 id="更新" tabindex="-1">更新 <a class="header-anchor" href="#更新" aria-label="Permalink to &quot;更新&quot;">​</a></h3><ul><li><code>updateDataByPrimaryKey(dbName: any, storeName: string, id: number, data: any</code>): 根据主键更新数据</li><li>`updateDataByIndex(dbName: any, storeName: string, indexName: string, indexValue: any, data: any): 根据索引更新数据</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  //根据主键更新数据</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> updateDataByPrimaryKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;数据库名称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;表的名称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;主键&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;数据&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  );</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})();</span></span></code></pre></div><h3 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h3><ul><li>`deleteOneByPk(dbName: string, tableName: string, id: number): 根据主键删除数据</li><li><code>deleteOneByIndex(dbName: string, tableName: string, indexName: string, indexValue: any)</code>: 根据索引删除数据</li><li><code>deleteManyByKeys(dbName: string, tableName: string, ids: number[])</code>: 根据主键数组批量删除数据</li><li><code>deleteManyByIndex(dbName: string, tableName: string, indexName: string, indexValues: any[])</code>: 根据索引批量删除数据</li></ul><h2 id="crud方法具体介绍" tabindex="-1">CRUD方法具体介绍 <a class="header-anchor" href="#crud方法具体介绍" aria-label="Permalink to &quot;CRUD方法具体介绍&quot;">​</a></h2><h4 id="finddbdata-dbname-string-tablename-string" tabindex="-1"><code>findDBData(dbName: string, tableName?: string)</code> <a class="header-anchor" href="#finddbdata-dbname-string-tablename-string" aria-label="Permalink to &quot;`findDBData(dbName: string, tableName?: string)`&quot;">​</a></h4><ul><li>功能：查询数据库中表的数据</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>tableName</code> - 表名称，可选，不传则查询所有表的数据</li></ul></li><li>返回值：返回一个 Promise 对象，包含查询结果数组</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  //查询表的数据</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> updateDataByPrimaryKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;数据库名称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;表的名称_可选&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})();</span></span></code></pre></div><h4 id="findbykey-dbname-string-tablename-string-key-any" tabindex="-1"><code>findByKey(dbName: string, tableName: string, key: any)</code> <a class="header-anchor" href="#findbykey-dbname-string-tablename-string-key-any" aria-label="Permalink to &quot;`findByKey(dbName: string, tableName: string, key: any)`&quot;">​</a></h4><ul><li>功能：根据主键查询数据</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>tableName</code> - 表名称</li><li><code>key</code> - 主键值</li></ul></li><li>返回值：返回一个 Promise 对象，包含查询结果对象</li></ul><h4 id="findbyindex-dbname-string-tablename-string-indexname-string-indexvalue-any" tabindex="-1"><code>findByIndex(dbName: string, tableName: string, indexName: string, indexValue: any)</code> <a class="header-anchor" href="#findbyindex-dbname-string-tablename-string-indexname-string-indexvalue-any" aria-label="Permalink to &quot;`findByIndex(dbName: string, tableName: string, indexName: string, indexValue: any)`&quot;">​</a></h4><ul><li>功能：根据索引查询数据</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>tableName</code> - 表名称</li><li><code>indexName</code> - 索引名称</li><li><code>indexValue</code> - 索引值</li></ul></li><li>返回值：返回一个 Promise 对象，包含查询结果对象</li></ul><h4 id="insertone-dbname-any-tablename-string-data-any" tabindex="-1"><code>insertOne(dbName: any, tableName: string, data: any)</code> <a class="header-anchor" href="#insertone-dbname-any-tablename-string-data-any" aria-label="Permalink to &quot;`insertOne(dbName: any, tableName: string, data: any)`&quot;">​</a></h4><ul><li>功能：向指定表中插入一条数据</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>tableName</code> - 表名称</li><li><code>data</code> - 待插入的数据对象</li></ul></li><li>返回值：返回一个 Promise 对象，包含插入结果的状态</li></ul><h4 id="insertmany-dbname-any-tablename-string-data-any" tabindex="-1"><code>insertMany(dbName: any, tableName: string, data: any[])</code> <a class="header-anchor" href="#insertmany-dbname-any-tablename-string-data-any" aria-label="Permalink to &quot;`insertMany(dbName: any, tableName: string, data: any[])`&quot;">​</a></h4><ul><li>功能：向指定表中插入多条数据</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>tableName</code> - 表名称</li><li><code>data</code> - 待插入的数据数组</li></ul></li><li>返回值：返回一个 Promise 对象，包含插入结果的状态</li></ul><h4 id="updatedatabyprimarykey-dbname-any-storename-string-id-number-data-any" tabindex="-1"><code>updateDataByPrimaryKey(dbName: any, storeName: string, id: number, data: any)</code> <a class="header-anchor" href="#updatedatabyprimarykey-dbname-any-storename-string-id-number-data-any" aria-label="Permalink to &quot;`updateDataByPrimaryKey(dbName: any, storeName: string, id: number, data: any)`&quot;">​</a></h4><ul><li>功能：根据主键更新数据</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>storeName</code> - 存储对象的名称</li><li><code>id</code> - 主键值</li><li><code>data</code> - 要更新的数据对象</li></ul></li><li>返回值：返回一个 Promise 对象，包含更新结果的状态</li></ul><h4 id="updatedatabyindex-dbname-any-storename-string-indexname-string-indexvalue-any-data-any" tabindex="-1"><code>updateDataByIndex(dbName: any, storeName: string, indexName: string, indexValue: any, data: any)</code> <a class="header-anchor" href="#updatedatabyindex-dbname-any-storename-string-indexname-string-indexvalue-any-data-any" aria-label="Permalink to &quot;`updateDataByIndex(dbName: any, storeName: string, indexName: string, indexValue: any, data: any)`&quot;">​</a></h4><ul><li>功能：根据索引更新数据</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>storeName</code> - 存储对象的名称</li><li><code>indexName</code> - 索引名称</li><li><code>indexValue</code> - 索引值</li><li><code>data</code> - 要更新的数据对象</li></ul></li><li>返回值：返回一个 Promise 对象，包含更新结果的状态</li></ul><h4 id="deleteonebypk-dbname-string-tablename-string-id-number" tabindex="-1"><code>deleteOneByPk(dbName: string, tableName: string, id: number)</code> <a class="header-anchor" href="#deleteonebypk-dbname-string-tablename-string-id-number" aria-label="Permalink to &quot;`deleteOneByPk(dbName: string, tableName: string, id: number)`&quot;">​</a></h4><ul><li>功能：根据主键删除数据</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>tableName</code> - 表名称</li><li><code>id</code> - 主键值</li></ul></li><li>返回值：返回一个 Promise 对象，包含删除结果的状态和消息</li></ul><h4 id="deleteonebyindex-dbname-string-tablename-string-indexname-string-indexvalue-any" tabindex="-1"><code>deleteOneByIndex(dbName: string, tableName: string, indexName: string, indexValue: any)</code> <a class="header-anchor" href="#deleteonebyindex-dbname-string-tablename-string-indexname-string-indexvalue-any" aria-label="Permalink to &quot;`deleteOneByIndex(dbName: string, tableName: string, indexName: string, indexValue: any)`&quot;">​</a></h4><ul><li>功能：根据索引删除数据</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>tableName</code> - 表名称</li><li><code>indexName</code> - 索引名称</li><li><code>indexValue</code> - 索引值</li></ul></li><li>返回值：返回一个 Promise 对象，包含删除结果的状态和消息</li></ul><h4 id="deletemanybypk-dbname-string-tablename-string-ids-number" tabindex="-1"><code>deleteManyByPK(dbName: string, tableName: string, ids: number[])</code> <a class="header-anchor" href="#deletemanybypk-dbname-string-tablename-string-ids-number" aria-label="Permalink to &quot;`deleteManyByPK(dbName: string, tableName: string, ids: number[])`&quot;">​</a></h4><ul><li>功能：根据主键数组批量删除数据</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>tableName</code> - 表名称</li><li><code>ids</code> - 主键值数组</li></ul></li><li>返回值：返回一个 Promise 对象，包含删除结果的状态和消息</li></ul><h4 id="deletemanybyindex-dbname-string-tablename-string-indexname-string-indexvalues-any" tabindex="-1"><code>deleteManyByIndex(dbName: string, tableName: string, indexName: string, indexValues: any[])</code> <a class="header-anchor" href="#deletemanybyindex-dbname-string-tablename-string-indexname-string-indexvalues-any" aria-label="Permalink to &quot;`deleteManyByIndex(dbName: string, tableName: string, indexName: string, indexValues: any[])`&quot;">​</a></h4><ul><li>功能：根据索引批量删除数据</li><li>参数： <ul><li><code>dbName</code> - 数据库名称</li><li><code>tableName</code> - 表名称</li><li><code>indexName</code> - 索引名称</li><li><code>indexValues</code> - 索引值数组</li></ul></li><li>返回值：返回一个 Promise 对象，包含删除结果的状态和消息</li></ul>', 77);
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ArticleMetadata = __unplugin_components_4;
  const _component_ClientOnly = resolveComponent("ClientOnly");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createVNode(_component_ClientOnly, null, {
      default: withCtx(() => {
        var _a, _b;
        return [
          (((_a = _ctx.$frontmatter) == null ? void 0 : _a.aside) ?? true) && (((_b = _ctx.$frontmatter) == null ? void 0 : _b.showArticleMetadata) ?? true) ? (openBlock(), createBlock(_component_ArticleMetadata, {
            key: 0,
            article: _ctx.$frontmatter
          }, null, 8, ["article"])) : createCommentVNode("", true)
        ];
      }),
      _: 1
    }),
    _hoisted_2
  ]);
}
const _01IndexeddbToolkit = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _01IndexeddbToolkit as default
};
