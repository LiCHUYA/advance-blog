import { _ as __unplugin_components_4 } from "./chunks/ArticleMetadata.l7JwFtuX.js";
import { _ as _export_sfc, D as resolveComponent, o as openBlock, c as createElementBlock, I as createVNode, w as withCtx, k as createBaseVNode, a as createTextVNode, R as createStaticVNode, b as createBlock, e as createCommentVNode } from "./chunks/framework.b55ravPP.js";
const __pageData = JSON.parse('{"title":"渐进增强和优雅降级","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/02-基础知识/02-CSS/07-渐进增强和优雅降级.md","filePath":"src/study-notes/02-基础知识/02-CSS/07-渐进增强和优雅降级.md","lastUpdated":1739758546000}');
const _sfc_main = { name: "src/study-notes/02-基础知识/02-CSS/07-渐进增强和优雅降级.md" };
const _hoisted_1 = /* @__PURE__ */ createBaseVNode("h1", {
  id: "渐进增强和优雅降级",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createTextVNode("渐进增强和优雅降级 "),
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#渐进增强和优雅降级",
    "aria-label": 'Permalink to "渐进增强和优雅降级"'
  }, "​")
], -1);
const _hoisted_2 = /* @__PURE__ */ createStaticVNode('<div class="tip custom-block"><p class="custom-block-title">TIP</p><hr><h3 id="渐进增强-progressive-enhancement" tabindex="-1">渐进增强 (Progressive Enhancement) <a class="header-anchor" href="#渐进增强-progressive-enhancement" aria-label="Permalink to &quot;渐进增强 (Progressive Enhancement)&quot;">​</a></h3><ul><li><strong>定义</strong>：渐进增强是一种以<strong>低版本浏览器为起点</strong>的设计方法，确保所有用户都能访问到网站的基本功能。然后，根据浏览器的能力逐步添加更先进的功能和效果，以提升用户体验。</li><li><strong>核心理念</strong>：首先提供最基本的功能（例如：无障碍的布局和交互），再根据浏览器的支持逐步加入更多的高级功能，如 CSS3 特性、动画或复杂的交互效果。</li></ul><h3 id="优雅降级-graceful-degradation" tabindex="-1">优雅降级 (Graceful Degradation) <a class="header-anchor" href="#优雅降级-graceful-degradation" aria-label="Permalink to &quot;优雅降级 (Graceful Degradation)&quot;">​</a></h3><ul><li><strong>定义</strong>：优雅降级是一种从<strong>功能完整的版本开始</strong>的设计方法，初始阶段构建一个具有丰富功能和效果的完整网站。之后，通过技术手段处理低版本浏览器的不兼容问题，确保即使在这些浏览器上，网站仍能提供基本功能。</li><li><strong>核心理念</strong>：从完整的、功能丰富的版本开始设计，之后对低版本浏览器进行优化，使其能兼容并提供基本的访问体验。</li></ul><hr><h3 id="关键区别" tabindex="-1">关键区别： <a class="header-anchor" href="#关键区别" aria-label="Permalink to &quot;关键区别：&quot;">​</a></h3><ol><li><strong>渐进增强</strong>：从基本功能出发，逐步提升，确保在最广泛的环境中都能正常运行。</li><li><strong>优雅降级</strong>：从功能完备的版本开始，主要关注如何让低版本浏览器尽可能兼容。</li></ol><p>希望这个解释能更准确地表达这两者的概念！</p></div><h2 id="经典真题" tabindex="-1">经典真题 <a class="header-anchor" href="#经典真题" aria-label="Permalink to &quot;经典真题&quot;">​</a></h2><ul><li>说说渐进增强和优雅降级?</li><li>你能描述一下渐进增强和优雅降级之间的不同吗?</li></ul><h2 id="渐进增强和优雅降级-1" tabindex="-1">渐进增强和优雅降级 <a class="header-anchor" href="#渐进增强和优雅降级-1" aria-label="Permalink to &quot;渐进增强和优雅降级&quot;">​</a></h2><p>渐进增强，英语全称 <em>progressive enhancement</em>，指的是针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p><p>优雅降级，英语全称 <em>graceful degradation</em>，一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p><p>这两个概念其实并不是一个新的概念，就是以前提到的&quot;向上兼容&quot;和&quot;向下兼容&quot;。渐进增强相当于向上兼容，优雅降级相当于向下兼容。向下兼容指的是高版本支持低版本，或者说后期开发的版本能兼容早期开发的版本。</p><p>在确定用户群体的前提下，渐进增强：针对低版本浏览器进行页面构建，保证基本功能，再针对高级浏览器进行效果、交互等改进和追加功能，达到更好的用户体验。</p><p>优雅降级：一开始就构建完整的功能，再针对低版本浏览器进行兼容。</p><p>区别：优雅降级是从复杂的现状开始并试图减少用户体验的供给，而渐进增强则是从一个基础的、能够起到作用的版本开始再不断扩充，以适应未来环境的需要。</p><p>例如看下面这两段代码的书写顺序，看上去只是书写顺序的不同，实则表示了我们开发的着重点：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">.transition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  /*渐进增强写法*/</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  -webkit-transition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">all</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  -moz-transition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">all</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  -o-transition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">all</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  transition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">all</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">.transition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  /*优雅降级写法*/</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  transition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">all</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  -o-transition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">all</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  -moz-transition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">all</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  -webkit-transition</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">all</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>前缀 <em>CSS3</em>（-webkit-、-moz-、-o-）和正常 <em>CSS3</em> 在浏览器中的支持情况是这样的：</p><ol><li><strong>很久以前</strong>：浏览器前缀 <em>CSS3</em> 和正常 <em>CSS3</em> 都不支持</li><li><strong>不久之前</strong>：浏览器<strong>只支持</strong>前缀 <em>CSS3</em>，<strong>不支持</strong>正常 <em>CSS3</em></li><li><strong>现在</strong>：浏览器<strong>既支持</strong>前缀 <em>CSS3</em>，<strong>又支持</strong>正常 <em>CSS3</em></li><li><strong>未来</strong>：浏览器<strong>不支持</strong>前缀 <em>CSS3</em>，<strong>仅支持</strong>正常 <em>CSS3</em></li></ol><p>渐进增强的写法，优先考虑老版本浏览器的可用性，最后才考虑新版本的可用性。在时期 <em>3</em> 前缀 <em>CSS3</em> 和正常 <em>CSS3</em> 都可用的情况下，正常 <em>CSS3</em> 会覆盖前缀 <em>CSS3</em>。</p><p>优雅降级的写法，优先考虑新版本浏览器的可用性，最后才考虑老版本的可用性。在时期 <em>3</em> 前缀 <em>CSS3</em> 和正常 <em>CSS3</em> 都可用的情况下，前缀 <em>CSS3</em> 会覆盖正常的 <em>CSS3</em>。</p><p>绝大多少的大公司都是采用渐进增强的方式，因为业务优先，提升用户体验永远不会排在最前面。</p><ul><li><p>例如新浪微博网站这样亿级用户的网站，前端的更新绝不可能追求某个特效而不考虑低版本用户是否可用。一定是确保低版本到高版本的可访问性再渐进增强。</p></li><li><p>如果开发的是一面面向青少面的软件或网站，你明确这个群体的人总是喜欢尝试新鲜事物，喜欢炫酷的特效，喜欢把软件更新至最新版本，这种情况再考虑优雅降级。</p></li></ul><h2 id="真题解答" tabindex="-1">真题解答 <a class="header-anchor" href="#真题解答" aria-label="Permalink to &quot;真题解答&quot;">​</a></h2><ul><li>说说渐进增强和优雅降级?</li></ul><blockquote><p>参考答案：</p><p>渐进增强，英语全称 <em>progressive enhancement</em>，指的是针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p><p>优雅降级，英语全称 <em>graceful degradation</em>，一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p></blockquote><p>-<em>EOF</em>-</p>', 22);
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ArticleMetadata = __unplugin_components_4;
  const _component_ClientOnly = resolveComponent("ClientOnly");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createVNode(_component_ClientOnly, null, {
      default: withCtx(() => {
        var _a, _b;
        return [
          (((_a = _ctx.$frontmatter) == null ? void 0 : _a.aside) ?? true) && (((_b = _ctx.$frontmatter) == null ? void 0 : _b.showArticleMetadata) ?? true) ? (openBlock(), createBlock(_component_ArticleMetadata, {
            key: 0,
            article: _ctx.$frontmatter
          }, null, 8, ["article"])) : createCommentVNode("", true)
        ];
      }),
      _: 1
    }),
    _hoisted_2
  ]);
}
const _07__________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _07__________ as default
};
