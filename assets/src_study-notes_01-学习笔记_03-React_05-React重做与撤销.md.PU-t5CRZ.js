import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/01React重做与撤销demo._n0gUjzk.png";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/03-React/05-React重做与撤销.md","filePath":"src/study-notes/01-学习笔记/03-React/05-React重做与撤销.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/03-React/05-React重做与撤销.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h3 id="react-撤销-重做功能" tabindex="-1">React 撤销/重做功能 <a class="header-anchor" href="#react-撤销-重做功能" aria-label="Permalink to &quot;React 撤销/重做功能&quot;">​</a></h3><img src="' + _imports_0 + '" style="zoom:67%;"><h4 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h4><p><strong>撤销/重做</strong>功能的核心是保存状态的历史记录，以便在用户请求撤销或重做时能够恢复到之前的状态。具体来说，包含以下三个部分：</p><ol><li><strong>present</strong>: 当前状态。</li><li><strong>past</strong>: 历史记录，保存所有之前的状态，用于撤销。</li><li><strong>future</strong>: 未来记录，保存撤销操作之前的状态，用于重做。</li></ol><h4 id="状态操作过程" tabindex="-1">状态操作过程 <a class="header-anchor" href="#状态操作过程" aria-label="Permalink to &quot;状态操作过程&quot;">​</a></h4><ul><li><p><strong>输入</strong>：每次输入操作，当前状态 <code>present</code> 会被存入 <code>past</code>，并且 <code>future</code> 会被清空。</p></li><li><p><strong>撤销</strong>：<code>past</code> 的最后一个状态出栈(arr.pop)，加入 <code>future</code>(arr.unshift)，并将 <code>present</code> 设置为这个状态。</p></li><li><p><strong>重做</strong>：<code>future</code> 的最后一个状态出栈，加入 <code>past</code>，并将 <code>present</code> 设置为这个状态。</p></li><li><h4 id="状态变化示例" tabindex="-1">状态变化示例 <a class="header-anchor" href="#状态变化示例" aria-label="Permalink to &quot;状态变化示例&quot;">​</a></h4><p><strong>初始状态</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>present = &#39;abc1&#39; // 当前状态</span></span>\n<span class="line"><span>past = [&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;, &#39;abc1&#39;] // 历史记录</span></span>\n<span class="line"><span>future = [] // 未来记录</span></span></code></pre></div><p><strong>输入操作</strong></p><p>当用户在输入框中继续输入时，例如输入 &#39;2&#39;：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>输入 &#39;2&#39; 后：</span></span>\n<span class="line"><span>present = &#39;abc12&#39;</span></span>\n<span class="line"><span>past = [&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;, &#39;abc1&#39;, &#39;abc12&#39;]</span></span>\n<span class="line"><span>future = []</span></span></code></pre></div><p><strong>撤销操作</strong></p><p>用户点击撤销按钮：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>present = &#39;abc12&#39;</span></span>\n<span class="line"><span>past = [&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;, &#39;abc1&#39;, &#39;abc12&#39;]</span></span>\n<span class="line"><span>future = []</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>撤销一次后：</span></span>\n<span class="line"><span>更新present： 将present更新为past数组的倒数第二个元素(arr[arr.length-2])，即&#39;abc1&#39;。</span></span>\n<span class="line"><span>更新past： 弹出past数组的最后一个元素，即past.pop()，将其移除。</span></span>\n<span class="line"><span>更新future： 将刚刚被移除的元素追加到future数组的末尾。</span></span>\n<span class="line"><span>present = &#39;abc1&#39;</span></span>\n<span class="line"><span>past = [&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;, &#39;abc1&#39;]</span></span>\n<span class="line"><span>future = [&#39;abc12&#39;]   </span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>再撤销一次后：</span></span>\n<span class="line"><span>present = &#39;abc&#39;</span></span>\n<span class="line"><span>past = [&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;]</span></span>\n<span class="line"><span>future = [&#39;abc12&#39;, &#39;abc1&#39;]</span></span></code></pre></div><p><strong>重做操作</strong></p><p>用户点击重做按钮：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>present = &#39;abc&#39;</span></span>\n<span class="line"><span>past = [&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;]</span></span>\n<span class="line"><span>future = [&#39;abc12&#39;, &#39;abc1&#39;]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>重做一次后：</span></span>\n<span class="line"><span>更新present： 将present更新为future数组的最后一个元素，即&#39;abc1&#39;。</span></span>\n<span class="line"><span>更新future： 弹出future数组的最后一个元素，即future.pop()，将其移除。</span></span>\n<span class="line"><span>更新past： 将刚刚被移除的元素追加到past数组的末尾。</span></span>\n<span class="line"><span>present = &#39;abc1&#39;</span></span>\n<span class="line"><span>past = [&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;, &#39;abc1&#39;]</span></span>\n<span class="line"><span>future = [&#39;abc12&#39;]</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>再重做一次后：</span></span>\n<span class="line"><span>present = &#39;abc12&#39;</span></span>\n<span class="line"><span>past = [&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;, &#39;abc1&#39;, &#39;abc12&#39;]</span></span>\n<span class="line"><span>future = []</span></span></code></pre></div></li></ul><h3 id="撤销与重做的栈原理-可跳过" tabindex="-1">撤销与重做的栈原理(可跳过) <a class="header-anchor" href="#撤销与重做的栈原理-可跳过" aria-label="Permalink to &quot;撤销与重做的栈原理(可跳过)&quot;">​</a></h3><p>**撤销（Undo）<strong>和</strong>重做（Redo）**功能的核心是使用两个栈来保存状态的历史记录。这些栈分别用来存储过去的状态和未来的状态。通过这种方式，可以方便地实现状态的回退和恢复。</p><h4 id="基本概念-1" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念-1" aria-label="Permalink to &quot;基本概念&quot;">​</a></h4><ul><li>**栈（Stack）**是一种数据结构，遵循“后进先出”（LIFO，Last In, First Out）的原则。</li><li>**过去栈（Past Stack）**保存的是历史状态，用于撤销操作。</li><li>**未来栈（Future Stack）**保存的是被撤销的状态，用于重做操作。</li></ul><h4 id="状态操作过程-1" tabindex="-1">状态操作过程 <a class="header-anchor" href="#状态操作过程-1" aria-label="Permalink to &quot;状态操作过程&quot;">​</a></h4><ol><li><p><strong>输入新状态</strong>：</p><ul><li>当前状态存入过去栈。</li><li>清空未来栈。</li></ul></li><li><p><strong>撤销操作</strong>：</p><ul><li>将过去栈的顶部状态弹出，并将当前状态存入未来栈。</li><li>将弹出的状态设为当前状态。</li></ul></li><li><p><strong>重做操作</strong>：</p><ul><li>将未来栈的顶部状态弹出，并将当前状态存入过去栈。</li><li>将弹出的状态设为当前状态。</li></ul></li></ol><h4 id="状态变化示例-1" tabindex="-1">状态变化示例 <a class="header-anchor" href="#状态变化示例-1" aria-label="Permalink to &quot;状态变化示例&quot;">​</a></h4><p>假设有一个文本编辑器，初始状态为空字符串。</p><p><strong>初始状态</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Current State: &#39;&#39;</span></span>\n<span class="line"><span>Past Stack: []</span></span>\n<span class="line"><span>Future Stack: []</span></span></code></pre></div><p><strong>输入操作</strong></p><p>用户输入 &#39;a&#39;：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Current State: &#39;a&#39;</span></span>\n<span class="line"><span>Past Stack: [&#39;&#39;]</span></span>\n<span class="line"><span>Future Stack: []</span></span></code></pre></div><p>继续输入 &#39;b&#39;：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Current State: &#39;ab&#39;</span></span>\n<span class="line"><span>Past Stack: [&#39;&#39;, &#39;a&#39;]</span></span>\n<span class="line"><span>Future Stack: []</span></span></code></pre></div><p>再输入 &#39;c&#39;：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Current State: &#39;abc&#39;</span></span>\n<span class="line"><span>Past Stack: [&#39;&#39;, &#39;a&#39;, &#39;ab&#39;]</span></span>\n<span class="line"><span>Future Stack: []</span></span></code></pre></div><p><strong>撤销操作</strong></p><p>用户点击撤销按钮一次：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Past Stack: [&#39;&#39;, &#39;a&#39;, &#39;ab&#39;]</span></span>\n<span class="line"><span>Current State: &#39;ab&#39;</span></span>\n<span class="line"><span>Future Stack: [&#39;abc&#39;]</span></span></code></pre></div><p>再次点击撤销按钮：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Past Stack: [&#39;&#39;, &#39;a&#39;]</span></span>\n<span class="line"><span>Current State: &#39;a&#39;</span></span>\n<span class="line"><span>Future Stack: [&#39;abc&#39;, &#39;ab&#39;]</span></span></code></pre></div><p><strong>重做操作</strong></p><p>用户点击重做按钮一次：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Past Stack: [&#39;&#39;, &#39;a&#39;, &#39;ab&#39;]</span></span>\n<span class="line"><span>Current State: &#39;ab&#39;</span></span>\n<span class="line"><span>Future Stack: [&#39;abc&#39;]</span></span></code></pre></div><p>再点击重做按钮：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>Past Stack: [&#39;&#39;, &#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;]</span></span>\n<span class="line"><span>Current State: &#39;abc&#39;</span></span>\n<span class="line"><span>Future Stack: []</span></span></code></pre></div><h4 id="实现撤销与重做的伪代码" tabindex="-1">实现撤销与重做的伪代码 <a class="header-anchor" href="#实现撤销与重做的伪代码" aria-label="Permalink to &quot;实现撤销与重做的伪代码&quot;">​</a></h4><p>以下是实现撤销与重做功能的简单伪代码示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> UndoRedoStack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.past </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [];</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.future </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  setPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.past.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.present);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> state;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.future </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  undo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.past.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.future.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.present);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.past.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;No more states to undo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  redo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.future.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.past.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.present);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.future.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;No more states to redo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用示例</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> editor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> UndoRedoStack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;ab&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(editor.present); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &#39;abc&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">undo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(editor.present); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &#39;ab&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">undo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(editor.present); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &#39;a&#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">editor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">redo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(editor.present); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &#39;ab&#39;</span></span></code></pre></div><p>​ 撤销与重做的功能通过管理两个栈来实现，确保能够有效地回退到之前的状态或恢复到被撤销的状态。这个机制在许多应用中广泛使用，特别是需要提供历史记录功能的应用，如文本编辑器、绘图软件等。</p><h3 id="使用-immer实现重做-撤销" tabindex="-1">使用 <code>immer实现重做/撤销</code> <a class="header-anchor" href="#使用-immer实现重做-撤销" aria-label="Permalink to &quot;使用 `immer实现重做/撤销`&quot;">​</a></h3><p>使用 <a href="https://immerjs.github.io/immer/docs/introduction" target="_blank" rel="noreferrer">Immer</a> 库可以让你更方便地管理不可变状态，并且它的实现比 <code>redux-undo</code> 更高效，内存开销更小。通过 Immer，你可以实现状态回溯而不需要额外的库。</p><p>下面是使用 Immer 来实现状态回溯的示例：</p><ol><li><strong>安装 Immer：</strong></li></ol><p>首先，确保你安装了 Immer：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>npm install immer</span></span></code></pre></div><ol><li><strong>定义 Redux store 和 Reducer：</strong></li></ol><p>在你的 Redux store 配置中使用 Immer 进行状态管理。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { configureStore, createSlice } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;@reduxjs/toolkit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { produce } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;immer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 定义初始状态，包含三个部分：过去状态、当前状态和未来状态</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> initialState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  past: [],</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  present: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    list: []</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  future: []</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建一个 slice，用于处理 todo 列表的相关逻辑</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> todoSlice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createSlice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;todoList&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  initialState,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  reducers: {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 添加新项目到列表</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    addListRedux</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 将当前状态保存到 past 数组中</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      state.past.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(state.present);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 使用 Immer 的 produce 函数更新当前状态</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      state.present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> produce</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(state.present, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">draft</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        draft.list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(action.payload);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      });</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 清空 future 数组，因为新增操作会使之前的未来状态无效</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      state.future </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 从列表中删除指定项目</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    delListRedux</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 将当前状态保存到 past 数组中</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      state.past.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(state.present);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 使用 Immer 的 produce 函数更新当前状态</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      state.present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> produce</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(state.present, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">draft</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        draft.list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(action.payload, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      });</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 清空 future 数组，因为删除操作会使之前的未来状态无效</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      state.future </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 撤销上一次操作</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    undo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 如果 past 数组中有记录，进行撤销操作</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (state.past.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 将当前状态保存到 future 数组的开头</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        state.future.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">unshift</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(state.present);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 从 past 数组中取出最后一个状态作为当前状态</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        state.present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> state.past.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 重做上一次被撤销的操作</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    redo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 如果 future 数组中有记录，进行重做操作</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (state.future.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 将当前状态保存到 past 数组中</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        state.past.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(state.present);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 从 future 数组中取出第一个状态作为当前状态</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        state.present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> state.future.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">shift</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 从 slice 中导出 action creators，用于组件中调用</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">addListRedux</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">delListRedux</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">undo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">redo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> todoSlice.actions;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> todoSlice</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">reducer</span></span></code></pre></div><h4 id="配置-store" tabindex="-1">配置 Store <a class="header-anchor" href="#配置-store" aria-label="Permalink to &quot;配置 Store&quot;">​</a></h4><p>然后，使用 <code>redux-undo</code> 中间件配置 Redux store：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { configureStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;@reduxjs/toolkit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> todoListReducer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./todoList&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 确保路径正确</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> configureStore</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  reducer: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    todoList: todoListReducer</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">})</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><ol><li><strong>更新组件以使用新的 Redux 逻辑：</strong></li></ol><p>调整组件代码以使用新的状态回溯逻辑。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { useSelector, useDispatch } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;react-redux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { addListRedux, delListRedux, undo, redo } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;../../redux/store/todoList&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> React, { useState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { Divider, List, Typography, Input, Button } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;antd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> TodoListComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">inputValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">setInputValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> useSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> state.todoList.present.list);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> dispatch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> useDispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> addList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">addListRedux</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(inputValue));</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> delList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">delListRedux</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(id));</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> handleUndo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">undo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> handleRedo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">redo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{ width: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;30vw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Divider</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> orientation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;left&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Input</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">          value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">inputValue</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">          onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setInputValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(e.target.value)</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{ margin: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;0 10px 0 10px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">addList</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          新增</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Divider</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">List</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">        header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;redux-undo&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">        footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">handleUndo</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;primary&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{ margin: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;0 10px 0 10px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              撤销</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">handleRedo</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;重做&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">        }</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">        bordered</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">        dataSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">        renderItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">List.Item</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{ width: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;100%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, display: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;flex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, justifyContent: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;space-between&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Typography.Text</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> mark</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Typography.Text</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> delList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(index)</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;small&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> danger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                删除</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">List.Item</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        )</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  );</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TodoListComponent;</span></span></code></pre></div><h3 id="代码说明" tabindex="-1">代码说明： <a class="header-anchor" href="#代码说明" aria-label="Permalink to &quot;代码说明：&quot;">​</a></h3><ol><li><strong>状态管理</strong>： <ul><li><code>initialState</code> 定义了 <code>past</code>、<code>present</code> 和 <code>future</code> 状态。</li><li><code>todoSlice</code> 定义了添加、删除、撤销和重做的 reducers，并使用 Immer 的 <code>produce</code> 来处理状态变化。</li></ul></li><li><strong>函数定义</strong>： <ul><li><code>addListRedux</code> 和 <code>delListRedux</code>：每次状态变化时，将当前状态推到 <code>past</code> 数组，并清空 <code>future</code>。</li><li><code>undo</code> 和 <code>redo</code>：根据 <code>past</code> 和 <code>future</code> 数组进行状态回溯和重做。</li></ul></li></ol><h3 id="使用-redux-undo" tabindex="-1">使用 <code>redux-undo</code> <a class="header-anchor" href="#使用-redux-undo" aria-label="Permalink to &quot;使用 `redux-undo`&quot;">​</a></h3><h4 id="_1-提供撤销-重做功能" tabindex="-1">1. 提供撤销/重做功能 <a class="header-anchor" href="#_1-提供撤销-重做功能" aria-label="Permalink to &quot;1. 提供撤销/重做功能&quot;">​</a></h4><p>在复杂的应用中，用户可能需要撤销和重做操作来恢复或重现之前的状态。例如：</p><ul><li><strong>文字编辑器</strong>：用户可能希望撤销误操作。</li><li><strong>数据输入</strong>：用户输入错误时，需要返回之前的正确状态。</li><li><strong>图形编辑软件</strong>：用户希望撤销上一步的绘图操作。</li></ul><p><code>redux-undo</code> 能够轻松实现这些功能，增强用户体验。</p><h4 id="_2-简化状态管理" tabindex="-1">2. 简化状态管理 <a class="header-anchor" href="#_2-简化状态管理" aria-label="Permalink to &quot;2. 简化状态管理&quot;">​</a></h4><p>手动实现撤销/重做功能可能需要复杂的状态管理逻辑。<code>redux-undo</code> 提供了一种简单的方式来记录和管理状态变化，使得开发者能够专注于核心功能的实现，而无需担心状态记录的复杂性。</p><h4 id="_3-提高代码可维护性" tabindex="-1">3. 提高代码可维护性 <a class="header-anchor" href="#_3-提高代码可维护性" aria-label="Permalink to &quot;3. 提高代码可维护性&quot;">​</a></h4><p>通过使用 <code>redux-undo</code>，可以将撤销/重做逻辑与业务逻辑分离，提升代码的可读性和可维护性。使用专门的中间件管理历史状态，能够减少代码重复和错误。</p><h4 id="_4-灵活的配置和扩展性" tabindex="-1">4. 灵活的配置和扩展性 <a class="header-anchor" href="#_4-灵活的配置和扩展性" aria-label="Permalink to &quot;4. 灵活的配置和扩展性&quot;">​</a></h4><p><code>redux-undo</code> 提供了丰富的配置选项，可以根据需求进行灵活定制。例如，可以限制历史记录的数量、过滤特定的动作、分组动作等。这样可以确保撤销/重做功能的高效性和适用性。</p><h3 id="安装-redux-undo" tabindex="-1">安装 Redux-Undo <a class="header-anchor" href="#安装-redux-undo" aria-label="Permalink to &quot;安装 Redux-Undo&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> --save</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> redux-undo@beta</span></span></code></pre></div><h3 id="redux-undo-使用示例" tabindex="-1">Redux-Undo 使用示例 <a class="header-anchor" href="#redux-undo-使用示例" aria-label="Permalink to &quot;Redux-Undo 使用示例&quot;">​</a></h3><h4 id="创建-slice" tabindex="-1">创建 Slice <a class="header-anchor" href="#创建-slice" aria-label="Permalink to &quot;创建 Slice&quot;">​</a></h4><p>首先，定义你的 Redux Slice，并确保它能处理添加和删除操作：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { createSlice } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;@reduxjs/toolkit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> initialState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  list: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> todoListSlice</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createSlice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;todoList&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  initialState,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  reducers: {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    addListRedux</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      state.list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(action.payload);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    delListRedux</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> action.payload;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      state.list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(id, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">addListRedux</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">delListRedux</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> todoListSlice.actions;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> todoListSlice</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">reducer;</span></span></code></pre></div><h4 id="配置-store-1" tabindex="-1">配置 Store <a class="header-anchor" href="#配置-store-1" aria-label="Permalink to &quot;配置 Store&quot;">​</a></h4><p>然后，使用 <code>redux-undo</code> 中间件配置 Redux store：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { configureStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;@reduxjs/toolkit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> undoable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;redux-undo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> todoListReducer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./todoList&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 确保路径正确</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> configureStore</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  reducer: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    todoList: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">undoable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(todoListReducer, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      limit: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 限制历史记录数量</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">})</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h4 id="创建组件" tabindex="-1">创建组件 <a class="header-anchor" href="#创建组件" aria-label="Permalink to &quot;创建组件&quot;">​</a></h4><p>使用 <code>useSelector</code> 和 <code>useDispatch</code> 钩子来访问和更新状态：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { useSelector, useDispatch } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;react-redux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { addListRedux, delListRedux } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;../../redux/store/todoList&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> React, { useState } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { Divider, List, Typography, Input, Button } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;antd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { ActionCreators } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;redux-undo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> TodoListComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">inputValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">setInputValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> useSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> state.todoList.present.list);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> dispatch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> useDispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> addList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">addListRedux</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(inputValue));</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> delList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">delListRedux</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(id));</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> undo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ActionCreators.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">undo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> redo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ActionCreators.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">redo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{ width: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;30vw&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Divider</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> orientation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;left&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Input</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">          value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">inputValue</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">          onChange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> setInputValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(e.target.value)</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">          defaultValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;0571&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{ margin: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;0 10px 0 10px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">addList</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          新增</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Divider</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">List</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">        header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;redux-undo&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">        footer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">undo</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;primary&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{ margin: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;0 10px 0 10px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              撤销</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">redo</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;重做&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">        }</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">        bordered</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">        dataSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">        renderItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">List.Item</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{ width: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;100%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, display: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;flex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, justifyContent: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;space-between&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Typography.Text</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> mark</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Typography.Text</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> delList</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(index)</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;small&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> danger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                删除</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">              &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          &lt;/</span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">List.Item</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        )</span><span style="--shiki-light:#24292E;--shiki-dark:#F47067;">}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      /&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  );</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TodoListComponent;</span></span></code></pre></div><ul><li><p><code>addList</code>：用于向列表中添加新项目，调用 <code>addListRedux</code> action。</p></li><li><p><code>delList</code>：用于删除指定 id 的列表项目，调用 <code>delListRedux</code> action。</p></li><li><p><code>undo</code>：用于撤销上一次的操作，调用 <code>redux-undo</code> 提供的 <code>undo</code> action。</p></li><li><p><code>redo</code>：用于重做上一次被撤销的操作，调用 <code>redux-undo</code> 提供的 <code>redo</code> action。</p></li></ul><p><code>redux-undo</code> 中的 <code>undoable</code> 函数可以接受一个配置对象，用于自定义撤销/重做功能的行为。下面详细讲解各个配置项的作用和使用方法。</p><h3 id="redux-undo-api-详解" tabindex="-1">Redux-Undo API 详解 <a class="header-anchor" href="#redux-undo-api-详解" aria-label="Permalink to &quot;Redux-Undo API 详解&quot;">​</a></h3><ul><li><code>ActionCreators.undo()</code>: 分发此 action 以撤销上一个操作。</li><li><code>ActionCreators.redo()</code>: 分发此 action 以重做上一个撤销的操作。</li><li><code>undoable(reducer, config)</code>: 包装原始 reducer，使其支持撤销和重做功能。<code>config</code> 参数用于配置撤销和重做的行为，例如限制历史记录数量等。</li></ul><h3 id="undoable配置项详解" tabindex="-1">undoable配置项详解 <a class="header-anchor" href="#undoable配置项详解" aria-label="Permalink to &quot;undoable配置项详解&quot;">​</a></h3><h4 id="limit" tabindex="-1"><code>limit</code> <a class="header-anchor" href="#limit" aria-label="Permalink to &quot;`limit`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>number</code></li><li><strong>作用</strong>: 限制历史记录的数量，防止占用过多内存。默认不限制。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 最多保留 20 条历史记录</span></span></code></pre></div><h4 id="filter" tabindex="-1"><code>filter</code> <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;`filter`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>(action, currentState, previousHistory) =&gt; boolean</code></li><li><strong>作用</strong>: 一个过滤函数，决定某些动作是否需要被记录。返回 <code>true</code> 表示记录，<code>false</code> 表示忽略。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> action.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;todoList/ignoreThisAction&#39;</span></span></code></pre></div><h4 id="groupby" tabindex="-1"><code>groupBy</code> <a class="header-anchor" href="#groupby" aria-label="Permalink to &quot;`groupBy`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>(action, currentState, previousHistory) =&gt; string | undefined</code></li><li><strong>作用</strong>: 将多个动作分组为一个历史记录项。返回相同字符串的动作将被分组在一起，返回 <code>undefined</code> 表示不分组。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">groupBy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> action.type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;todoList/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;todoListGroup&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> undefined</span></span></code></pre></div><h4 id="undotype-和-redotype" tabindex="-1"><code>undoType</code> 和 <code>redoType</code> <a class="header-anchor" href="#undotype-和-redotype" aria-label="Permalink to &quot;`undoType` 和 `redoType`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>作用</strong>: 自定义撤销和重做动作的类型。这在使用自定义的撤销/重做动作时特别有用。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">undoType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;CUSTOM_UNDO&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">redoType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;CUSTOM_REDO&#39;</span></span></code></pre></div><h4 id="jumptopasttype-和-jumptofuturetype" tabindex="-1"><code>jumpToPastType</code> 和 <code>jumpToFutureType</code> <a class="header-anchor" href="#jumptopasttype-和-jumptofuturetype" aria-label="Permalink to &quot;`jumpToPastType` 和 `jumpToFutureType`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>作用</strong>: 自定义跳转到某个历史状态的动作类型。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">jumpToPastType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;CUSTOM_JUMP_TO_PAST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">jumpToFutureType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;CUSTOM_JUMP_TO_FUTURE&#39;</span></span></code></pre></div><h4 id="inittypes" tabindex="-1"><code>initTypes</code> <a class="header-anchor" href="#inittypes" aria-label="Permalink to &quot;`initTypes`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string[]</code></li><li><strong>作用</strong>: 定义初始化时不需要记录的动作类型。通常用来忽略 Redux 初始化和一些其他不需要记录的动作。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">initTypes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;@@redux/INIT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;@@INIT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span></code></pre></div><h4 id="clearhistorytype" tabindex="-1"><code>clearHistoryType</code> <a class="header-anchor" href="#clearhistorytype" aria-label="Permalink to &quot;`clearHistoryType`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>作用</strong>: 自定义清除历史记录的动作类型。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">clearHistoryType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;CLEAR_HISTORY&#39;</span></span></code></pre></div><h4 id="neverskipreducer" tabindex="-1"><code>neverSkipReducer</code> <a class="header-anchor" href="#neverskipreducer" aria-label="Permalink to &quot;`neverSkipReducer`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>boolean</code></li><li><strong>作用</strong>: 确保即使在撤销/重做操作时，仍然会调用原始 reducer。这在某些需要在每次状态变化时都进行特定操作的情况下非常有用。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">neverSkipReducer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span></code></pre></div><h3 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h3><p>以下是一个完整的示例，展示了如何使用这些配置项：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { configureStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;@reduxjs/toolkit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> undoable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;redux-undo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> todoListReducer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./todoList&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 确保路径正确</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> configureStore</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  reducer: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    todoList: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">undoable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(todoListReducer, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      limit: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 限制历史记录数量</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      filter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> action.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;todoList/ignoreThisAction&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 忽略特定动作</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      groupBy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> action.type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;todoList/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;todoListGroup&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 动作分组</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      undoType: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;CUSTOM_UNDO&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 自定义撤销动作类型</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      redoType: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;CUSTOM_REDO&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 自定义重做动作类型</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      jumpToPastType: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;CUSTOM_JUMP_TO_PAST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 自定义跳转到过去的动作类型</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      jumpToFutureType: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;CUSTOM_JUMP_TO_FUTURE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 自定义跳转到未来的动作类型</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      initTypes: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;@@redux/INIT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;@@INIT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 初始化时不记录的动作类型</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      clearHistoryType: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;CLEAR_HISTORY&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 自定义清除历史记录的动作类型</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      neverSkipReducer: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 在撤销/重做操作时仍然调用原始 reducer</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">})</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div>', 110);
const _hoisted_111 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_111);
}
const _05React_____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _05React_____ as default
};
