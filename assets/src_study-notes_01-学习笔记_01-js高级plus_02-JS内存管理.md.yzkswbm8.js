import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/ECS.636M64pl.png";
const _imports_1 = "/advance-blog/assets/GEC.XnzSGRU1.png";
const _imports_2 = "/advance-blog/assets/FEC放到ECS中.ifwIHo_z.png";
const _imports_3 = "/advance-blog/assets/GO.eC40WxfG.png";
const _imports_4 = "/advance-blog/assets/AO.5zjAxw6N.png";
const _imports_5 = "/advance-blog/assets/GC算法-引用计数.7-4BHFFP.png";
const _imports_6 = "/advance-blog/assets/GC算法-标记清除.dWfY3m8y.png";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/01-js高级plus/02-JS内存管理.md","filePath":"src/study-notes/01-学习笔记/01-js高级plus/02-JS内存管理.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/01-js高级plus/02-JS内存管理.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<blockquote><p>编者水平有限，根据视频及 PPT 整理出的笔记以及习题，如有错误，尚请海涵。</p></blockquote><h3 id="对于一些名词的解释" tabindex="-1">对于一些名词的解释 <a class="header-anchor" href="#对于一些名词的解释" aria-label="Permalink to &quot;对于一些名词的解释&quot;">​</a></h3><ul><li>ECS（Execution Context Stack）</li></ul><p>V8 引擎为了执行代码, V8 引擎内部会有一个执行上下文栈<strong>Execution Context Stack</strong>（ESC 函数调用栈)，当首次加载 JS 的时候就会创建一个<strong>Execution Context Stack(ECS)</strong>，它是用于执行代码的调用栈，它第一次执行的是<strong>全局代码块</strong></p><p><img src="' + _imports_0 + '" alt="image.png"></p><ul><li>GEC (Global Execution Context)</li></ul><p><strong>全局代码块</strong>为了运行，会构建一个<strong>Global Execution Context（GEC）</strong>，<strong>GEC</strong>会被放入<strong>Execution Context Stack(ESC)</strong> 中执行 <img src="' + _imports_1 + '" alt="image.png"></p><ul><li>FEC (Functional Execution Context) 在执行的过程中执行到一个函数时，就会根据函数体创建一个函数执行上下文 <strong>(Functional Execution Context)</strong>，并且压入到 EC Stack 中。FEC 中包含三个部分。</li></ul><blockquote><p>第一部分：解析函数成为 AST 树结构时，会创建一个 Activation Object(AO):AO 中包含形参、arguments、函数定义和指向函数对象、定义的变量;</p></blockquote><blockquote><p>第二部分：作用域链:由 VO(在函数中就是 AO 对象)和父级 VO 组成，查找时会一层层查找</p></blockquote><blockquote><p>第三部分：this 指向，根据不同的情况绑定不同的 this</p></blockquote><p><img src="' + _imports_2 + '" alt="image.png"></p><ul><li><p>GO (Global Object)</p><p>堆内存中创建的全局对象，该对象 所有的作用域(scope)都可以访问，里面会包含 Date、Array、String、Number、setTimeout、setInterval 等等，其中还有一个 window 属性指向自己，这也就是为什么可以 console.log(window.window.window)因为它始终是指向自己的。</p></li></ul><p><img src="' + _imports_3 + '" alt="image.png"></p><ul><li><p>AO (Activation Object)</p><p>执行上下文，AO 对象函数执行的前一刻,会创建一个称为执行期上下文的内部对象(AO) 函数中的 VO 指向的就是 AO+父级的 VO。</p></li></ul><p><img src="' + _imports_4 + '" alt="image.png"></p><ul><li><p>VO (Varable Object)</p><p>早期 ECMA 版本规范，每个执行上下文会被关联到一个变量对象（Varable Object），在源代码中的变量和函数声明会被作为属性添加到 VO 中，对于函数来说，参数也会被添加到 VO（变量对象）中。</p><p>全局 VO 对应 GO 函数 VO 对应 AO</p></li><li><p>VE (VariableEnvironment)</p><p>在最新的 ECMA 版本规范中，对于一些词汇进行了修改。每个执行上下文会被关联到一个变量环境（VariableEnvironment）中，在执行代码中变量和函数的声明会作为函数记录添加到变量环境中，对于函数来说，参数也会被添加到 VE（变量环境）中。</p></li></ul><h3 id="执行上下文栈-ecs-、全局执行上下文-gec-、函数执行上下文-fec-的详解" tabindex="-1">执行上下文栈 (ECS)、全局执行上下文 (GEC)、函数执行上下文 (FEC) 的详解 <a class="header-anchor" href="#执行上下文栈-ecs-、全局执行上下文-gec-、函数执行上下文-fec-的详解" aria-label="Permalink to &quot;执行上下文栈 (ECS)、全局执行上下文 (GEC)、函数执行上下文 (FEC) 的详解&quot;">​</a></h3><p>在 JavaScript 的执行过程中，执行上下文栈 (ECS)、全局执行上下文 (GEC) 和函数执行上下文 (FEC) 是关键的概念。它们在代码执行的不同阶段创建，并负责管理变量、函数和作用域链。接下来详细讲解这些概念及其在 V8 引擎中的实现。</p><h4 id="_1-执行上下文栈-ecs" tabindex="-1">1. 执行上下文栈 (ECS) <a class="header-anchor" href="#_1-执行上下文栈-ecs" aria-label="Permalink to &quot;1. 执行上下文栈 (ECS)&quot;">​</a></h4><p><strong>执行上下文栈</strong> 是一个栈结构，用于管理代码执行过程中创建的执行上下文。栈顶的执行上下文是当前正在执行的上下文。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/execution.cc</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ExecutionContextStack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    context-&gt;previous_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> top_;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    top_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> context;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> top_;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    top_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> top_-&gt;previous_;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> context;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> top_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><h4 id="_2-全局执行上下文-gec" tabindex="-1">2. 全局执行上下文 (GEC) <a class="header-anchor" href="#_2-全局执行上下文-gec" aria-label="Permalink to &quot;2. 全局执行上下文 (GEC)&quot;">​</a></h4><p><strong>全局执行上下文</strong> 是在代码开始执行时创建的第一个执行上下文。它包含全局对象 (Global Object) 和变量环境 (VariableEnvironment)。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/execution.cc</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> InitializeGlobalExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">global_context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建全局对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">GlobalObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global_object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">global_object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  InitializeGlobal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(global_object);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建并推入全局执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global_execution_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(global_context);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">execution_context_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(global_execution_context);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>全局执行上下文中的全局对象（Global Object）包含内置对象（如 <code>Date</code>、<code>Array</code>、<code>String</code>、<code>Number</code>、<code>setTimeout</code>、<code>setInterval</code>）和其他全局属性（如 <code>window</code> 对象）。</p><h4 id="_3-函数执行上下文-fec" tabindex="-1">3. 函数执行上下文 (FEC) <a class="header-anchor" href="#_3-函数执行上下文-fec" aria-label="Permalink to &quot;3. 函数执行上下文 (FEC)&quot;">​</a></h4><p><strong>函数执行上下文</strong> 是在函数调用时创建的执行上下文。它包含三个部分：</p><ol><li><strong>Activation Object (AO)</strong>： <ul><li>包含函数的参数和局部变量。</li></ul></li><li><strong>作用域链 (Scope Chain)</strong>： <ul><li>由激活对象 (AO) 和父级执行上下文的变量对象 (VO) 组成。</li></ul></li><li><strong><code>this</code> 绑定的值</strong>： <ul><li>函数执行时，<code>this</code> 关键字的值根据调用方式确定。</li></ul></li></ol><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/execution.cc</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CreateFunctionExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewFunctionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(function-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">shared</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">scope_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ActivationObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ao </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewActivationObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(function);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function_execution_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(function_context);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  function_execution_context-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_activation_object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ao);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 设置作用域链</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  function_execution_context-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetScopeChain</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">execution_context_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">current_scope_chain</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function_execution_context;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MaybeHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Call</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[]) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建并推入函数执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function_execution_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CreateFunctionExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, function);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">execution_context_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(function_execution_context);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 执行函数代码</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  ASSIGN_RETURN_ON_EXCEPTION</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      isolate, result,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      Execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CallInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, function, receiver, argc, args),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      Object);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 弹出函数执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">execution_context_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="_4-变量对象-vo-和变量环境-ve" tabindex="-1">4. 变量对象 (VO) 和变量环境 (VE) <a class="header-anchor" href="#_4-变量对象-vo-和变量环境-ve" aria-label="Permalink to &quot;4. 变量对象 (VO) 和变量环境 (VE)&quot;">​</a></h4><p>在早期 ECMAScript 版本中，执行上下文关联到一个变量对象 (Variable Object, VO)，包含变量和函数声明。随着 ECMAScript 的发展，变量环境 (VariableEnvironment, VE) 取代了变量对象，作为执行上下文中的一部分。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/execution.cc</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> VariableEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> AddVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    variables_.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">make_pair</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name, value));</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">GetVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> variables_.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> variables_.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> it-&gt;second;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::unordered_map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> variables_;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  ExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">context_</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">variable_environment_</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> VariableEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  VariableEnvironment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> variable_environment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> variable_environment_;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> context_;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  VariableEnvironment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> variable_environment_;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><h3 id="综合代码示例与解析" tabindex="-1">综合代码示例与解析 <a class="header-anchor" href="#综合代码示例与解析" aria-label="Permalink to &quot;综合代码示例与解析&quot;">​</a></h3><p>下面是一个综合的示例，展示全局执行上下文和函数执行上下文在 V8 引擎中的工作原理：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/execution.cc</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 初始化全局执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> InitializeGlobalExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">global_context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">GlobalObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global_object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">global_object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global_execution_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(global_context);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  global_execution_context-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">variable_environment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">AddVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewStringFromAsciiChecked</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;globalVar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">execution_context_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(global_execution_context);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建函数执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CreateFunctionExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewFunctionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(function-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">shared</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">scope_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ActivationObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ao </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewActivationObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(function);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function_execution_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(function_context);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  function_execution_context-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_activation_object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ao);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  function_execution_context-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetScopeChain</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">execution_context_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">current_scope_chain</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 设置函数变量</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  function_execution_context-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">variable_environment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">AddVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewStringFromAsciiChecked</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;localVar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">), isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function_execution_context;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 执行函数</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MaybeHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Call</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[]) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ExecutionContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function_execution_context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CreateFunctionExecutionContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, function);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">execution_context_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(function_execution_context);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  ASSIGN_RETURN_ON_EXCEPTION</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      isolate, result,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      Execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CallInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, function, receiver, argc, args),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      Object);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">execution_context_stack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ol><li><strong>ECS</strong> 管理执行上下文的调用顺序。</li><li><strong>GEC</strong> 包含全局对象和变量环境，在代码开始执行时创建。</li><li><strong>FEC</strong> 在函数调用时创建，包含激活对象 (AO)、作用域链和 <code>this</code> 绑定。</li><li><strong>VO 和 VE</strong> 管理变量和函数声明，现代 ECMAScript 使用变量环境 (VE) 来替代变量对象 (VO)。</li></ol><p>V8 引擎通过上述机制高效地管理 JavaScript 的执行上下文，确保代码按预期执行。</p><h3 id="js-中内存管理" tabindex="-1">JS 中内存管理 <a class="header-anchor" href="#js-中内存管理" aria-label="Permalink to &quot;JS 中内存管理&quot;">​</a></h3><blockquote><p>JS 对于基本数据类型内存的分配在执行时，会分配在栈空间;对于引用类型的内存分配在执行时，会分配在堆空间</p></blockquote><p>因为内存的大小是有限的，所以当内存不再需要的时候，我们需要对其进行释放，以便腾出更多的内存空间。</p><h4 id="垃圾回收机制" tabindex="-1">垃圾回收机制 <a class="header-anchor" href="#垃圾回收机制" aria-label="Permalink to &quot;垃圾回收机制&quot;">​</a></h4><p>垃圾回收的英文是 Garbage Collection，简称 GC。</p><h5 id="gc-算法-引用计数" tabindex="-1">GC 算法-引用计数 <a class="header-anchor" href="#gc-算法-引用计数" aria-label="Permalink to &quot;GC 算法-引用计数&quot;">​</a></h5><p>当一个对象有一个引用指向它时，那么这个对象的引用就+1，当一个对象的引用为 0 时，这个对象就可以被销。这个算法有一个很大的弊端就是会产生循环引用，例子：闭包。</p><p><img src="' + _imports_5 + '" alt="image.png"> 解决方案是 obj1.info = null 但是在实际开发中很少能够注意到。</p><h5 id="gc-算法-标记清除" tabindex="-1">GC 算法-标记清除 <a class="header-anchor" href="#gc-算法-标记清除" aria-label="Permalink to &quot;GC 算法-标记清除&quot;">​</a></h5><p>这个算法是设置一个根对象(root object)，垃圾回收器会定期从这个根开始，找所有从根开始有引用到的对象，对 于哪些没有引用到的对象，就认为是不可用的对象，这个算法可以很好的解决循环引用的问题。</p><p><img src="' + _imports_6 + '" alt="image.png"> JS 引擎比较广泛的采用的就是标记清除算法，当然类似于 V8 引擎为了进行更好的优化，它在算法的实现细节上也会结合 一些其他的算法。</p><h3 id="javascript-中的垃圾回收-gc-算法详解" tabindex="-1">JavaScript 中的垃圾回收 (GC) 算法详解 <a class="header-anchor" href="#javascript-中的垃圾回收-gc-算法详解" aria-label="Permalink to &quot;JavaScript 中的垃圾回收 (GC) 算法详解&quot;">​</a></h3><p>JavaScript 中的垃圾回收算法主要依赖于 <strong>标记-清除</strong> (Mark-and-Sweep) 算法。V8 引擎在此基础上进行了多种优化，包括 <strong>分代垃圾回收</strong> (Generational Garbage Collection) 和 <strong>增量垃圾回收</strong> (Incremental Garbage Collection)。这些优化提高了垃圾回收的效率，减少了程序的暂停时间 (pause time)。</p><h4 id="_1-标记-清除-mark-and-sweep-算法" tabindex="-1">1. 标记-清除 (Mark-and-Sweep) 算法 <a class="header-anchor" href="#_1-标记-清除-mark-and-sweep-算法" aria-label="Permalink to &quot;1. 标记-清除 (Mark-and-Sweep) 算法&quot;">​</a></h4><p><strong>标记-清除</strong> 是垃圾回收的基本算法，其工作过程如下：</p><ol><li><p><strong>标记阶段</strong>：</p><ul><li>从根对象（全局对象、栈和静态数据）开始，递归遍历所有可达对象。</li><li>标记这些对象为活动对象 (live)。</li></ul></li><li><p><strong>清除阶段</strong>：</p><ul><li>遍历堆中的所有对象。</li><li>释放未标记的对象（即不可达对象）的内存。</li></ul></li></ol><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 标记阶段</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MarkCompactCollector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">MarkLiveObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  RootMarkingVisitor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">visitor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(heap_, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">marking_state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  heap_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">IterateRoots</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">visitor, VISIT_ONLY_STRONG);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">marking_state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">IsEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    HeapObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> marking_state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    obj-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">IterateBody</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">visitor);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 清除阶段</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MarkCompactCollector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SweepSpaces</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> page : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">heap_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">old_space</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    FreeList</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> free_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> heap_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">old_space</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">free_list</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> page-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ObjectIterator</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Next</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">marking_state</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">IsMarked</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(object)) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        free_list-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Free</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(object);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="_2-分代垃圾回收-generational-garbage-collection" tabindex="-1">2. 分代垃圾回收 (Generational Garbage Collection) <a class="header-anchor" href="#_2-分代垃圾回收-generational-garbage-collection" aria-label="Permalink to &quot;2. 分代垃圾回收 (Generational Garbage Collection)&quot;">​</a></h4><p><strong>分代垃圾回收</strong> 基于一个观察，即大多数对象的生命周期很短。将堆内存分为两个主要区域：</p><ul><li><strong>新生代</strong> (Young Generation)：存放新创建的对象，回收频繁。</li><li><strong>老生代</strong> (Old Generation)：存放存活时间较长的对象，回收频率较低。</li></ul><p><strong>Scavenge 算法</strong> 用于新生代垃圾回收：</p><ul><li>新生代进一步划分为两个半空间 (semi-spaces)： <ul><li><strong>From 空间</strong>：当前正在使用的空间。</li><li><strong>To 空间</strong>：空闲空间，用于存放存活对象。</li></ul></li><li>复制算法：遍历 From 空间中的对象，将存活对象复制到 To 空间。</li><li>复制完成后，交换两个空间的角色。</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Scavenge</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ScavengeVisitor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">visitor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(heap_);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  heap_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">IterateRoots</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">visitor, VISIT_ONLY_STRONG);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">heap_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">promotion_list</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">IsEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    HeapObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> heap_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">promotion_list</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    obj-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">IterateBody</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">visitor);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  heap_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">new_space</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">FreeAllUnmarked</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><strong>老生代垃圾回收</strong> 使用 <strong>标记-清除</strong> 和 <strong>标记-压缩</strong> (Mark-and-Compact) 算法：</p><ul><li><strong>标记-压缩</strong>：除了标记和清除外，还将存活对象压缩到堆的一端，减少内存碎片。</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MarkCompactCollector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CollectGarbage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  MarkLiveObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 标记</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  SweepSpaces</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 清除</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  CompactSpaces</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 压缩</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CompactSpaces</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> page : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">heap_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">old_space</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    page-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Compact</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="_3-增量垃圾回收-incremental-garbage-collection" tabindex="-1">3. 增量垃圾回收 (Incremental Garbage Collection) <a class="header-anchor" href="#_3-增量垃圾回收-incremental-garbage-collection" aria-label="Permalink to &quot;3. 增量垃圾回收 (Incremental Garbage Collection)&quot;">​</a></h4><p><strong>增量垃圾回收</strong> 将垃圾回收工作分解为多个小步骤，分散在程序的执行过程中，从而减少长时间的暂停，提高应用的响应性。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> IncrementalMarking</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Start</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (state_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> STOPPED) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  state_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MARKING;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  heap_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mark_compact_collector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">MarkLiveObjectsIncrementally</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> IncrementalMarking</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Step</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (state_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MARKING) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  heap_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">mark_compact_collector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">MarkLiveObjectsStep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(bytes);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="引用计数算法-reference-counting-详解" tabindex="-1">引用计数算法 (Reference Counting) 详解 <a class="header-anchor" href="#引用计数算法-reference-counting-详解" aria-label="Permalink to &quot;引用计数算法 (Reference Counting) 详解&quot;">​</a></h3><p><strong>引用计数</strong> 是一种简单但有效的垃圾回收算法，通过跟踪每个对象的引用数来管理内存。虽然这种方法在现代 JavaScript 引擎中不常用，但它仍然是理解垃圾回收机制的重要基础。</p><h4 id="_1-引用计数算法的基本原理" tabindex="-1">1. 引用计数算法的基本原理 <a class="header-anchor" href="#_1-引用计数算法的基本原理" aria-label="Permalink to &quot;1. 引用计数算法的基本原理&quot;">​</a></h4><p>引用计数算法为每个对象维护一个计数器，记录该对象被引用的次数。当对象的引用计数变为零时，该对象即为不可达对象，可以被回收。</p><p><strong>基本操作</strong>：</p><ul><li><strong>增加引用</strong>：当有新的引用指向对象时，引用计数加一。</li><li><strong>减少引用</strong>：当引用被删除时，引用计数减一。如果计数变为零，回收该对象。</li></ul><h4 id="_2-引用计数的优缺点" tabindex="-1">2. 引用计数的优缺点 <a class="header-anchor" href="#_2-引用计数的优缺点" aria-label="Permalink to &quot;2. 引用计数的优缺点&quot;">​</a></h4><p><strong>优点</strong>：</p><ul><li><strong>即时回收</strong>：当对象的引用计数变为零时，可以立即回收，无需等待全局垃圾回收。</li><li><strong>简单实现</strong>：相对其他算法，引用计数容易实现。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>无法处理循环引用</strong>：当两个对象相互引用时，尽管它们不再被其他对象引用，但它们的引用计数仍然大于零，无法被回收。</li><li><strong>开销较大</strong>：频繁更新引用计数会带来额外的开销。</li></ul><h4 id="_3-引用计数算法在-v8-中的实现" tabindex="-1">3. 引用计数算法在 V8 中的实现 <a class="header-anchor" href="#_3-引用计数算法在-v8-中的实现" aria-label="Permalink to &quot;3. 引用计数算法在 V8 中的实现&quot;">​</a></h4><p>虽然 V8 引擎主要使用标记-清除、分代和增量垃圾回收，但了解引用计数的基本实现有助于理解其工作原理。以下是一个简化的引用计数实现示例。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cpp复制代码#include </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">unordered_map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &lt;iostream&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ref_count_</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> AddRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ref_count_; }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Release</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ref_count_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      delete</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ref_count_;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // other object data</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Reference</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  Reference</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> obj</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">obj_</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    obj_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">AddRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  ~Reference</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    obj_-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Release</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj_;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 模拟对象分配和引用</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> TestReferenceCounting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Reference </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ref1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // obj1 ref_count = 1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Reference </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ref2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj2);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // obj2 ref_count = 1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      Reference </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ref3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // obj1 ref_count = 2</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // ref3 作用域结束，obj1 ref_count = 1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // ref1 和 ref2 作用域结束，obj1 和 obj2 ref_count = 0，自动回收</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  TestReferenceCounting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  std</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::cout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;引用计数测试结束&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &lt;&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::endl;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="_4-循环引用问题及其解决方案" tabindex="-1">4. 循环引用问题及其解决方案 <a class="header-anchor" href="#_4-循环引用问题及其解决方案" aria-label="Permalink to &quot;4. 循环引用问题及其解决方案&quot;">​</a></h4><p><strong>循环引用</strong> 是引用计数算法的主要问题。解决方法包括使用弱引用（Weak Reference）和其他辅助数据结构。</p><p><strong>弱引用</strong>：弱引用不增加对象的引用计数，可以打破循环引用。例如，在 JavaScript 中使用 <code>WeakMap</code> 或 <code>WeakSet</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> node1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> node2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">node1.next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> node2;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">node2.next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> node1; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 循环引用</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用 WeakMap 打破循环引用</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> weakMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">weakMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(node1, node2);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">weakMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(node2, node1);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 手动解除引用</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">node1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">node2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ol><li><strong>标记-清除</strong> (Mark-and-Sweep)：基础的垃圾回收算法，分为标记和清除两个阶段。</li><li><strong>分代垃圾回收</strong> (Generational Garbage Collection)：将堆内存分为新生代和老生代，新生代使用 Scavenge 算法，老生代使用标记-清除和标记-压缩算法。</li><li><strong>增量垃圾回收</strong> (Incremental Garbage Collection)：将垃圾回收过程分成多个小步骤，提高程序的响应性。</li></ol><p>通过这些算法和优化技术，V8 引擎实现了高效的垃圾回收机制，确保 JavaScript 程序的内存管理和性能优化。</p>', 89);
const _hoisted_90 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_90);
}
const _02JS____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _02JS____ as default
};
