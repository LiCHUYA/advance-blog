import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/20210910204624.jpg-28.w8TmK8vb.jpg";
const _imports_1 = "/advance-blog/assets/20210910205141.jpg-29.xoKdfhi0.jpg";
const _imports_2 = "/advance-blog/assets/20210910215922.jpg-30.GcDfPted.jpg";
const _imports_3 = "/advance-blog/assets/1610264529229005910.jpg-31.OiXq6G8h.jpg";
const _imports_4 = "/advance-blog/assets/20210911162520.jpg-32.HwxD2s2R.jpg";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/08-进阶篇-深入服务端——从跨域问题到 Nginx 响应报头配置.md","filePath":"src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/08-进阶篇-深入服务端——从跨域问题到 Nginx 响应报头配置.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/08-进阶篇-深入服务端——从跨域问题到 Nginx 响应报头配置.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p><strong>前端工程师作为一个承上启下的工种</strong>，承接上方的 UI 层，开启对接后端的 API 层，前端开发可以说是软件开发过程中重要的一环。正因为前端的特殊地位，因此有时候不可避免需要接触并学习其上下游知识。</p><p>一个优秀的前端工程师，往往除了精通前端本身外，还需要具备一定的软件设计能力或者服务端开发能力，而本篇文章也将由原来的纯前端层面转变到服务端 <code>Nginx</code> 配置层面，虽然进阶了一层，但本身其也与前端息息相关，借此笔者也将带大家更上一层楼。</p><h2 id="nginx-与跨域问题" tabindex="-1">Nginx 与跨域问题 <a class="header-anchor" href="#nginx-与跨域问题" aria-label="Permalink to &quot;Nginx 与跨域问题&quot;">​</a></h2><p>大多数前端第一次接触 Nginx 可能并不是为了配置什么 HTTP 缓存相关的响应头，而是为了解决头疼的跨域问题。比如下方常见的浏览器跨域报错：</p><p><img src="' + _imports_0 + '" alt="20210910204624.jpg"></p><p>以上是笔者在掘金首页随便找了一个接口进行本地调用后报的跨域问题，从响应报头可以看出服务端做了访问限制：</p><p><img src="' + _imports_1 + '" alt="20210910205141.jpg"></p><p><code>Access-Control-Allow-Origin</code> 表示指定允许访问的域名（白名单），上述因为设置了 <a href="https://juejin.cn" target="_blank" rel="noreferrer">https://juejin.cn</a> 的域名，所以除了该域名外的任何访问都将是不被允许的。</p><p>因此如果前端访问后端跨域，首先要检查的便是服务端或者 Nginx 配置的 Access-Control-Allow-Origin 是否包含前端域名。</p><p>有些时候 Access-Control-Allow-Origin 被设置成 * 代表允许所有域名访问，但可能还会报如下跨域问题：</p><p><img src="' + _imports_2 + '" alt="20210910215922.jpg"></p><p>该问题产生的根源其实是在前端，比如前端使用 <code>Axios</code> 请求库时如果开启了以下配置：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">axios.defaults.withCredentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 允许携带 cookie</span></span></code></pre></div><p>其代表允许请求头携带 <code>cookie </code>，那么服务端配置 Access-Control-Allow-Origin 时就不能为 *，或者针对该类型的接口前端请求关闭该配置即可。</p><p>同时当前端配置了 <code>axios.defaults.withCredentials = true</code> 时，服务端需配置 <code>access-control-allow-credentials: true</code>。</p><p>如果浏览器发起了<strong>预检请求</strong>，那么可能还需要配置 <code>access-control-allow-methods</code> 和 <code>access-control-allow-headers</code> 报头为允许的值。比如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>access-control-allow-headers: Content-Type,Content-Length,Authorization,Accept,X-Requested-With</span></span>\n<span class="line"><span>access-control-allow-methods: PUT,POST,GET,DELETE,OPTIONS</span></span></code></pre></div><p>所谓预检请求，也就是浏览器控制台经常会看到的 <code>OPTIONS</code> 请求。</p><p>关于什么时候会发起预检请求，与预检请求相反的称为“简单请求”，可以参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82" target="_blank" rel="noreferrer">简单请求的触发条件</a>。</p><h2 id="使用-nginx-配置响应报头" tabindex="-1">使用 Nginx 配置响应报头 <a class="header-anchor" href="#使用-nginx-配置响应报头" aria-label="Permalink to &quot;使用 Nginx 配置响应报头&quot;">​</a></h2><p>通过跨域问题，让我们了解到了 Nginx 配置的重要性，下面我们就正式尝试使用 Nginx 来配置响应报头。</p><h3 id="访问-nginx-服务器及配置文件" tabindex="-1">访问 Nginx 服务器及配置文件 <a class="header-anchor" href="#访问-nginx-服务器及配置文件" aria-label="Permalink to &quot;访问 Nginx 服务器及配置文件&quot;">​</a></h3><p>第一步我们需要访问应用所在的 Nginx 服务器，这里笔者使用的是 <code>finalshell</code> 工具，该软件支持 Windows 和 Mac 系统。</p><p><img src="' + _imports_3 + '" alt="1610264529229005910.jpg"></p><p>登录成功之后我们可以进入控制台使用 <code>vim</code> 命令针对 nginx 配置文件进行编辑（首先得知道 nginx 配置文件的目录地址，一般以 nginx.conf 命名）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>vim /etc/nginx/nginx.conf</span></span></code></pre></div><p>打开 nginx.conf 文件后可以通过以下常用命令进行操作：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>编辑：按 i 键，进入编辑模式</span></span>\n<span class="line"><span>保存：按下 :w</span></span>\n<span class="line"><span>保存并退出：按下 :wq</span></span>\n<span class="line"><span>退出：按下 :q</span></span>\n<span class="line"><span>返回命令模式：按 esc 键，返回命令模式</span></span></code></pre></div><h3 id="修改跨域相关配置" tabindex="-1">修改跨域相关配置 <a class="header-anchor" href="#修改跨域相关配置" aria-label="Permalink to &quot;修改跨域相关配置&quot;">​</a></h3><p>nginx.conf 文件中包含了很多参数项，如果要修改上述的跨域配置，那么首先找到对应的应用端口，修改 <code>location /</code> 中的参数：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">80;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Access-Control-Allow-Origin *; </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Access-Control-Allow-Methods </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;PUT,POST,GET,DELETE,OPTIONS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Access-Control-Allow-Headers </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Content-Type,Content-Length, Authorization, Accept,X-Requested-With&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ($request_method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">= </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;OPTIONS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 204</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>修改完我们保存并退出后需要重启下 nginx 配置才会生效，运行 <code>nginx -s reload</code> 命令。最终我们刷新页面观察响应报头成功返回了配置字段：</p><p><img src="' + _imports_4 + '" alt="20210911162520.jpg"></p><h3 id="修改缓存相关配置" tabindex="-1">修改缓存相关配置 <a class="header-anchor" href="#修改缓存相关配置" aria-label="Permalink to &quot;修改缓存相关配置&quot;">​</a></h3><p>nginx 作为一个代理服务器，当处理静态资源时资源的一些如 eTag、last-modified 等首部大都是由源服务器返回的，一般在 nginx 配置中不会对其进行修改，而主要修改的是缓存方式和过期时间的配置。比如我们不想 html 文件命中强缓存，希望其走协商缓存，可以添加如下响应报头配置：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">80;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ($request_filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">~* </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.*.(html|htm)$) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Cache-Control </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;no-cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>而像 js、css 和图片这样的静态资源，我们希望浏览器命中强缓存，nginx 可以设置相应的过期时间：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">80;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ~</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> .*.(gif|jpg|jpeg|png|bmp|swf|js|css)$ </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        expires </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">1d;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>上述配置我们以 1 天为例，最终浏览器将返回响应报头 <code>Cache-Control: max-age=86400</code>。</p><h3 id="add-header-的继承问题" tabindex="-1">add_header 的继承问题 <a class="header-anchor" href="#add-header-的继承问题" aria-label="Permalink to &quot;add_header 的继承问题&quot;">​</a></h3><p>倘若我们在 html 的判断上层又添加了如下首部：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    listen </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">80;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Test </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;掘金&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ($request_filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">~* </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.*.(html|htm)$) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Cache-Control </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;no-cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>那么如果按照 JavaScript 从上往下的执行顺序来猜想，最终 html 文件响应报头中将会被添加以上两个首部，而经过实际检验会发现只会添加 Cache-Control 首部，导致该结果的原因主要是 add_header 的继承问题。官方给出的解释如下：</p><blockquote><p>There could be several<code>add_header</code>directives. These directives are inherited from the previous level if and only if there are no<code>add_header</code>directives defined on the current level.</p></blockquote><p>主要意思为<strong>当且仅当当前层级上未定义任何 add_header 时，才可以从上层继承 add_header</strong>。而上述的 if 模块便属于层级的概念，因此上层的 add_header 并不会起作用。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>本篇文章 Nginx 部分看似脱离了前端，实际与前端关系密切，同时本章内容也是掌握 HTTP 缓存知识不可或缺的一部分。笔者认为学习一门技术遇到瓶颈不在于这门技术本身，而是看你如何突破其上下游的知识领域，虽然本文没有涉及服务端更深层次的内容，但作为一个和前端缓存有来往的“邻居”，相信大家可以借此继续前行。</p><p>至此我们即将从“HTTP 缓存”学习班中毕业，相信一路打怪升级下来各位读者也积累了不少“装备”和“经验”，于此可以暂且休息一会，切勿“急功近利”，下文便将开启新的征程。</p>', 48);
const _hoisted_49 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_49);
}
const _08___________________Nginx_______ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _08___________________Nginx_______ as default
};
