import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/03-实用笔记/01-hooks封装/01-index.md","filePath":"src/study-notes/03-实用笔记/01-hooks封装/01-index.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/03-实用笔记/01-hooks封装/01-index.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="hooks" tabindex="-1">Hooks <a class="header-anchor" href="#hooks" aria-label="Permalink to &quot;Hooks&quot;">​</a></h2><h3 id="vue3中仿usecontext实现" tabindex="-1">Vue3中仿useContext实现 <a class="header-anchor" href="#vue3中仿usecontext实现" aria-label="Permalink to &quot;Vue3中仿useContext实现&quot;">​</a></h3><h4 id="基本代码" tabindex="-1">基本代码 <a class="header-anchor" href="#基本代码" aria-label="Permalink to &quot;基本代码&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//useContext.ts</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { defineComponent, h, inject, provide, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> InjectionKey, UnwrapRef } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;vue&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Component } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;vue&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; {</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  Provider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    Readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;{</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">      value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> T</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &gt;</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  Consumer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Component</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  useContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> T</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">defaultValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> InjectionKey</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Provider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    props: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    setup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, { </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">slots</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> passedValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> props.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> defaultValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (props.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      provide</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(symbol, passedValue)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">          &quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">          null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">          // @ts-expect-error</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          slots.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        )</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  })</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Provider,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Consumer: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    useContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(symbol, defaultValue)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { createContext }</span></span></code></pre></div><h4 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { createContext } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;@/hooks/useContext&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> TopoContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    dialog: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      structureDialogState: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;add&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//add || edit</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        visible: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        updateTable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        currentRow: {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//当前行 编辑赋值用</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      externalConnectionDialogState: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;add&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//add || edit</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        visible: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        updateTable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        currentRow: {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//当前行 编辑赋值用</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  })</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">useContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> TopoContext</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { TopoContext, useContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> useTopoContext }</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>&lt;script lang=&quot;ts&quot; setup&gt;</span></span>\n<span class="line"><span>import TextArea from &quot;@/views/project/components/TopoNetColl/components/TextArea.vue&quot;</span></span>\n<span class="line"><span>import UploadItem from &quot;@/views/project/components/TopoNetColl/components/UploadItem.vue&quot;</span></span>\n<span class="line"><span>import Table from &quot;@/views/project/components/TopoNetColl/components/Table.vue&quot;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>import { TopoContext } from &quot;./context/TopoContext&quot;</span></span>\n<span class="line"><span>&lt;/script&gt;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>&lt;template&gt;</span></span>\n<span class="line"><span>  &lt;TopoContext.Provider&gt; //注入数据</span></span>\n<span class="line"><span>    &lt;el-tabs&gt;</span></span>\n<span class="line"><span>      &lt;el-tab-pane label=&quot;网络结构&quot;&gt;</span></span>\n<span class="line"><span>        &lt;TextArea&gt;&lt;/TextArea&gt;</span></span>\n<span class="line"><span>        &lt;UploadItem&gt;&lt;/UploadItem&gt;</span></span>\n<span class="line"><span>        &lt;Table&gt;&lt;/Table&gt;</span></span>\n<span class="line"><span>      &lt;/el-tab-pane&gt;</span></span>\n<span class="line"><span>    &lt;/el-tabs&gt;</span></span>\n<span class="line"><span>  &lt;/TopoContext.Provider&gt;</span></span>\n<span class="line"><span>&lt;/template&gt;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// context状态</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { useTopoContext } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;../context/TopoContext&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> TopoContext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> useTopoContext</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//使用数据</span></span></code></pre></div>', 8);
const _hoisted_9 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_9);
}
const _01Index = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _01Index as default
};
