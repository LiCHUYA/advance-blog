import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/01-js高级plus/26-补充_vue2和3中vif-vfor优先级.md","filePath":"src/study-notes/01-学习笔记/01-js高级plus/26-补充_vue2和3中vif-vfor优先级.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/01-js高级plus/26-补充_vue2和3中vif-vfor优先级.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p><code>v-for</code> 和 <code>v-if</code> 是两个常用的指令，分别用于循环渲染列表和条件渲染。在 Vue 2 和 Vue 3 中，这两个指令的优先级处理方式有明显不同。</p><h3 id="_1-vue-2-中的-v-for-和-v-if-优先级" tabindex="-1"><strong>1. Vue 2 中的 <code>v-for</code> 和 <code>v-if</code> 优先级</strong> <a class="header-anchor" href="#_1-vue-2-中的-v-for-和-v-if-优先级" aria-label="Permalink to &quot;**1. Vue 2 中的 `v-for` 和 `v-if` 优先级**&quot;">​</a></h3><ul><li><p><strong>优先级</strong>: 在 Vue 2 中，<code>v-for</code> 的优先级高于 <code>v-if</code>。这意味着在有 <code>v-for</code> 和 <code>v-if</code> 同时存在的情况下，Vue 2 会先执行 <code>v-for</code> 循环，再判断每个循环项是否满足 <code>v-if</code> 的条件。</p></li><li><p><strong>行为</strong>: 当 <code>v-for</code> 与 <code>v-if</code> 同时出现在一个元素上时，Vue 2 会为每个循环项单独进行 <code>v-if</code> 条件检查。这意味着即使 <code>v-if</code> 条件不满足，<code>v-for</code> 仍然会遍历整个数组或对象。</p></li><li><p><strong>示例</strong>:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;item in items&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;item.isActive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  {{ item.name }}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><p>在这个例子中，Vue 2 会首先执行 <code>v-for</code>，循环 <code>items</code> 列表，然后对每个 <code>item</code> 执行 <code>v-if</code> 条件检查。如果列表很大且大部分 <code>item</code> 都不满足 <code>v-if</code> 条件，这可能会影响性能。</p></li></ul><h3 id="_2-vue-3-中的-v-if-和-v-for-优先级" tabindex="-1"><strong>2. Vue 3 中的 <code>v-if</code> 和 <code>v-for</code> 优先级</strong> <a class="header-anchor" href="#_2-vue-3-中的-v-if-和-v-for-优先级" aria-label="Permalink to &quot;**2. Vue 3 中的 `v-if` 和 `v-for` 优先级**&quot;">​</a></h3><ul><li><p><strong>优先级</strong>: 在 Vue 3 中，<code>v-if</code> 的优先级高于 <code>v-for</code>。这意味着 Vue 3 先会检查 <code>v-if</code> 条件，只有当条件满足时，才会执行 <code>v-for</code> 循环。</p></li><li><p><strong>行为</strong>: 这种优先级调整意味着如果 <code>v-if</code> 条件不满足，那么 <code>v-for</code> 循环根本不会执行，这可以减少不必要的性能开销，尤其是在处理大数据集时。</p></li><li><p><strong>示例</strong>:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;shouldShow&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> v-for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;item in items&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  {{ item.name }}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><p>在这个例子中，如果 <code>shouldShow</code> 为 <code>false</code>，<code>v-for</code> 根本不会执行。这样，如果 <code>items</code> 列表非常大，这种优化可以避免遍历整个数组，从而提升性能。</p></li></ul><h3 id="_3-为什么在-vue-3-中改变优先级" tabindex="-1"><strong>3. 为什么在 Vue 3 中改变优先级？</strong> <a class="header-anchor" href="#_3-为什么在-vue-3-中改变优先级" aria-label="Permalink to &quot;**3. 为什么在 Vue 3 中改变优先级？**&quot;">​</a></h3><ul><li><p><strong>性能优化</strong>: Vue 3 的设计更关注性能。通过让 <code>v-if</code> 优先于 <code>v-for</code>，避免了在条件不满足的情况下仍然执行循环操作。尤其是在处理大量数据时，这种优化可以显著减少无用的操作，提升性能。</p></li><li><p><strong>逻辑清晰度</strong>: 从逻辑上来看，先判断条件再进行循环往往是更符合程序员直觉的做法。开发者通常期望，如果某个条件不满足，那么相关的操作（如循环、渲染）都不应该执行。Vue 3 的这种调整更符合这种逻辑。</p></li><li><p><strong>简化开发</strong>: 在 Vue 2 中，如果希望先进行条件检查再执行循环，开发者通常需要将 <code>v-if</code> 放置在 <code>v-for</code> 的父级元素上，这增加了代码复杂度。在 Vue 3 中，由于 <code>v-if</code> 优先级高，可以直接在同一元素上使用而无需调整结构，从而简化了开发。</p></li></ul><h3 id="小结" tabindex="-1"><strong>小结</strong> <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;**小结**&quot;">​</a></h3><ul><li><strong>Vue 2</strong>: <code>v-for</code> 优先于 <code>v-if</code>，每次循环项都会单独进行条件检查。</li><li><strong>Vue 3</strong>: <code>v-if</code> 优先于 <code>v-for</code>，先检查条件再决定是否执行循环，提升了性能和代码逻辑的清晰度。</li></ul>', 9);
const _hoisted_10 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_10);
}
const _26____vue2_3_vifVfor___ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _26____vue2_3_vifVfor___ as default
};
