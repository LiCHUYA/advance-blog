import { _ as __unplugin_components_4 } from "./chunks/ArticleMetadata.l7JwFtuX.js";
import { _ as _export_sfc, D as resolveComponent, o as openBlock, c as createElementBlock, I as createVNode, w as withCtx, k as createBaseVNode, a as createTextVNode, R as createStaticVNode, b as createBlock, e as createCommentVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/image-20240831163803224.5vGGfIiS.png";
const _imports_1 = "/advance-blog/assets/image-20240831163822574.h_MqiIum.png";
const _imports_2 = "/advance-blog/assets/image-20240831165137378.QozePRpP.png";
const _imports_3 = "/advance-blog/assets/image-20240831195412784.1S1tH_00.png";
const _imports_4 = "/advance-blog/assets/image-20240831230314497.xN2FuWgP.png";
const _imports_5 = "/advance-blog/assets/image-20240831200657253.7inqwN22.png";
const _imports_6 = "/advance-blog/assets/image-20240831223347738.X84T21q2.png";
const _imports_7 = "/advance-blog/assets/3fc9b1e8210a5ee0356c0a5f343260b.A2Bc18Qw.png";
const _imports_8 = "/advance-blog/assets/image-20240831231158661.4jvTlfIG.png";
const _imports_9 = "/advance-blog/assets/image-20240901092415626.WtyGD9LG.png";
const __pageData = JSON.parse('{"title":"进程和线程","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/01-js高级plus/17-_事件循环.md","filePath":"src/study-notes/01-学习笔记/01-js高级plus/17-_事件循环.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/01-js高级plus/17-_事件循环.md" };
const _hoisted_1 = /* @__PURE__ */ createBaseVNode("h1", {
  id: "进程和线程",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createTextVNode("进程和线程 "),
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#进程和线程",
    "aria-label": 'Permalink to "进程和线程"'
  }, "​")
], -1);
const _hoisted_2 = /* @__PURE__ */ createStaticVNode('<p><img src="' + _imports_0 + '" alt="image-20240831163803224"></p><ul><li>进程是线程的容器</li></ul><p><img src="' + _imports_1 + '" alt="image-20240831163822574"></p><p><img src="' + _imports_2 + '" alt="image-20240831165137378"></p><h1 id="事件循环" tabindex="-1">事件循环 <a class="header-anchor" href="#事件循环" aria-label="Permalink to &quot;事件循环&quot;">​</a></h1>', 5);
const _hoisted_7 = /* @__PURE__ */ createStaticVNode('<h2 id="浏览器的事件循环" tabindex="-1">浏览器的事件循环 <a class="header-anchor" href="#浏览器的事件循环" aria-label="Permalink to &quot;浏览器的事件循环&quot;">​</a></h2><h3 id="_1-浏览器的多线程架构" tabindex="-1">1. 浏览器的多线程架构 <a class="header-anchor" href="#_1-浏览器的多线程架构" aria-label="Permalink to &quot;1. 浏览器的多线程架构&quot;">​</a></h3><p>虽然 JavaScript 是单线程的，但浏览器实际上是多线程的。浏览器的多线程架构包含以下几个主要线程：</p><ul><li><strong>主线程（UI线程）</strong>：执行 JavaScript 代码，处理DOM、CSSOM的操作以及 UI 渲染。</li><li><strong>Web Worker 线程</strong>：用于执行与主线程并行的后台任务，不与 DOM 直接交互。</li><li><strong>渲染线程</strong>：负责页面的渲染工作，包括布局计算、绘制操作等。</li><li><strong>网络线程</strong>：处理网络请求、文件读取等 I/O 操作。</li><li><strong>定时器线程</strong>：处理 <code>setTimeout</code>、<code>setInterval</code> 等定时器任务。</li></ul><h3 id="_2-事件循环的基本概念" tabindex="-1">2. 事件循环的基本概念 <a class="header-anchor" href="#_2-事件循环的基本概念" aria-label="Permalink to &quot;2. 事件循环的基本概念&quot;">​</a></h3><p>事件循环的核心任务是协调 JavaScript 代码执行与浏览器其他任务的运作顺序。其工作流程可以概括为以下几个步骤：</p><ol><li><strong>执行栈（Call Stack）</strong>：当 JavaScript 代码执行时，函数调用会被添加到执行栈中。执行栈是一个后进先出（LIFO）的数据结构。</li><li><strong>任务队列（Task Queue）</strong>： <ul><li><strong>宏任务队列（Macro Task Queue）</strong>：包含 <code>setTimeout</code>、<code>setInterval</code>、UI 渲染、事件处理等任务。</li><li><strong>微任务队列（Micro Task Queue）</strong>：包含 <code>Promise.then</code>、<code>MutationObserver</code> 等微任务。</li></ul></li><li><strong>事件循环（Event Loop）</strong>： <ul><li>检查执行栈是否为空，如果不为空，则继续执行栈中的代码。</li><li>如果执行栈为空，事件循环会<code>首先</code>处理<code>微任务队列中</code>的所有任务，然后再从<code>宏任务队列</code>中取出一个任务，推入执行栈中执行。</li></ul></li><li><strong>渲染和回流</strong>：在每次事件循环迭代后，浏览器会进行页面渲染（如果有需要），包括布局计算和重绘等操作。</li></ol><p><img src="' + _imports_3 + '" alt="image-20240831195412784"></p><p><img src="' + _imports_4 + '" alt="image-20240831230314497"></p><p>以上架构实现闭环</p><h4 id="常见分析" tabindex="-1">常见分析 <a class="header-anchor" href="#常见分析" aria-label="Permalink to &quot;常见分析&quot;">​</a></h4><p>我们将代码执行分为3个地方,如下图所示。</p><p><img src="' + _imports_5 + '" alt="image-20240831200657253"></p><p>分别是<code>mainscript</code>(执行同步代码),<code>宏任务队列</code>,<code>微任务队列</code></p><h5 id="_1-new-promise" tabindex="-1">1.new Promise() <a class="header-anchor" href="#_1-new-promise" aria-label="Permalink to &quot;1.new Promise()&quot;">​</a></h5><ul><li>会放在<code>main-script</code>中同步执行</li></ul><h5 id="_2-settimeout" tabindex="-1">2.settimeout <a class="header-anchor" href="#_2-settimeout" aria-label="Permalink to &quot;2.settimeout&quot;">​</a></h5><ul><li>会放在<code>宏任务队列</code>,要注意执行的<code>秒数</code>,小的先执行,同样的按先后顺序执行</li></ul><h5 id="_3-promise-then" tabindex="-1">3.promise.then <a class="header-anchor" href="#_3-promise-then" aria-label="Permalink to &quot;3.promise.then&quot;">​</a></h5><ul><li>会放在<code>微任务队列</code></li></ul><h5 id="_4-async和await" tabindex="-1">4.async和await <a class="header-anchor" href="#_4-async和await" aria-label="Permalink to &quot;4.async和await&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;22222&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  })</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;111111&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;33333&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;444444&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><ul><li><p>当使用<code>async</code>修饰过后的<code>异步函数</code>,如果是<code>直接调用</code>（<code>foo()</code>）,则里面的代码会按<code>同步代码</code>顺序执行,<code>await</code>函数也会同步执行。</p></li><li><p>需要注意的是:</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;111111&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;33333&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//注意</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>foo函数中的<code> console.log(&quot;33333&quot;)</code>在<code>await bar()</code>后面,而bar函数又返回了一个<code>Promise</code>,意味着,<code> console.log(&quot;33333&quot;)</code>在<code>bar</code>函数中的<code>.then</code>方法中执行,将会放入<code>微任务队列</code></p><h6 id="_4-1-async中的返回值" tabindex="-1">4.1 async中的返回值 <a class="header-anchor" href="#_4-1-async中的返回值" aria-label="Permalink to &quot;4.1 async中的返回值&quot;">​</a></h6><p><img src="' + _imports_6 + '" alt="image-20240831223347738"></p><ul><li>使用<code>async</code>修饰过的函数,如果不返回东西,则默认<code>return undefined</code>,也就意味着会<code>Promise.resolve()</code>,await后面的代码会在<code>then</code>函数中调用,加入<code>微任务队列</code></li></ul><h4 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h4><h5 id="_1-滴滴面试题" tabindex="-1">1.<code>滴滴面试题</code> <a class="header-anchor" href="#_1-滴滴面试题" aria-label="Permalink to &quot;1.`滴滴面试题`&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;promise1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;promise2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;start1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;promiseA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    })</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;promiseB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;start2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;promise88&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">333</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  })</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;promise2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">555</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  });</span></span></code></pre></div><p><img src="' + _imports_7 + '" alt="3fc9b1e8210a5ee0356c0a5f343260b"></p><h5 id="_2-难度较大" tabindex="-1">2.难度较大 <a class="header-anchor" href="#_2-难度较大" aria-label="Permalink to &quot;2.难度较大&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 1.直接return一个值 相当于resolve(4)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // return 4</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 2.return thenable的值</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 大量的计算</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 3.return Promise</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 不是普通的值, 多加一次微任务</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // Promise.resolve(4), 多加一次微任务</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 一共多加两次微任务</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(res)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1.return 4</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 0</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 4</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 3</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 5</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 6</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2.return thenable</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 0</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 4</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 3</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 5</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 6</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 3.return promise</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 0</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 3</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 4</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 5</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 6</span></span></code></pre></div><h5 id="_3-腾讯面试题" tabindex="-1">3.腾讯面试题 <a class="header-anchor" href="#_3-腾讯面试题" aria-label="Permalink to &quot;3.腾讯面试题&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> async1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;async1 start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> async2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;async1 end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> async2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;async2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;script start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;setTimeout0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;setTimeout2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;setImmediate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;nextTick1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">async1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;nextTick2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;promise1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;promise2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;promise3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;script end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// script start</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// async1 start</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// async2</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// promise1</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// promise2</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// script end</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// nexttick1</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// nexttick2</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// async1 end</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// promise3</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// settimetout0</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// setImmediate</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// setTimeout2</span></span></code></pre></div><h3 id="v8中的分析-理解" tabindex="-1">V8中的分析(理解) <a class="header-anchor" href="#v8中的分析-理解" aria-label="Permalink to &quot;V8中的分析(理解)&quot;">​</a></h3><p>在浏览器环境中，事件循环是一个复杂的机制，协调了多个任务的执行。V8 引擎作为 JavaScript 的执行引擎，专注于 JavaScript 代码的执行，但它与浏览器的事件循环机制紧密合作。在 V8 的处理流程中，<strong>宏任务</strong>和<strong>微任务</strong>的定义及调度扮演了重要角色。为了深入了解它们的定义、队列的组织方式，以及不同线程之间的交互，我们需要详细探讨 V8 的核心源码和其在事件循环中的角色。</p><h4 id="_1-宏任务和微任务的定义" tabindex="-1">1. 宏任务和微任务的定义 <a class="header-anchor" href="#_1-宏任务和微任务的定义" aria-label="Permalink to &quot;1. 宏任务和微任务的定义&quot;">​</a></h4><p>在浏览器环境中，任务被分为**宏任务（Macro Task）<strong>和</strong>微任务（Micro Task）**两种，它们的主要区别在于调度时机。</p><h5 id="_1-1-宏任务" tabindex="-1">1.1 <strong>宏任务</strong> <a class="header-anchor" href="#_1-1-宏任务" aria-label="Permalink to &quot;1.1 **宏任务**&quot;">​</a></h5><p>宏任务是较大的任务单元，通常是一些异步事件的处理。典型的宏任务包括：</p><ul><li><code>setTimeout</code></li><li><code>setInterval</code></li><li><code>I/O 操作</code></li><li><code>UI 渲染任务</code></li><li><code>message</code> 事件（如 <code>postMessage</code>）</li></ul><p>宏任务的执行是由浏览器的事件循环调度的。每次事件循环会从宏任务队列中取出一个任务执行，然后执行该任务中的 JavaScript 代码。</p><h5 id="_1-2-微任务" tabindex="-1">1.2 <strong>微任务</strong> <a class="header-anchor" href="#_1-2-微任务" aria-label="Permalink to &quot;1.2 **微任务**&quot;">​</a></h5><p>微任务是比宏任务更小的任务单元，通常是 Promise 的回调等。微任务的典型例子包括：</p><ul><li><code>Promise.then</code> 回调</li><li><code>MutationObserver</code></li><li><code>process.nextTick</code>（在 Node.js 中）</li></ul><p>微任务通常会在当前宏任务执行完毕后立即执行，而不需要等待下一轮事件循环。</p><h4 id="_2-队列的定义与组织" tabindex="-1">2. 队列的定义与组织 <a class="header-anchor" href="#_2-队列的定义与组织" aria-label="Permalink to &quot;2. 队列的定义与组织&quot;">​</a></h4><p>在浏览器中，任务被组织成不同的队列，主要包括<strong>宏任务队列</strong>和<strong>微任务队列</strong>。</p><h5 id="_2-1-宏任务队列" tabindex="-1">2.1 <strong>宏任务队列</strong> <a class="header-anchor" href="#_2-1-宏任务队列" aria-label="Permalink to &quot;2.1 **宏任务队列**&quot;">​</a></h5><p>宏任务队列是一个 FIFO（先入先出）队列，宏任务按顺序被添加到这个队列中。每次事件循环开始时，浏览器从宏任务队列中取出第一个任务，执行它。每个宏任务完成后，事件循环会检查微任务队列。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 假设浏览器维护一个宏任务队列，示意代码如下：</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::queue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Task</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> macro_task_queue;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 调度宏任务</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ScheduleMacroTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Task</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> task</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    macro_task_queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(task);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 执行宏任务</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> RunMacroTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">macro_task_queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">empty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Task task </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> macro_task_queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">front</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        macro_task_queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        task.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 执行完宏任务后，检查微任务队列</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">        v8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">PerformMicrotaskCheckpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h5 id="_2-2-微任务队列" tabindex="-1">2.2 <strong>微任务队列</strong> <a class="header-anchor" href="#_2-2-微任务队列" aria-label="Permalink to &quot;2.2 **微任务队列**&quot;">​</a></h5><p>V8 在内部维护了一个微任务队列。这个队列也是 FIFO 结构，但是其调度机制与宏任务不同。每次在执行宏任务后，V8 会检查微任务队列并执行所有挂起的微任务。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// V8 内部的微任务队列，使用 MicrotaskQueue 类管理</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MicrotaskQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">RunMicrotasks</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">is_empty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Microtask</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> microtask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> front</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 获取队列中的第一个微任务</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        Dequeue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 移除该任务</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        microtask-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 执行该微任务</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>微任务的调度是由 <code>Isolate::PerformMicrotaskCheckpoint()</code> 来处理的，每次宏任务执行完成后，V8 会调用这个方法检查并执行微任务队列中的任务。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">PerformMicrotaskCheckpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">microtask_queue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">is_empty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 如果微任务队列为空，则不执行</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    HandleScope </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">handle_scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 进入 HandleScope，保证微任务执行时的内存安全</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    RCS_SCOPE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate_, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">RuntimeCallCounterId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::kRunMicrotasks);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 记录运行时间</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    microtask_queue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">RunMicrotasks</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 执行微任务</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="_3-各个线程的交互" tabindex="-1">3. 各个线程的交互 <a class="header-anchor" href="#_3-各个线程的交互" aria-label="Permalink to &quot;3. 各个线程的交互&quot;">​</a></h4><p>浏览器是一个多线程的系统，常见的线程包括：</p><ul><li><strong>主线程</strong>（Main Thread）：负责 UI 渲染和执行 JavaScript 代码。</li><li><strong>Web Worker 线程</strong>：执行 Worker 中的 JavaScript 代码，与主线程分离。</li><li><strong>渲染线程</strong>：负责页面的渲染。</li><li><strong>网络线程</strong>：处理网络请求。</li></ul><p>这些线程之间通过消息队列进行通信和任务传递。例如，主线程在处理 JavaScript 的同时，可能会从网络线程接收到数据，然后通过事件循环将其作为宏任务放入任务队列中。</p><h5 id="_3-1-主线程与任务队列的交互" tabindex="-1">3.1 <strong>主线程与任务队列的交互</strong> <a class="header-anchor" href="#_3-1-主线程与任务队列的交互" aria-label="Permalink to &quot;3.1 **主线程与任务队列的交互**&quot;">​</a></h5><p>主线程是事件循环的核心，负责执行 JavaScript 代码。它会从宏任务队列中取出任务执行，并在每次任务执行后检查微任务队列。</p><p>主线程主要执行的任务包括：</p><ul><li>执行用户的 JavaScript 代码。</li><li>处理 DOM 事件。</li><li>执行异步操作的回调，如 <code>setTimeout</code>、<code>fetch</code> 的回调等。</li></ul><p>主线程的事件循环执行流程如下：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> EventLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 1. 执行一个宏任务</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        RunMacroTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 2. 处理页面渲染</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        RenderUI</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h5 id="_3-2-web-worker-线程与主线程的交互" tabindex="-1">3.2 <strong>Web Worker 线程与主线程的交互</strong> <a class="header-anchor" href="#_3-2-web-worker-线程与主线程的交互" aria-label="Permalink to &quot;3.2 **Web Worker 线程与主线程的交互**&quot;">​</a></h5><p>Web Worker 是一种并行的执行环境，与主线程之间通过 <code>postMessage</code> 进行通信。当 Worker 中的任务完成时，它会将消息发送回主线程，主线程会将其作为一个宏任务放入任务队列中。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 在主线程中处理 Worker 的消息</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">worker.onmessage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(event) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 将任务推入宏任务队列</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    ScheduleMacroTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(event.data);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><h4 id="_4-v8-源码中的关键部分解析" tabindex="-1">4. V8 源码中的关键部分解析 <a class="header-anchor" href="#_4-v8-源码中的关键部分解析" aria-label="Permalink to &quot;4. V8 源码中的关键部分解析&quot;">​</a></h4><p>V8 作为 JavaScript 引擎，主要负责 JavaScript 的执行和微任务的调度。以下是几个 V8 核心源码中的关键部分。</p><h5 id="_4-1-微任务的执行" tabindex="-1">4.1 <strong>微任务的执行</strong> <a class="header-anchor" href="#_4-1-微任务的执行" aria-label="Permalink to &quot;4.1 **微任务的执行**&quot;">​</a></h5><p><code>Isolate::PerformMicrotaskCheckpoint()</code> 方法负责微任务的调度与执行。它会检查微任务队列是否为空，如果有任务，则通过 <code>RunMicrotasks()</code> 方法执行所有微任务。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">PerformMicrotaskCheckpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">microtask_queue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">is_empty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    HandleScope </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">handle_scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    RCS_SCOPE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate_, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">RuntimeCallCounterId</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::kRunMicrotasks);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    microtask_queue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">RunMicrotasks</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h5 id="_4-2-任务的调度" tabindex="-1">4.2 <strong>任务的调度</strong> <a class="header-anchor" href="#_4-2-任务的调度" aria-label="Permalink to &quot;4.2 **任务的调度**&quot;">​</a></h5><p>任务调度器（TaskRunner）负责管理和调度任务。每当一个任务需要执行时，浏览器或 V8 会将其添加到任务队列中。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TaskRunner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">PostTask</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Task</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> task</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 将任务加入队列</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    task_queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(task);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> TaskRunner</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 从队列中取出任务并执行</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">task_queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">empty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        Task task </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> task_queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">front</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        task_queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        task.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>在浏览器环境中，V8 作为 JavaScript 引擎，负责执行 JavaScript 代码并管理微任务的调度。宏任务和微任务是事件循环中的两种主要任务类型。宏任务的调度由浏览器控制，而微任务则由 V8 通过 <code>MicrotaskQueue</code> 类管理。在事件循环的每一轮中，浏览器会执行一个宏任务，然后 V8 会检查微任务队列并执行所有挂起的微任务。通过这种机制，浏览器和 V8 共同保证了异步任务的顺利执行和任务队列的调度。</p><h2 id="nodejs的事件循环" tabindex="-1">Nodejs的事件循环 <a class="header-anchor" href="#nodejs的事件循环" aria-label="Permalink to &quot;Nodejs的事件循环&quot;">​</a></h2><p><img src="' + _imports_8 + '" alt="image-20240831231158661"></p><p><img src="' + _imports_9 + '" alt="image-20240901092415626"></p><ul><li>libuv就像一个桥梁。</li><li><code>Tick</code>就像是钟表上的秒针,每次<code>滴答</code>,就是一秒(1次Tick),1次<code>Tick</code>会划分很多阶段</li></ul><p>Node.js 的事件循环是其异步编程模型的核心，它使得单线程的 JavaScript 能够有效地处理并发任务。为了全面理解 Node.js 中的事件循环，需要详细了解它的六个主要阶段以及微任务和宏任务的执行机制。</p><h3 id="事件循环的六个阶段" tabindex="-1">事件循环的六个阶段 <a class="header-anchor" href="#事件循环的六个阶段" aria-label="Permalink to &quot;事件循环的六个阶段&quot;">​</a></h3><p>Node.js 的事件循环由六个阶段组成，每个阶段处理特定类型的回调函数。下面逐一分析这<code>六个阶段</code>及其内部工作机制：</p><ol><li><p><strong>Timers 阶段</strong></p><ul><li><strong>职责</strong>: 执行由 <code>setTimeout()</code> 和 <code>setInterval()</code> 调度的回调函数。</li><li><strong>机制</strong>: 当定时器到达指定的延迟时间时，回调函数会被添加到该阶段的队列中。当事件循环进入 <code>timers</code> 阶段时，这些回调函数会依次被执行。</li><li><strong>注意事项</strong>: 定时器的回调并不保证会在时间精确到达时执行，而是在 <code>timers</code> 阶段被处理，因此可能会有一定的延迟，尤其是在主线程繁忙的情况下。</li></ul></li><li><p><strong>Pending Callbacks 阶段</strong></p><ul><li><strong>职责</strong>: 执行某些系统操作（如 TCP 错误）的回调函数，这些回调通常由上一个事件循环中未处理完的 I/O 操作触发。</li><li><strong>机制</strong>: 这个阶段主要处理一些由底层的 libuv 库调度的操作，用户代码通常不会直接与这个阶段交互。</li></ul></li><li><p><strong>Idle, Prepare 阶段</strong></p><ul><li><strong>职责</strong>: 仅供 Node.js 内部使用，执行一些需要在事件循环开始前完成的准备工作。</li><li><strong>机制</strong>: 这个阶段执行一些内部的回调，比如与 <code>net</code> 和 <code>dns</code> 模块相关的操作。普通用户代码一般不会涉及这个阶段。</li></ul></li><li><p><strong>Poll 阶段</strong></p><ul><li><strong>职责</strong>: 这是事件循环的核心阶段，负责处理大部分的 I/O 事件，并执行相应的回调。</li><li><strong>机制</strong>: <ul><li>在此阶段，Node.js 会检查是否有 I/O 事件完成，如果有，相关的回调会被执行。</li><li>如果 <code>poll</code> 阶段的回调队列为空，并且没有定时器等待执行，事件循环可能会在此阶段等待新的 I/O 事件。</li><li>如果有定时器即将到期，事件循环会提前结束 <code>poll</code> 阶段，转而进入 <code>timers</code> 阶段。</li></ul></li></ul></li><li><p><strong>Check 阶段</strong></p><ul><li><strong>职责</strong>: 专门执行 <code>setImmediate()</code> 的回调函数。</li><li><strong>机制</strong>: <code>setImmediate()</code> 的回调函数会在 <code>poll</code> 阶段之后立即执行，无论 <code>poll</code> 阶段是否有未处理的 I/O 事件。</li></ul></li><li><p><strong>Close Callbacks 阶段</strong></p><ul><li><strong>职责</strong>: 处理关闭事件的回调，如 <code>socket.on(&#39;close&#39;, ...)</code> 的回调。</li><li><strong>机制</strong>: 当某个套接字或句柄突然关闭（如 <code>socket.destroy()</code>），该回调会在此阶段触发并执行。</li></ul></li></ol><h3 id="微任务和宏任务" tabindex="-1">微任务和宏任务 <a class="header-anchor" href="#微任务和宏任务" aria-label="Permalink to &quot;微任务和宏任务&quot;">​</a></h3><p>在每个阶段之间，Node.js 都会检查微任务（Microtasks）队列，并在进入下一个阶段之前执行所有微任务。</p><ul><li><strong>微任务（Microtasks）</strong>: <ul><li>包括 <code>process.nextTick()</code> 和 <code>Promise</code> 的回调函数。</li><li><strong>优先级</strong>: 微任务的优先级高于事件循环中的任何阶段，因此每个阶段完成后，Node.js 会优先处理微任务队列中的所有任务。</li><li><strong>执行时机</strong>: 在当前阶段的任务执行完毕后立即执行，确保它们在进入下一个阶段前被处理完。</li></ul></li></ul><h4 id="微任务中的队列" tabindex="-1">微任务中的队列 <a class="header-anchor" href="#微任务中的队列" aria-label="Permalink to &quot;微任务中的队列&quot;">​</a></h4><p>是的，Node.js 中的微任务队列确实分为两类：<strong>Next Tick Queue</strong>（<code>process.nextTick()</code> 队列）和 <strong>Microtask Queue</strong>（一般是 <code>Promise</code> 的回调）。这两类微任务的执行优先级不同，并且它们在事件循环中的执行时机也有所差别。</p><h5 id="_1-next-tick-queue" tabindex="-1">1. Next Tick Queue <a class="header-anchor" href="#_1-next-tick-queue" aria-label="Permalink to &quot;1. Next Tick Queue&quot;">​</a></h5><ul><li><p><strong><code>process.nextTick()</code></strong>: 这个 API 用于将一个函数放入 <strong>Next Tick Queue</strong>。与其他微任务不同，<code>process.nextTick()</code> 注册的回调会在当前操作完成后，<strong>立即</strong>在事件循环的下一个阶段开始前执行。因此，它的优先级比其他微任务更高。</p><p>在每个事件循环阶段完成后（即在宏任务完成后），Node.js 会先检查并执行 **Next Tick Queue****中的所有回调，然后才会处理其他微任务队列。</p></li></ul><h5 id="_2-microtask-queue" tabindex="-1">2. Microtask Queue <a class="header-anchor" href="#_2-microtask-queue" aria-label="Permalink to &quot;2. Microtask Queue&quot;">​</a></h5><ul><li><p><strong><code>Promise</code> 回调和其他微任务</strong>: 这些微任务会被添加到 <strong>Microtask Queue</strong> 中。与 <code>process.nextTick()</code> 不同，<code>Promise</code> 的回调在当前宏任务完成后会立即执行，但它们的优先级低于 <code>process.nextTick()</code>。</p><p><strong>Microtask Queue</strong> 中的所有任务会在每个事件循环阶段结束后、进入下一个阶段前执行。具体来说，Node.js 会先检查 <strong>Next Tick Queue</strong>，然后才会执行 <strong>Microtask Queue</strong> 中的任务。</p></li></ul><h5 id="_3-执行顺序总结" tabindex="-1">3.执行顺序总结 <a class="header-anchor" href="#_3-执行顺序总结" aria-label="Permalink to &quot;3.执行顺序总结&quot;">​</a></h5><ol><li>在一个事件循环阶段完成后，先执行 <strong>Next Tick Queue</strong> 中的所有回调。</li><li>然后，执行 <strong>Microtask Queue</strong> 中的所有回调。</li><li>最后，进入下一个事件循环阶段或结束事件循环。</li></ol><h5 id="_4-示例" tabindex="-1">4.示例 <a class="header-anchor" href="#_4-示例" aria-label="Permalink to &quot;4.示例&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Timeout callback&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Promise callback&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Next Tick callback&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><p>输出顺序将是：</p><ol><li><strong>Next Tick callback</strong>：因为 <code>process.nextTick()</code> 优先级最高。</li><li><strong>Promise callback</strong>：在 <code>Next Tick Queue</code> 之后执行。</li><li><strong>Timeout callback</strong>：最后执行，因为这是一个宏任务，只有在所有微任务处理完后才会执行。</li></ol><p>这个例子清楚地展示了微任务队列的优先级和执行顺序。</p><ul><li><strong>宏任务（Macrotasks）</strong>: <ul><li>包括 <code>setTimeout()</code>、<code>setInterval()</code>、<code>setImmediate()</code>、I/O 操作的回调函数等。</li><li>六个阶段都是宏任务。</li><li><strong>优先级</strong>: 宏任务的优先级低于微任务。宏任务通常在事件循环的各个阶段执行，取决于它们的类型和所属阶段。</li></ul></li></ul><h3 id="事件循环的执行流程" tabindex="-1">事件循环的执行流程 <a class="header-anchor" href="#事件循环的执行流程" aria-label="Permalink to &quot;事件循环的执行流程&quot;">​</a></h3><p>一个完整的事件循环流程如下：</p><ol><li><strong>Timers 阶段</strong>: 执行所有到期的 <code>setTimeout()</code> 和 <code>setInterval()</code> 回调。</li><li><strong>Pending Callbacks 阶段</strong>: 执行系统级别的 I/O 回调。</li><li><strong>Idle, Prepare 阶段</strong>: 执行内部的准备工作。</li><li><strong>Poll 阶段</strong>: 处理 I/O 事件和执行回调。</li><li><strong>Check 阶段</strong>: 执行 <code>setImmediate()</code> 回调。</li><li><strong>Close Callbacks 阶段</strong>: 执行关闭事件的回调。</li></ol><p>在每个阶段结束后，Node.js 会执行微任务队列中的所有任务。如果微任务队列为空，才会进入下一个阶段。</p><h3 id="示例分析" tabindex="-1">示例分析 <a class="header-anchor" href="#示例分析" aria-label="Permalink to &quot;示例分析&quot;">​</a></h3><p>以下代码展示了微任务和宏任务的执行顺序：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;timeout1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;immediate1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;nextTick1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;promise1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p><strong>输出顺序</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>start</span></span>\n<span class="line"><span>end</span></span>\n<span class="line"><span>nextTick1</span></span>\n<span class="line"><span>promise1</span></span>\n<span class="line"><span>timeout1</span></span>\n<span class="line"><span>immediate1</span></span></code></pre></div><p><strong>解释</strong>：</p><ol><li><strong>同步代码</strong>: <code>console.log(&#39;start&#39;)</code> 和 <code>console.log(&#39;end&#39;)</code> 最先执行。</li><li><strong><code>process.nextTick()</code></strong>: 具有最高优先级，<code>nextTick1</code> 紧跟同步代码执行。</li><li><strong><code>Promise</code> 回调</strong>: 是微任务，<code>promise1</code> 紧跟 <code>nextTick1</code> 执行。</li><li><strong><code>setTimeout()</code></strong>: 是宏任务，<code>timeout1</code> 在 <code>timers</code> 阶段执行。</li><li><strong><code>setImmediate()</code></strong>: 在 <code>check</code> 阶段执行，<code>immediate1</code> 最后执行。</li></ol><h3 id="libuv中处理事件循环" tabindex="-1">libuv中处理事件循环 <a class="header-anchor" href="#libuv中处理事件循环" aria-label="Permalink to &quot;libuv中处理事件循环&quot;">​</a></h3><p>libuv 是 Node.js 的底层库，负责管理事件循环、异步 I/O 操作、文件系统操作、线程池等功能。理解 libuv 中事件循环部分的核心代码，有助于更深入地理解 Node.js 的运行机制。</p><h3 id="事件循环的核心代码" tabindex="-1">事件循环的核心代码 <a class="header-anchor" href="#事件循环的核心代码" aria-label="Permalink to &quot;事件循环的核心代码&quot;">​</a></h3><p>libuv 中事件循环的实现主要集中在 <code>uv_run()</code> 函数中，这是事件循环的核心逻辑。以下是 <code>uv_run()</code> 的主要代码片段：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> uv_run</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">uv_loop_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">loop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, uv_run_mode </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> timeout;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 判断事件循环是否活跃（是否有活跃的句柄或请求）</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> uv__loop_alive</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">r)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 更新事件循环的当前时间戳</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    uv__update_time</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 开始事件循环的主循环</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> loop-&gt;stop_flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 更新事件循环的当前时间戳</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    uv__update_time</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 运行所有已到期的定时器回调（Timers 阶段）</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    uv__run_timers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 运行所有挂起的回调（Pending Callbacks 阶段）</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> uv__run_pending</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 运行空闲回调（Idle 阶段）</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    uv__run_idle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 运行预备回调（Prepare 阶段）</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    uv__run_prepare</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 确定 I/O 轮询的超时时间</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    timeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ((mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UV_RUN_ONCE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">r) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UV_RUN_DEFAULT)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      timeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> uv_backend_timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 进行 I/O 轮询操作，处理 Poll 阶段的 I/O 事件</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    uv__io_poll</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop, timeout);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 运行检查回调（Check 阶段）</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    uv__run_check</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 运行关闭句柄的回调（Close Callbacks 阶段）</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    uv__run_closing_handles</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 如果只运行一次事件循环，则更新时间并再运行一次定时器</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UV_RUN_ONCE) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      uv__update_time</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      uv__run_timers</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 再次检查事件循环是否依然活跃</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> uv__loop_alive</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loop);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> UV_RUN_NOWAIT)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 如果不等待，则直接退出循环</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 如果事件循环被要求停止，则重置停止标志</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (loop-&gt;stop_flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    loop-&gt;stop_flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 返回事件循环是否依然活跃</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="详细讲解" tabindex="-1">详细讲解 <a class="header-anchor" href="#详细讲解" aria-label="Permalink to &quot;详细讲解&quot;">​</a></h3><ol><li><p><strong><code>uv__loop_alive()</code></strong>: 检查事件循环是否有活跃的句柄或请求，如果没有，事件循环将停止。</p></li><li><p><strong><code>uv__update_time()</code></strong>: 更新事件循环的时间戳，用于确保定时器和其他基于时间的操作准确执行。</p></li><li><p><strong><code>uv__run_timers()</code></strong>: 执行已到期的定时器回调，即 <code>Timers</code> 阶段。</p></li><li><p><strong><code>uv__run_pending()</code></strong>: 执行挂起的回调，这些回调通常由上一个循环中未处理完的 I/O 操作生成，即 <code>Pending Callbacks</code> 阶段。</p></li><li><p><strong><code>uv__run_idle()</code> 和 <code>uv__run_prepare()</code></strong>: 分别执行 <code>Idle</code> 和 <code>Prepare</code> 阶段的回调，通常供内部使用。</p></li><li><p><strong><code>uv_backend_timeout()</code></strong>: 确定 <code>poll</code> 阶段的超时时间。如果没有定时器需要立即执行，事件循环可能在 <code>poll</code> 阶段等待新的 I/O 事件。</p></li><li><p><strong><code>uv__io_poll()</code></strong>: 这是事件循环的核心部分，负责等待和处理 I/O 事件，即 <code>Poll</code> 阶段。</p></li><li><p><strong><code>uv__run_check()</code></strong>: 执行 <code>setImmediate()</code> 的回调，即 <code>Check</code> 阶段。</p></li><li><p><strong><code>uv__run_closing_handles()</code></strong>: 执行关闭事件的回调，如 <code>socket.on(&#39;close&#39;, ...)</code> 的回调，即 <code>Close Callbacks</code> 阶段。</p></li></ol><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p><code>uv_run()</code> 是 libuv 事件循环的核心实现，它通过依次调用各个阶段的处理函数，完成 Node.js 异步 I/O 操作的调度。每个阶段处理的任务主要是宏任务，而微任务则在各阶段执行完毕后、下一个阶段开始之前处理。这个循环机制确保了 Node.js 能够在单线程中高效地处理大量并发操作。</p>', 126);
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ArticleMetadata = __unplugin_components_4;
  const _component_ClientOnly = resolveComponent("ClientOnly");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createVNode(_component_ClientOnly, null, {
      default: withCtx(() => {
        var _a, _b;
        return [
          (((_a = _ctx.$frontmatter) == null ? void 0 : _a.aside) ?? true) && (((_b = _ctx.$frontmatter) == null ? void 0 : _b.showArticleMetadata) ?? true) ? (openBlock(), createBlock(_component_ArticleMetadata, {
            key: 0,
            article: _ctx.$frontmatter
          }, null, 8, ["article"])) : createCommentVNode("", true)
        ];
      }),
      _: 1
    }),
    _hoisted_2,
    createVNode(_component_ClientOnly, null, {
      default: withCtx(() => {
        var _a, _b;
        return [
          (((_a = _ctx.$frontmatter) == null ? void 0 : _a.aside) ?? true) && (((_b = _ctx.$frontmatter) == null ? void 0 : _b.showArticleMetadata) ?? true) ? (openBlock(), createBlock(_component_ArticleMetadata, {
            key: 0,
            article: _ctx.$frontmatter
          }, null, 8, ["article"])) : createCommentVNode("", true)
        ];
      }),
      _: 1
    }),
    _hoisted_7
  ]);
}
const _17_____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _17_____ as default
};
