import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/20211007134008.jpg-2.hOjAUSJ7.jpg";
const _imports_1 = "/advance-blog/assets/代理服务器.png-4.P3eo2vTU.jpg";
const _imports_2 = "/advance-blog/assets/image.png-5.NZZVTkox.jpg";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/02-HTTP缓存1-开门见山——请求响应头中关于缓存的奥秘.md","filePath":"src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/02-HTTP缓存1-开门见山——请求响应头中关于缓存的奥秘.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/02-HTTP缓存1-开门见山——请求响应头中关于缓存的奥秘.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p>首先，在开启本节之前，欢迎大家来到前端缓存第一课：HTTP 缓存。在本节中，笔者将带大家揭开 HTTP 请求响应头中关于缓存的奥秘。</p><p>那么在介绍 HTTP 缓存前，我们不妨先介绍下 HTTP。</p><h2 id="从-http-开始" tabindex="-1">从 HTTP 开始 <a class="header-anchor" href="#从-http-开始" aria-label="Permalink to &quot;从 HTTP 开始&quot;">​</a></h2><p>首先我们了解下 HTTP 的概念：</p><blockquote><p>超文本传输协议（Hyper Text Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。</p></blockquote><p>以上我们不难发现 HTTP 是一种超文本传输协议，HTTP 协议用于客户端和服务端之间的通信（通过请求和响应的交换达成通信），请求必定由客户端发出，而服务端回复响应。</p><p>HTTP 请求部分又可以称为前端工程师眼中的 HTTP，它主要发生在客户端，请求是由“报文”的形式发送的，请求报文由三部分组成：<strong>请求行、请求报头和请求正文</strong>。同样 HTTP 响应部分的响应报文也由三部分组成：<strong>状态行、响应报头和响应正文</strong>。</p><p>这里我们拎出关键与缓存有关的<strong>请求报头</strong>和<strong>响应报头</strong>，也正是我们浏览器 <code>Network</code> 面板中常见的 <code>Request Headers</code> 和 <code>Response Headers</code>部分，以 Chrome 为例：</p><p><img src="' + _imports_0 + '" alt="20211007134008.jpg"></p><p>我们可以看到报头是由一系列中间用冒号 “:” 分隔的键值对组成，我们把它称为<strong>首部字段</strong>，其由首部字段名和字段值构成。如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Content-Type:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> text/javascript</span></span></code></pre></div><p>以上首部字段名为 Content-Type，首部字段值为 text/javascript，表示报文主体的对象类型。</p><p>首部字段又分为四种类型：</p><ul><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.5" target="_blank" rel="noreferrer">通用首部字段</a>（请求报头和响应报头都会用到的首部）</li><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.3" target="_blank" rel="noreferrer">请求首部字段</a>（请求报头用到的首部）</li><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.2" target="_blank" rel="noreferrer">响应首部字段</a>（响应报头用到的首部）</li><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.1" target="_blank" rel="noreferrer">实体首部字段</a>（针对请求报头和响应报头实体部分使用的首部）</li></ul><p>那么各类型的首部字段到底包含哪些首部？读者可以点击查阅以上各首部字段对应的 <code>w3</code> 文档进行查阅。比如通用首部字段包含了：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Cache-Control</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Connection</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Date</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Pragma</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Trailer</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Transfer-Encoding</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Upgrade</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Via</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Warning</span></span></code></pre></div><p>与缓存无关的首部字段不在本小册的介绍范围内，下面我们重点介绍与缓存有关的首部字段名，为后续章节储备必要的知识。</p><h2 id="与缓存有关的首部字段名" tabindex="-1">与缓存有关的首部字段名 <a class="header-anchor" href="#与缓存有关的首部字段名" aria-label="Permalink to &quot;与缓存有关的首部字段名&quot;">​</a></h2><p>开篇我们提到了 HTTP 缓存可以拆解为强缓存和协商缓存，也就是我们需要弄清楚和强缓存、协商缓存有关的首部字段名。为了让读者便于理解和记忆，笔者我使用了以下思维导图的模式来展示：</p><p>![HTTP 缓存.png](images/HTTP 缓存.png-3.jpg)</p><p>上图中和强缓存有关的首部字段名主要有两个：<code>Expires</code> 和 <code>Cache-Control</code>，我们依次来进行讲解。</p><h3 id="expires" tabindex="-1">Expires <a class="header-anchor" href="#expires" aria-label="Permalink to &quot;Expires&quot;">​</a></h3><p>Expires 首部字段是 <code>HTTP/1.0</code> 中定义缓存的字段，其给出了缓存过期的<strong>绝对时间</strong>，即在此时间之后，响应资源过期，属于<strong>实体首部字段</strong>。</p><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Expires:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Wed,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 11</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> May</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2022</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 03</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">:50:47</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> GMT</span></span></code></pre></div><p>上述示例表示该资源将在以上时间之后过期，而在该时间之前浏览器可以直接从浏览器缓中读取数据，无需再次请求服务器。注意这里<strong>无需再次请求服务器</strong>便是命中了强缓存。</p><p>但是因为 Expires 设置的缓存过期时间是一个绝对时间，所以会受客户端时间的影响而变得不精准。</p><h3 id="cache-control" tabindex="-1">Cache-Control <a class="header-anchor" href="#cache-control" aria-label="Permalink to &quot;Cache-Control&quot;">​</a></h3><p>Cache-Control 首部字段是 <code>HTTP/1.1</code> 中定义缓存的字段，其用于控制缓存的行为，可以组合使用多种指令，多个指令之间可以通过 “,” 分隔，属于<strong>通用首部字段</strong>。常用的指令有：max-age、s-maxage、public/private、no-cache/no store 等。</p><h4 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Cache-Control:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> max-age:3600,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> s-maxage=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3600</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> public</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Cache-Control:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> no-cache</span></span></code></pre></div><p><code>max-age</code> 指令给出了缓存过期的<strong>相对时间</strong>，单位为秒数。当其与 Expires 同时出现时，<strong>max-age 的优先级更高</strong>。但往往为了做向下兼容，两者都会经常出现在响应首部中。</p><p>同时 max-age 还可在请求首部中被使用，告知服务器客户端希望接收一个存在时间（age）不大于多少秒的资源。</p><p>而 <code>s-maxage</code> 与 max-age 不同之处在于，其只适用于公共缓存服务器，比如资源从源服务器发出后又被中间的代理服务器接收并缓存。</p><p><img src="' + _imports_1 + '" alt="代理服务器.png"></p><p><strong>当使用 s-maxage 指令后，公共缓存服务器将直接忽略 Expires 和 max-age 指令的值。</strong></p><p>另外，<code>public</code> 指令表示该资源可以被任何节点缓存（包括客户端和代理服务器），与其行为相反的 <code>private</code> 指令表示该资源只提供给客户端缓存，代理服务器不会进行缓存。<strong>同时当设置了 private 指令后 s-maxage 指令将被忽略。</strong></p><p>下面再来介绍下 no-cache、no store 指令，<strong>需要注意的是这两个指令在请求和响应中都可以使用</strong>，两者看上去都代表不缓存，但在响应首部中被使用时， <code>no store</code> 才是真正的不进行任何缓存。</p><p>当 no-cache 在请求首部中被使用时，表示告知（代理）服务器不直接使用缓存，要求向源服务器发起请求，而当在响应首部中被返回时，表示客户端可以缓存资源，但每次使用缓存资源前都<strong>必须</strong>先向服务器确认其有效性，这对每次访问都需要确认身份的应用来说很有用。</p><p>当然，我们也可以在代码里加入 meta 标签的方式来修改资源的请求首部：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Cache-Control&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> /&gt;</span></span></code></pre></div><p>至此，我们已经基本了解了强缓存下请求响应的两个主要首部字段，那么顺其自然，我们接着再来看看协商缓存中涉及的主要首部字段名：<code>Last-Modified</code>、<code>If-Modified-Since</code>、<code>Etag</code>、<code>If-None-Match</code>。</p><h3 id="last-modified-与-if-modified-since" tabindex="-1">Last-Modified 与 If-Modified-Since <a class="header-anchor" href="#last-modified-与-if-modified-since" aria-label="Permalink to &quot;Last-Modified 与 If-Modified-Since&quot;">​</a></h3><p>Last-Modified 首部字段顾名思义，代表资源的最后修改时间，其属于<strong>响应首部字段</strong>。当浏览器第一次接收到服务器返回资源的 Last-Modified 值后，其会把这个值存储起来，并再下次访问该资源时通过携带 If-Modified-Since 请求首部发送给服务器验证该资源有没有过期。</p><h4 id="示例-2" tabindex="-1">示例 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Last-Modified:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Fri</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 14</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> May</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2021</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 17</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">:23:13</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> GMT</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">If-Modified-Since:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> Fri</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 14</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> May</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2021</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 17</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">:23:13</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> GMT</span></span></code></pre></div><p>如果在 If-Modified-Since 字段指定的时间之后<strong>资源发生了更新</strong>，那么服务器会将更新的资源发送给浏览器（状态码200）并返回最新的 Last-Modified 值，浏览器收到资源后会更新缓存的 If-Modified-Since 的值。</p><p>如果在 If-Modified-Since 字段指定的时间之后<strong>资源都没有发生更新</strong>，那么服务器会返回状态码 <code>304 Not Modified</code> 的响应。</p><h3 id="etag-与-if-none-match" tabindex="-1">Etag 与 If-None-Match <a class="header-anchor" href="#etag-与-if-none-match" aria-label="Permalink to &quot;Etag 与 If-None-Match&quot;">​</a></h3><p>Etag 首部字段用于代表资源的唯一性标识，服务器会按照指定的规则生成资源的标识，其属于<strong>响应首部字段</strong>。当资源发生变化时，Etag 的标识也会更新。同样的，当浏览器第一次接收到服务器返回资源的 Etag 值后，其会把这个值存储起来，并在下次访问该资源时通过携带 If-None-Match 请求首部发送给服务器验证该资源有没有过期。</p><h4 id="示例-3" tabindex="-1">示例 <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Etag:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;29322-09SpAhH3nXWd8KIVqB10hSSz66&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">If-None-Match:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;29322-09SpAhH3nXWd8KIVqB10hSSz66&quot;</span></span></code></pre></div><p>如果服务器发现 If-None-Match 值与 Etag 不一致时，说明服务器上的文件已经被更新，那么服务器会发送更新后的资源给浏览器并返回最新的 Etag 值，浏览器收到资源后会更新缓存的 If-None-Match 的值。</p><p>行文至此，和强缓存与协商缓存相关的首部字段已经介绍完毕，相信大家在有所收获的同时也产生了一些疑惑和不解，没关系，这毕竟只是一个开始，相信后续的章节将逐渐为大家“拨开云雾”。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>本文从 HTTP 出发，介绍了 HTTP 的概念、报文的组成及与缓存相关的首部字段，一层层揭开请求响应头中关于缓存的奥秘。其中有些知识点笔者故意没有进行详细的介绍，是为了为后续的章节做好铺垫。</p><p>本文涉及的首部字段将会在后续的“关卡”中频繁出现，倘若你已经大致了解了本文所述的知识点，打开了属于你的“知识宝箱”，那么下一关的大门便已敞开。</p><h2 id="欢迎加入作者互动群" tabindex="-1">欢迎加入作者互动群 <a class="header-anchor" href="#欢迎加入作者互动群" aria-label="Permalink to &quot;欢迎加入作者互动群&quot;">​</a></h2><p><img src="' + _imports_2 + '" alt="image.png"></p>', 59);
const _hoisted_60 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_60);
}
const _02HTTP__1____________________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _02HTTP__1____________________ as default
};
