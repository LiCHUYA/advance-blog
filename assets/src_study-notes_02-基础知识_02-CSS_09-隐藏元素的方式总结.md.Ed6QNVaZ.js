import { _ as __unplugin_components_4 } from "./chunks/ArticleMetadata.l7JwFtuX.js";
import { _ as _export_sfc, D as resolveComponent, o as openBlock, c as createElementBlock, I as createVNode, w as withCtx, k as createBaseVNode, a as createTextVNode, R as createStaticVNode, b as createBlock, e as createCommentVNode } from "./chunks/framework.b55ravPP.js";
const __pageData = JSON.parse('{"title":"隐藏元素方式总结","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/02-基础知识/02-CSS/09-隐藏元素的方式总结.md","filePath":"src/study-notes/02-基础知识/02-CSS/09-隐藏元素的方式总结.md","lastUpdated":1739501366000}');
const _sfc_main = { name: "src/study-notes/02-基础知识/02-CSS/09-隐藏元素的方式总结.md" };
const _hoisted_1 = /* @__PURE__ */ createBaseVNode("h1", {
  id: "隐藏元素方式总结",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createTextVNode("隐藏元素方式总结 "),
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#隐藏元素方式总结",
    "aria-label": 'Permalink to "隐藏元素方式总结"'
  }, "​")
], -1);
const _hoisted_2 = /* @__PURE__ */ createStaticVNode('<h2 id="经典真题" tabindex="-1">经典真题 <a class="header-anchor" href="#经典真题" aria-label="Permalink to &quot;经典真题&quot;">​</a></h2><ul><li>隐藏页面中的某个元素的方法有哪些？</li></ul><h2 id="隐藏元素方案汇总" tabindex="-1">隐藏元素方案汇总 <a class="header-anchor" href="#隐藏元素方案汇总" aria-label="Permalink to &quot;隐藏元素方案汇总&quot;">​</a></h2><p>首先什么叫隐藏元素，大家第一反应就是 <em>display:none</em>，元素就被隐藏了。</p><p>没错，这确实是隐藏元素的一种，但是太过于片面。我们隐藏元素实际上可以分为 <em>3</em> 大类：</p><ul><li>完全隐藏：元素从渲染树中消失，不占据空间。</li><li>视觉上的隐藏：屏幕中不可见，占据空间。</li><li>语义上的隐藏：读屏软件不可读，但正常占据空间。</li></ul><h3 id="完全隐藏" tabindex="-1">完全隐藏 <a class="header-anchor" href="#完全隐藏" aria-label="Permalink to &quot;完全隐藏&quot;">​</a></h3><p><strong><em>display</em> 属性</strong></p><p>首先就是设置 <em>display</em> 为 <em>none</em>，这样元素就被隐藏了，并且是不占据空间的。</p><p><strong><em>hidden</em> 属性</strong></p><p>这是 <em>HTML5</em> 新增属性，相当于 <em>display: none</em>，直接写在元素上面，例如：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><h3 id="视觉上隐藏" tabindex="-1">视觉上隐藏 <a class="header-anchor" href="#视觉上隐藏" aria-label="Permalink to &quot;视觉上隐藏&quot;">​</a></h3><p>视觉上的隐藏，就是说元素还占据着位置，只是视觉上不可见而已。</p><p><strong><em>opacity</em> 属性</strong></p><p>这是大家比较熟知的一种方式，将透明度设置为 <em>0</em>，视觉上就会变得不可见。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">opacity:0</span></span></code></pre></div><p><em><strong>visibility:hidden</strong></em></p><p>这也是大家比较熟知的一种方式，通过 <em>CSS</em> 中的 <em>visibility</em> 属性来隐藏元素，使其不可见，但是仍然会占位</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">visibility:hidden</span></span></code></pre></div><p><strong>绝对定位</strong></p><p>这种方式以前用的比较多，设置 <em>posoition</em> 为 <em>absolute</em> 或 <em>fixed</em>，\b通过设置 <em>top、left</em> 等值，将其移出可视区域。例如：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">position: absolute;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">left: -999px;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">top: -999px;</span></span></code></pre></div><p><strong>设置 <em>margin</em></strong></p><p>通过设置 <em>margin</em> 值，将其移出可视区域范围（可视区域占位）。例如：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: -99999px;</span></span></code></pre></div><p><strong>设置宽高为 <em>0</em></strong></p><p>这也是比较常见的一种方式，简单说就是将元素的 <em>margin、border、padding、height</em> 和 <em>width</em> 等影响元素盒模型的属性设置成 <em>0</em>，如果元素内有子元素或内容，还应该设置其 <em>overflow:hidden</em> 来隐藏其子元素</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">width: 0px;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">height: 0px;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">overflow: hidden</span></span></code></pre></div><p><strong>裁剪元素</strong></p><p>隐藏元素的另一种方法是通过剪裁它们实现，具体是通过 <em>clip-path</em> 属性，这个属性比较新，浏览器兼容性也会比较差，但是了解一下还是非常有必要的。例如：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">clip-path</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: polygon(0px 0px,0px 0px,0px 0px,0px 0px);</span></span></code></pre></div><h3 id="语义上隐藏" tabindex="-1">语义上隐藏 <a class="header-anchor" href="#语义上隐藏" aria-label="Permalink to &quot;语义上隐藏&quot;">​</a></h3><p><strong><em>aria-hidden</em> 属性</strong></p><p>通过设置 <em>aria-hidden</em> 属性为 <em>true</em> 使读屏软件不可读，但是元素仍然占据空间并且可见。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;"> aria-hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=&quot;true&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span></span></code></pre></div><h2 id="真题解答" tabindex="-1">真题解答 <a class="header-anchor" href="#真题解答" aria-label="Permalink to &quot;真题解答&quot;">​</a></h2><ul><li>隐藏页面中的某个元素的方法有哪些？</li></ul><blockquote><p>参考答案：</p><p>隐藏元素可以分为 <em>3</em> 大类：</p><ul><li>完全隐藏：元素从渲染树中消失，不占据空间。</li><li>视觉上的隐藏：屏幕中不可见，占据空间。</li><li>语义上的隐藏：读屏软件不可读，但正常占据空。</li></ul><p>完全隐藏的方式有：设置 <em>display:none</em>、为元素设置 <em>hidden</em> 属性。</p><p>视觉上隐藏的方式有：设置 <em>opacity</em> 属性为 <em>0</em>、绝对定位的 <em>left</em> 和 <em>top</em> 值设置为 <em>-999px</em>、设置 <em>margin-left</em> 值为 <em>-999px</em>、设置宽高为 <em>0</em>、裁剪元素。</p><p>语义上的隐藏方式为将 <em>aria-hidden</em> 属性设置为 <em>true</em> 使读屏软件不可读。</p></blockquote><p>-<em>EOF</em>-</p>', 40);
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ArticleMetadata = __unplugin_components_4;
  const _component_ClientOnly = resolveComponent("ClientOnly");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createVNode(_component_ClientOnly, null, {
      default: withCtx(() => {
        var _a, _b;
        return [
          (((_a = _ctx.$frontmatter) == null ? void 0 : _a.aside) ?? true) && (((_b = _ctx.$frontmatter) == null ? void 0 : _b.showArticleMetadata) ?? true) ? (openBlock(), createBlock(_component_ArticleMetadata, {
            key: 0,
            article: _ctx.$frontmatter
          }, null, 8, ["article"])) : createCommentVNode("", true)
        ];
      }),
      _: 1
    }),
    _hoisted_2
  ]);
}
const _09__________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _09__________ as default
};
