import { _ as __unplugin_components_4 } from "./chunks/ArticleMetadata.l7JwFtuX.js";
import { _ as _export_sfc, D as resolveComponent, o as openBlock, c as createElementBlock, I as createVNode, w as withCtx, k as createBaseVNode, a as createTextVNode, R as createStaticVNode, b as createBlock, e as createCommentVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/image-20240904214147555.2t3FnZ8h.png";
const _imports_1 = "/advance-blog/assets/image-20240904215632385.Nc-w63tK.png";
const _imports_2 = "/advance-blog/assets/image-20240904221748332.h3bPyegL.png";
const _imports_3 = "/advance-blog/assets/image-20240904223951199.CVGecJsG.png";
const _imports_4 = "/advance-blog/assets/image-20240907094518627.eiY6Jg6j.png";
const _imports_5 = "/advance-blog/assets/image-20240907094613276.CRv4F5d4.png";
const __pageData = JSON.parse('{"title":"组件库","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/05-开源经历/01-index/03-组件库.md","filePath":"src/study-notes/05-开源经历/01-index/03-组件库.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/05-开源经历/01-index/03-组件库.md" };
const _hoisted_1 = /* @__PURE__ */ createBaseVNode("h1", {
  id: "组件库",
  tabindex: "-1"
}, [
  /* @__PURE__ */ createTextVNode("组件库 "),
  /* @__PURE__ */ createBaseVNode("a", {
    class: "header-anchor",
    href: "#组件库",
    "aria-label": 'Permalink to "组件库"'
  }, "​")
], -1);
const _hoisted_2 = /* @__PURE__ */ createStaticVNode('<h2 id="前置知识补充" tabindex="-1">前置知识补充 <a class="header-anchor" href="#前置知识补充" aria-label="Permalink to &quot;前置知识补充&quot;">​</a></h2><h3 id="_1-prop类型required" tabindex="-1">1.prop类型required <a class="header-anchor" href="#_1-prop类型required" aria-label="Permalink to &quot;1.prop类型required&quot;">​</a></h3><p><img src="' + _imports_0 + '" alt="image-20240904214147555"></p><ul><li><p>当把类型<code>PropsType</code>提取出来之后,上下文并不知道类型只读,<code>defineComponent</code>就不会识别<code>age</code>属性是必填的,会提示<code>number | undefined</code>,所以需要显示的设置<code>as const</code>类型,告诉props,这个类型。</p></li><li><p>原因</p><ul><li>Readonly,ts会把接收的对象{} 里面的require:true,变成ts的声明,我们提出来之后,即不在<code>defineComponent</code>中<code>props</code>直接声明,而是把对象定义在之外,则需要显示的声明<code>as const</code>。<img src="' + _imports_1 + '" alt="image-20240904215632385"></li></ul></li></ul><h3 id="_2-definecomponent" tabindex="-1">2.defineComponent <a class="header-anchor" href="#_2-definecomponent" aria-label="Permalink to &quot;2.defineComponent&quot;">​</a></h3><p><code>defineComponent</code> 是 Vue 3 提供的一个辅助函数，用于更好地支持 TypeScript 类型推断，同时也能够让你以一种更简洁的方式定义组件。它是组合式 API 中常用的工具，使得开发者可以更直观地构建 Vue 组件。</p><h4 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">({</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 组件选项</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">})</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h4 id="参数详解" tabindex="-1">参数详解 <a class="header-anchor" href="#参数详解" aria-label="Permalink to &quot;参数详解&quot;">​</a></h4><p><code>defineComponent</code> 函数接受一个对象作为参数，这个对象包含了组件的选项（类似于 Vue 2 的 <code>Vue.extend</code> 或 <code>Vue.component</code> 中的选项）。</p><p>这个对象可以包括以下主要选项：</p><ol><li><p><strong><code>props</code></strong>：定义组件接受的属性，支持类型推断和默认值设置。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  title</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: String,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    required</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: Number,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><strong><code>setup</code></strong>：组合式 API 的核心，用于定义组件的逻辑部分。<code>setup</code> 函数接收两个参数：<code>props</code> 和 <code>context</code>，返回一个对象，该对象中的属性和方法将暴露给模板。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(props, { emit }) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(props.count);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> increment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    emit</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;update:count&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, count.value);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    count,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    increment</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li><li><p><strong><code>data</code></strong>：与 Vue 2 类似，定义组件的响应式状态，但在组合式 API 中，推荐在 <code>setup</code> 函数中使用 <code>ref</code> 或 <code>reactive</code> 来代替。</p></li><li><p><strong><code>methods</code></strong>：定义组件的方法，同样的，在组合式 API 中，通常在 <code>setup</code> 中定义函数来代替。</p></li><li><p><strong><code>computed</code></strong>：定义计算属性，可以在 <code>setup</code> 中通过 <code>computed</code> 函数来实现。</p></li><li><p><strong><code>watch</code></strong>：用于监听属性或数据的变化，也可以在 <code>setup</code> 中通过 <code>watch</code> 函数来实现。</p></li><li><p><strong><code>template</code> / <code>render</code></strong>：可以选择直接使用模板字符串，也可以使用渲染函数（结合 <code>h</code> 函数）来生成 VNode。</p></li></ol><h4 id="definecomponent-使用示例" tabindex="-1"><code>defineComponent</code> 使用示例 <a class="header-anchor" href="#definecomponent-使用示例" aria-label="Permalink to &quot;`defineComponent` 使用示例&quot;">​</a></h4><h5 id="_1-基本示例" tabindex="-1">1. 基本示例 <a class="header-anchor" href="#_1-基本示例" aria-label="Permalink to &quot;1. 基本示例&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;MyComponent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  props: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    msg: String</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">  </span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      message: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">`Hello, ${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">props</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">msg</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}!`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">})</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>这个示例定义了一个简单的 Vue 组件 <code>MyComponent</code>，它接收一个 <code>msg</code> 属性，并在 <code>setup</code> 函数中生成一个 <code>message</code> 响应式数据。</p><h5 id="_2-使用-definecomponent-和-typescript" tabindex="-1">2. 使用 <code>defineComponent</code> 和 TypeScript <a class="header-anchor" href="#_2-使用-definecomponent-和-typescript" aria-label="Permalink to &quot;2. 使用 `defineComponent` 和 TypeScript&quot;">​</a></h5><p>在 TypeScript 项目中，<code>defineComponent</code> 提供了更好的类型推断支持，使得代码更加类型安全和易于维护。</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { defineComponent, ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;CounterComponent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  props: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    initialCount: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      type: Number,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      default: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">  </span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(props.initialCount);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> increment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      count,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      increment</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">})</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>在这个示例中，<code>initialCount</code> 属性的类型是 <code>Number</code>，并且 <code>setup</code> 函数使用了 TypeScript 的类型推断功能，<code>count</code> 的类型将自动推断为 <code>Ref&lt;number&gt;</code>。</p><h5 id="_3-结合-template-语法" tabindex="-1">3. 结合 <code>template</code> 语法 <a class="header-anchor" href="#_3-结合-template-语法" aria-label="Permalink to &quot;3. 结合 `template` 语法&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { defineComponent, ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  props: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    initialCount: Number</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">  </span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(props.initialCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> increment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      count,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      increment</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  template: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">`</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &lt;div&gt;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &lt;p&gt;Count: {{ count }}&lt;/p&gt;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">      &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &lt;/div&gt;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">  `</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">})</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>这个组件使用了 <code>template</code> 模板来描述其 UI。<code>count</code> 是响应式的，每次点击按钮时，<code>count</code> 的值会增加。</p><h4 id="definecomponent-的优势" tabindex="-1"><code>defineComponent</code> 的优势 <a class="header-anchor" href="#definecomponent-的优势" aria-label="Permalink to &quot;`defineComponent` 的优势&quot;">​</a></h4><ol><li><p><strong>类型推断支持</strong>：<code>defineComponent</code> 主要用于帮助 TypeScript 更好地推断组件的类型，避免类型不一致或类型检查问题。</p></li><li><p><strong>更简洁的语法</strong>：相比于传统的 Vue 2 语法，<code>defineComponent</code> 提供了更清晰的组件定义方式，尤其是在组合式 API 中。</p></li><li><p><strong>优化的类型推断</strong>：在复杂项目中，特别是使用 TypeScript 时，<code>defineComponent</code> 能显著提升开发体验，减少潜在的类型错误。</p></li><li><p><strong>向后兼容</strong>：尽管 Vue 3 强调组合式 API，但 <code>defineComponent</code> 仍然支持传统的选项式 API，这使得它可以兼容大量 Vue 2 风格的代码。</p></li></ol><h3 id="_3-h函数" tabindex="-1">3.h函数 <a class="header-anchor" href="#_3-h函数" aria-label="Permalink to &quot;3.h函数&quot;">​</a></h3><p>在 Vue 3 中，<code>h</code> 函数（也叫作 <code>createVNode</code> 函数）是一个核心的工具，用于以编程方式创建虚拟 DOM（VNode）。它是 Vue 3 响应性系统和渲染机制的关键部分，特别是在组合式 API 和 JSX 语法中，<code>h</code> 函数常用于动态生成模板。</p><h4 id="h-函数的基本语法" tabindex="-1"><code>h</code> 函数的基本语法 <a class="header-anchor" href="#h-函数的基本语法" aria-label="Permalink to &quot;`h` 函数的基本语法&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { h } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  type,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 元素类型，可以是字符串（例如 &#39;div&#39;）、组件、函数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  propsOrChildren,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 可选，元素的属性或子节点</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  children        </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 可选，子节点</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><h4 id="参数详解-1" tabindex="-1">参数详解 <a class="header-anchor" href="#参数详解-1" aria-label="Permalink to &quot;参数详解&quot;">​</a></h4><ol><li><p><strong><code>type</code></strong>：</p><ul><li>这是你想要创建的元素的类型。可以是一个字符串，表示标准 HTML 元素，例如 <code>&#39;div&#39;</code>、<code>&#39;span&#39;</code>。也可以是一个 Vue 组件，甚至是一个函数组件。</li><li>例子：<code>h(&#39;div&#39;)</code> 创建一个 <code>div</code> 元素；<code>h(MyComponent)</code> 创建一个 Vue 组件的实例。</li></ul></li><li><p><strong><code>propsOrChildren</code></strong>：</p><ul><li>这个参数可以是一个对象，表示传递给元素或组件的属性（props）。也可以是一个数组或字符串，表示子元素。</li><li>例子：<code>h(&#39;div&#39;, { id: &#39;app&#39;, class: &#39;container&#39; })</code> 创建一个带有 <code>id</code> 和 <code>class</code> 的 <code>div</code> 元素。</li></ul></li><li><p><strong><code>children</code></strong>：</p><ul><li>这个参数通常用于指定子节点。它可以是一个字符串、数组或函数。如果 <code>propsOrChildren</code> 已经是一个数组或字符串，<code>children</code> 将被忽略。</li><li>例子：<code>h(&#39;div&#39;, {}, &#39;Hello World&#39;)</code> 创建一个包含文本 &quot;Hello World&quot; 的 <code>div</code> 元素。</li></ul></li></ol><h4 id="基本使用示例" tabindex="-1">基本使用示例 <a class="header-anchor" href="#基本使用示例" aria-label="Permalink to &quot;基本使用示例&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { h } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">() </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }, [</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;h1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {}, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Hello Vue 3!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, { class: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;intro&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;This is a simple example of using h function.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ]);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">}</span></span></code></pre></div><p>在这个示例中，<code>render</code> 函数直接返回了一个通过 <code>h</code> 函数创建的 VNode。这个 VNode 表示了一个包含标题和段落的 <code>div</code> 元素。</p><h4 id="在组合式-api-中使用-h" tabindex="-1">在组合式 API 中使用 <code>h</code> <a class="header-anchor" href="#在组合式-api-中使用-h" aria-label="Permalink to &quot;在组合式 API 中使用 `h`&quot;">​</a></h4><p>在 Vue 3 的组合式 API 中，<code>h</code> 函数非常有用，特别是在使用 <code>setup</code> 函数时，你可以直接返回一个渲染函数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { h, defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">({</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">() </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }, [</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;h1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {}, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Rendered with setup!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {}, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;This uses the render function returned by setup.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ]);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">})</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h4 id="与-jsx-的关系" tabindex="-1">与 JSX 的关系 <a class="header-anchor" href="#与-jsx-的关系" aria-label="Permalink to &quot;与 JSX 的关系&quot;">​</a></h4><p>虽然 JSX 提供了一种更直观的模板编写方式，但背后实际上依赖于 <code>h</code> 函数来生成 VNode。例如，以下 JSX 代码：</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;Hello Vue 3!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;This is a JSX example.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  );</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><p>在编译阶段，它会被转换为等效的 <code>h</code> 函数调用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {}, [</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;h1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {}, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Hello Vue 3!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {}, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;This is a JSX example.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ]);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><h4 id="源码" tabindex="-1">源码 <a class="header-anchor" href="#源码" aria-label="Permalink to &quot;源码&quot;">​</a></h4><p><img src="' + _imports_2 + '" alt="image-20240904221748332"></p><h4 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h4><ul><li><strong>动态生成模板</strong>：当需要在运行时动态生成模板时，例如根据某些条件渲染不同的内容，<code>h</code> 函数提供了更灵活的方式。</li><li><strong>无模板组件</strong>：在某些场景下，尤其是需要高度动态的组件时，<code>h</code> 函数允许你完全控制组件的渲染内容而无需使用模板。</li><li><strong>与 JSX 结合</strong>：JSX 是一种更加直观的写法，但仍依赖 <code>h</code> 函数。在需要更接近 JavaScript 的开发风格时，<code>h</code> 函数和 JSX 是强大的组合。</li></ul><h3 id="_4-render函数" tabindex="-1">4.render函数 <a class="header-anchor" href="#_4-render函数" aria-label="Permalink to &quot;4.render函数&quot;">​</a></h3><p><code>defineComponent</code> 允许你在组件定义中使用 <code>render</code> 函数。<code>render</code> 函数是 Vue 组件中用于生成虚拟 DOM (VNode) 的函数，在 <code>defineComponent</code> 中，你可以使用它来完全自定义组件的渲染逻辑。</p><h4 id="render-函数的使用" tabindex="-1"><code>render</code> 函数的使用 <a class="header-anchor" href="#render-函数的使用" aria-label="Permalink to &quot;`render` 函数的使用&quot;">​</a></h4><p><code>render</code> 函数直接返回一个由 <code>h</code> 函数生成的 VNode，这与 Vue 2 中的 <code>render</code> 函数类似，但在 Vue 3 中，结合 <code>defineComponent</code> 使用时，它更为灵活且易于结合组合式 API。</p><h4 id="语法示例" tabindex="-1">语法示例 <a class="header-anchor" href="#语法示例" aria-label="Permalink to &quot;语法示例&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { defineComponent, h } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  props: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    msg: String</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">() </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, { class: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;my-component&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }, [</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;h1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {}, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;This is rendered with a render function&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {}, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">`Message: ${</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">msg</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ]);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">})</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><h4 id="详细说明" tabindex="-1">详细说明 <a class="header-anchor" href="#详细说明" aria-label="Permalink to &quot;详细说明&quot;">​</a></h4><ol><li><p><strong><code>props</code></strong>：</p><ul><li><code>render</code> 函数可以通过 <code>this</code> 访问组件的 <code>props</code>，例如 <code>this.msg</code>。</li><li>在上面的例子中，<code>msg</code> 是一个通过 <code>props</code> 传递给组件的字符串。</li></ul></li><li><p><strong><code>h</code> 函数</strong>：</p><ul><li><code>render</code> 函数的核心是使用 <code>h</code> 函数来构建 VNode。<code>h</code> 函数接受三个参数：元素类型、属性和子元素。</li><li>在例子中，<code>h(&#39;div&#39;, { class: &#39;my-component&#39; }, [...])</code> 创建了一个 <code>div</code> 元素，并且它包含了一个 <code>h1</code> 和一个 <code>p</code> 元素。</li></ul></li><li><p><strong><code>this</code> 访问</strong>：</p><ul><li><code>render</code> 函数内的 <code>this</code> 指向组件实例，你可以访问组件的 <code>props</code>、<code>data</code>、<code>computed</code> 属性等。</li><li>例如，<code>this.msg</code> 直接获取了传入组件的 <code>msg</code> 属性。</li></ul></li></ol><h4 id="与模板相比的优势" tabindex="-1">与模板相比的优势 <a class="header-anchor" href="#与模板相比的优势" aria-label="Permalink to &quot;与模板相比的优势&quot;">​</a></h4><ul><li><strong>动态性</strong>：<code>render</code> 函数允许更高的动态性。你可以基于复杂的逻辑来生成不同的 VNode，而这在模板中可能比较麻烦。</li><li><strong>更接近 JavaScript</strong>：如果你习惯于 JavaScript 的编程风格，并且对 JSX 或模板不感兴趣，<code>render</code> 函数提供了完全用 JavaScript 编写渲染逻辑的能力。</li><li><strong>与组合式 API 更加契合</strong>：在 Vue 3 中，<code>render</code> 函数能够更好地与组合式 API 结合使用，因为 <code>setup</code> 函数返回的内容可以直接在 <code>render</code> 函数中使用。</li></ul><h4 id="render-与-setup-结合使用" tabindex="-1"><code>render</code> 与 <code>setup</code> 结合使用 <a class="header-anchor" href="#render-与-setup-结合使用" aria-label="Permalink to &quot;`render` 与 `setup` 结合使用&quot;">​</a></h4><p>你可以在 <code>setup</code> 中定义组件的逻辑，然后在 <code>render</code> 函数中使用这些逻辑。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { defineComponent, ref, h } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">({</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">() </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> increment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      count,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      increment</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">  </span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">() </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, { class: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;counter&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }, [</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {}, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">`Count: ${</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      h</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, { onClick: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.increment }, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Increment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ]);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">})</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>在这个例子中，<code>setup</code> 函数中定义的 <code>count</code> 和 <code>increment</code> 被 <code>render</code> 函数引用，用于动态渲染组件的内容。</p><p><img src="' + _imports_3 + '" alt="image-20240904223951199"></p><h3 id="_5-jsonscheme" tabindex="-1">5.JSONscheme <a class="header-anchor" href="#_5-jsonscheme" aria-label="Permalink to &quot;5.JSONscheme&quot;">​</a></h3><p><a href="https://ajv.nodejs.cn/" target="_blank" rel="noreferrer">Ajv 中文网 (nodejs.cn)</a></p><p><code>AJV</code>（Another JSON Validator）是一个快速的 JSON Schema 校验库，广泛用于对 JSON 数据进行验证，以确保数据结构、类型和约束条件符合预定义的 JSON Schema。AJV 支持 JSON Schema 的各种版本，尤其是草案 4、6、7 和 2019/2020 版本。</p><p>下面我们将详细介绍 <code>AJV</code> 的核心功能，包括基本用法、如何编写和使用 JSON Schema、验证机制、高级功能等。</p><h4 id="_1-ajv安装与基本用法" tabindex="-1">1. AJV安装与基本用法 <a class="header-anchor" href="#_1-ajv安装与基本用法" aria-label="Permalink to &quot;1. AJV安装与基本用法&quot;">​</a></h4><h5 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h5><p>在 Node.js 环境中，你可以使用 npm 或 yarn 安装 AJV：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ajv</span></span></code></pre></div><p>或者：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> ajv</span></span></code></pre></div><h5 id="简单示例" tabindex="-1">简单示例 <a class="header-anchor" href="#简单示例" aria-label="Permalink to &quot;简单示例&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 导入 AJV</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Ajv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ajv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建 AJV 实例</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> ajv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Ajv</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 定义 JSON Schema</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  properties: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    name: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    age: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;integer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, minimum: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  required: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  additionalProperties: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 待验证的 JSON 数据</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">25</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 编译 Schema</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> validate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ajv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(schema);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 验证数据</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> valid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> validate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (valid) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Valid data!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Invalid data:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, validate.errors);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在这个示例中：</p><ul><li>我们定义了一个简单的 Schema，要求对象中有 <code>name</code>（字符串类型）和 <code>age</code>（大于等于 18 的整数），并且不允许其他字段。</li><li>使用 AJV 的 <code>compile()</code> 函数将 Schema 编译成一个验证函数。</li><li>调用 <code>validate()</code> 来验证数据是否符合 Schema。如果不符合，AJV 会返回详细的错误信息。</li></ul><h4 id="_2-json-schema-的结构" tabindex="-1">2. JSON Schema 的结构 <a class="header-anchor" href="#_2-json-schema-的结构" aria-label="Permalink to &quot;2. JSON Schema 的结构&quot;">​</a></h4><p>JSON Schema 是一个用于定义 JSON 数据结构的标准，可以定义对象、数组、字符串、数字等类型，以及属性之间的约束关系。</p><h5 id="常见关键词" tabindex="-1">常见关键词 <a class="header-anchor" href="#常见关键词" aria-label="Permalink to &quot;常见关键词&quot;">​</a></h5><ul><li><strong><code>type</code></strong>：定义数据类型（如 <code>object</code>、<code>array</code>、<code>string</code>、<code>number</code>、<code>integer</code>）。</li><li><strong><code>properties</code></strong>：定义对象的属性。</li><li><strong><code>required</code></strong>：定义对象中必须存在的属性列表。</li><li><strong><code>additionalProperties</code></strong>：默认情况下，Schema 允许对象有额外的属性；通过将其设为 <code>false</code>，可以禁止额外属性。</li><li><strong><code>items</code></strong>：定义数组元素的类型。</li><li><strong><code>enum</code></strong>：指定一个属性只能取特定的值。</li><li><strong><code>minimum</code> 和 <code>maximum</code></strong>：用于约束数值类型的最小和最大值。</li><li><strong><code>minLength</code> 和 <code>maxLength</code></strong>：用于约束字符串的最小和最大长度。</li></ul><h5 id="复杂-schema-示例" tabindex="-1">复杂 Schema 示例 <a class="header-anchor" href="#复杂-schema-示例" aria-label="Permalink to &quot;复杂 Schema 示例&quot;">​</a></h5><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;integer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> },</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">&quot;minLength&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> },</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">&quot;format&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> },</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;roles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;array&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">      &quot;items&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">&quot;enum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;guest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] },</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">      &quot;minItems&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;required&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;additionalProperties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>这个 Schema 描述了一个对象，它必须包含 <code>id</code>、<code>name</code> 和 <code>email</code> 字段：</p><ul><li><code>id</code> 是整数类型，</li><li><code>name</code> 是字符串且长度至少为 1，</li><li><code>email</code> 必须是一个符合电子邮件格式的字符串，</li><li><code>roles</code> 是一个数组，数组元素只能是 <code>admin</code>、<code>user</code> 或 <code>guest</code>。</li></ul><h4 id="_3-ajv-的进阶功能" tabindex="-1">3. AJV 的进阶功能 <a class="header-anchor" href="#_3-ajv-的进阶功能" aria-label="Permalink to &quot;3. AJV 的进阶功能&quot;">​</a></h4><h5 id="_3-1-自定义关键字" tabindex="-1">3.1 自定义关键字 <a class="header-anchor" href="#_3-1-自定义关键字" aria-label="Permalink to &quot;3.1 自定义关键字&quot;">​</a></h5><p>AJV 允许定义自定义的关键字来扩展校验规则。假设你希望为对象中的某个字段添加更复杂的验证逻辑，比如验证一个日期是否大于当前日期：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> ajv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Ajv</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 添加自定义关键字</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ajv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">addKeyword</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;isFutureDate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  validate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">schema</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  errors: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  properties: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    eventDate: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, isFutureDate: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  required: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;eventDate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> validate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ajv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(schema);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> valid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> validate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({ eventDate: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2025-01-01&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(valid); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div><ul><li>使用 <code>addKeyword()</code> 添加自定义验证关键字 <code>isFutureDate</code>。</li><li>在自定义关键字的 <code>validate</code> 函数中，我们对数据进行逻辑判断，确保日期在未来。</li></ul><h5 id="_3-2-处理模式-patterns" tabindex="-1">3.2 处理模式（Patterns） <a class="header-anchor" href="#_3-2-处理模式-patterns" aria-label="Permalink to &quot;3.2 处理模式（Patterns）&quot;">​</a></h5><p>AJV 支持使用正则表达式来验证字符串字段，确保数据满足特定模式：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  properties: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    username: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, pattern: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;^[a-zA-Z0-9_]{3,15}$&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  required: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> validate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ajv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(schema);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> valid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> validate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({ username: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;user_123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(valid); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div><p><code>pattern</code> 关键字使用正则表达式来约束字符串值。这个 Schema 要求 <code>username</code> 字段必须由 3 到 15 个字母、数字或下划线组成。</p><h5 id="_3-3-异步验证与-ajv-errors" tabindex="-1">3.3 异步验证与 <code>ajv-errors</code> <a class="header-anchor" href="#_3-3-异步验证与-ajv-errors" aria-label="Permalink to &quot;3.3 异步验证与 `ajv-errors`&quot;">​</a></h5><p>AJV 支持异步验证，适用于需要通过异步 API（例如数据库查询）来验证数据的场景。你可以定义 <code>async</code> 关键字并在验证时返回 <code>Promise</code>。</p><p>此外，AJV 通过 <code>ajv-errors</code> 插件提供自定义错误消息功能，允许开发者为特定验证错误定义详细的错误提示。</p><h4 id="_4-实用功能" tabindex="-1">4. 实用功能 <a class="header-anchor" href="#_4-实用功能" aria-label="Permalink to &quot;4. 实用功能&quot;">​</a></h4><h5 id="_4-1-数据格式校验" tabindex="-1">4.1 数据格式校验 <a class="header-anchor" href="#_4-1-数据格式校验" aria-label="Permalink to &quot;4.1 数据格式校验&quot;">​</a></h5><p>AJV 内置了一些常见的数据格式校验，例如 <code>email</code>、<code>uri</code>、<code>date-time</code> 等。可以直接在 Schema 中使用 <code>format</code> 关键字来校验这些格式：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  properties: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    email: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, format: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  required: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> validate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ajv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(schema);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> valid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> validate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({ email: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;test@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(valid); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div><h5 id="_4-2-模式合并与引用-ref" tabindex="-1">4.2 模式合并与引用（<code>$ref</code>） <a class="header-anchor" href="#_4-2-模式合并与引用-ref" aria-label="Permalink to &quot;4.2 模式合并与引用（`$ref`）&quot;">​</a></h5><p>如果 Schema 非常复杂，可能会出现重复定义。为了减少重复，可以通过 <code>$ref</code> 引用外部的 Schema。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  properties: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    user: { $ref: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;#/definitions/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  definitions: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    user: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      properties: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        name: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        age: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;integer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      required: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> validate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ajv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(schema);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> valid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> validate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({ user: { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> } });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(valid); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div><h5 id="_4-3-错误信息处理" tabindex="-1">4.3 错误信息处理 <a class="header-anchor" href="#_4-3-错误信息处理" aria-label="Permalink to &quot;4.3 错误信息处理&quot;">​</a></h5><p>当验证失败时，AJV 会返回详细的错误信息，包括错误的路径、类型、预期值和实际值。这些信息可以用于更友好地显示验证错误。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">valid) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(validate.errors);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>错误输出类似于：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;instancePath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;/age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;schemaPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;#/properties/age/minimum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;keyword&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;minimum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;params&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">&quot;comparison&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;&gt;=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">&quot;limit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> },</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;must be &gt;= 18&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span></code></pre></div><h4 id="_5-format" tabindex="-1">5.format <a class="header-anchor" href="#_5-format" aria-label="Permalink to &quot;5.format&quot;">​</a></h4><p><code>format</code> 在 JSON Schema 中是用来校验字符串是否符合特定格式的。AJV 内置了多种常见的 <code>format</code>，比如 <code>email</code>、<code>uri</code>、<code>date-time</code> 等，来帮助确保数据的格式正确。举个例子：</p><h5 id="内置格式校验" tabindex="-1">内置格式校验 <a class="header-anchor" href="#内置格式校验" aria-label="Permalink to &quot;内置格式校验&quot;">​</a></h5><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">    &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">&quot;format&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#8DDB8C;">  &quot;required&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在这个例子里，<code>format: &quot;email&quot;</code> 会检查 <code>email</code> 字段是否是一个有效的电子邮件地址。如果传入的值是 <code>&quot;test@invalid&quot;</code>, 它将无法通过验证，因为它不是一个正确的电子邮件格式。</p><h5 id="常见内置的-format-关键字" tabindex="-1">常见内置的 <code>format</code> 关键字 <a class="header-anchor" href="#常见内置的-format-关键字" aria-label="Permalink to &quot;常见内置的 `format` 关键字&quot;">​</a></h5><p>AJV 支持的常见格式包括：</p><ul><li><strong><code>email</code></strong>: 检查是否是合法的电子邮件地址</li><li><strong><code>uri</code></strong>: 检查是否是有效的 URI</li><li><strong><code>date-time</code></strong>: 检查日期和时间格式（例如 <code>2024-09-05T15:15:00Z</code>）</li><li><strong><code>ipv4</code>/<code>ipv6</code></strong>: 检查是否是有效的 IP 地址</li></ul><p>这些内置格式通过简单的 <code>format</code> 关键字就能实现，不需要额外的逻辑。</p><h5 id="自定义-format" tabindex="-1">自定义 <code>format</code> <a class="header-anchor" href="#自定义-format" aria-label="Permalink to &quot;自定义 `format`&quot;">​</a></h5><p>有时候你可能需要验证的格式不在 AJV 内置的列表里，这时你可以使用自定义格式来校验。</p><h5 id="定义自定义-format" tabindex="-1">定义自定义 <code>format</code> <a class="header-anchor" href="#定义自定义-format" aria-label="Permalink to &quot;定义自定义 `format`&quot;">​</a></h5><p>自定义 <code>format</code> 通过 <code>addFormat()</code> 方法来定义。比如，假设你想验证一个字符串是否符合某种电话号码格式，可以这样做：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Ajv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ajv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> ajv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Ajv</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 添加自定义的电话号码格式</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ajv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">addFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;phone-number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">[0-9]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">{10}$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  properties: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    phone: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, format: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;phone-number&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  required: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;phone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 待验证的数据</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  phone: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1234567890&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 编译 Schema 并验证</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> validate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ajv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(schema);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> valid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> validate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (valid) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Valid phone number!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Invalid phone number:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, validate.errors);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在这里：</p><ul><li>我们使用正则表达式定义了一个 <code>phone-number</code> 格式，要求电话号码必须是 10 位数字。</li><li>使用 <code>ajv.addFormat()</code> 来添加这个自定义格式。</li><li>在 Schema 中，<code>phone</code> 字段使用我们自定义的 <code>phone-number</code> 格式来进行验证。</li></ul><h5 id="复杂的自定义-format" tabindex="-1">复杂的自定义 <code>format</code> <a class="header-anchor" href="#复杂的自定义-format" aria-label="Permalink to &quot;复杂的自定义 `format`&quot;">​</a></h5><p>如果正则表达式无法满足你的需求，<code>format</code> 还可以使用一个自定义函数来进行更复杂的校验逻辑。例如，验证字符串是否是某种特定结构的 ID：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ajv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">addFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;custom-id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  validate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 假设 ID 格式是两位字母加四位数字，如 AB1234</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">[A-Z]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">{2}</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">[0-9]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">{4}$</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> schema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  properties: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    id: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, format: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;custom-id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  required: [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> validate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ajv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(schema);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> valid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> validate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({ id: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;AB1234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> });</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(valid); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div><p>在这个例子中，我们定义了一个名为 <code>custom-id</code> 的格式，并且通过 <code>validate</code> 函数来校验该字符串是否匹配我们定义的 ID 规则（两位大写字母加四位数字）。</p><h5 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h5><ul><li><strong>内置 <code>format</code></strong> 用于快速验证常见格式，如 <code>email</code>、<code>date-time</code> 等。</li><li><strong>自定义 <code>format</code></strong> 允许你根据实际需求添加新的格式规则，比如电话号码或特定的 ID 格式。</li><li>你可以使用正则表达式或自定义函数来实现复杂的校验逻辑。</li></ul><p>通过 <code>format</code>，你能够确保 JSON 数据不仅结构正确，还能在格式上符合你的业务需求。</p><h4 id="_6-给组件添加类型" tabindex="-1">6.给组件添加类型<img src="' + _imports_4 + '" alt="image-20240907094518627"> <a class="header-anchor" href="#_6-给组件添加类型" aria-label="Permalink to &quot;6.给组件添加类型![image-20240907094518627](./assets/image-20240907094518627.png)&quot;">​</a></h4><p><img src="' + _imports_5 + '" alt="image-20240907094613276"></p>', 132);
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_ArticleMetadata = __unplugin_components_4;
  const _component_ClientOnly = resolveComponent("ClientOnly");
  return openBlock(), createElementBlock("div", null, [
    _hoisted_1,
    createVNode(_component_ClientOnly, null, {
      default: withCtx(() => {
        var _a, _b;
        return [
          (((_a = _ctx.$frontmatter) == null ? void 0 : _a.aside) ?? true) && (((_b = _ctx.$frontmatter) == null ? void 0 : _b.showArticleMetadata) ?? true) ? (openBlock(), createBlock(_component_ArticleMetadata, {
            key: 0,
            article: _ctx.$frontmatter
          }, null, 8, ["article"])) : createCommentVNode("", true)
        ];
      }),
      _: 1
    }),
    _hoisted_2
  ]);
}
const _03____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _03____ as default
};
