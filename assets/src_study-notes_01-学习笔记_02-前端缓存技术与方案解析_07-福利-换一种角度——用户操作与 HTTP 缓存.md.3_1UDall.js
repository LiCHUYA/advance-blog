import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/20210907141210.jpg-22.DokluQv2.jpg";
const _imports_1 = "/advance-blog/assets/20210907143905.jpg-23.U2sVmDtE.jpg";
const _imports_2 = "/advance-blog/assets/20210907152933.jpg-24.Qm2sawn_.jpg";
const _imports_3 = "/advance-blog/assets/20210907172651.jpg-25.TmJ8XZsU.jpg";
const _imports_4 = "/advance-blog/assets/20211102144051.jpg-26.ZnEM9L8u.jpg";
const _imports_5 = "/advance-blog/assets/20210908214505.jpg-27.g8eqHLQw.jpg";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/07-福利-换一种角度——用户操作与 HTTP 缓存.md","filePath":"src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/07-福利-换一种角度——用户操作与 HTTP 缓存.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/07-福利-换一种角度——用户操作与 HTTP 缓存.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p>作为一名 Web 程序开发人员，我们脱离不了对浏览器的使用，在开发过程中时常需要<strong>刷新网页</strong>、<strong>清理浏览器缓存</strong>、<strong>打开控制台调试</strong>等等，即便作为一名普通的用户，其也离不开对浏览器的依赖，经常需要<strong>在浏览器地址栏输入对应的网址</strong>进行“网上冲浪”。</p><p>上述种种行为其实换一种角度来看，都可以和缓存有关，在认清上述行为与缓存的关系之前，我们有必要先吃透行为的载体——浏览器（以 Chrome 为例）。</p><h2 id="chrome-的三种加载模式" tabindex="-1">Chrome 的三种加载模式 <a class="header-anchor" href="#chrome-的三种加载模式" aria-label="Permalink to &quot;Chrome 的三种加载模式&quot;">​</a></h2><p>Chrome 具备三种加载模式，除了通过快捷键的方式触发，这三种模式只在开发者工具打开时才能够使用，此时我们打开开发者工具，在浏览器刷新按钮上右键鼠标便会展示这几种模式，如下图所示：</p><p><img src="' + _imports_0 + '" alt="20210907141210.jpg"></p><p>下面我们依次来进行介绍这三种模式：</p><h3 id="模式一-正常重新加载" tabindex="-1">模式一：正常重新加载 <a class="header-anchor" href="#模式一-正常重新加载" aria-label="Permalink to &quot;模式一：正常重新加载&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>// 快捷键</span></span>\n<span class="line"><span>Mac: Command + R</span></span>\n<span class="line"><span>Windows: Ctrl + R（等同于直接按 F5）</span></span></code></pre></div><p><strong>正常重新加载</strong>这种模式对于浏览器的用户来说都很熟悉，也是我们常说的“刷新网页”，和直接点击浏览器上的刷新按钮效果一样，用户触发该模式在控制台可以看到大多数资源会命中强缓存：</p><p><img src="' + _imports_1 + '" alt="20210907143905.jpg"></p><p>上图中刷新页面后大部分资源直接会从浏览器内存缓存（memory cache）中读取，这一现象我们会在后续章节中介绍。<strong>由此我们可以得出“正常重新加载”模式会优先读取缓存。</strong></p><h3 id="模式二-硬性重新加载" tabindex="-1">模式二：硬性重新加载 <a class="header-anchor" href="#模式二-硬性重新加载" aria-label="Permalink to &quot;模式二：硬性重新加载&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>// 快捷键</span></span>\n<span class="line"><span>Mac: Command + Shift + R</span></span>\n<span class="line"><span>Windows: Ctrl + Shift + R（等同于直接按 Ctrl + F5）</span></span></code></pre></div><p><strong>硬性重新加载</strong>模式强调的是“硬性”，可以理解为我们常说的“强制刷新网页”，比如当代码部署到服务器上后仍然访问的是“旧”页面时，很多人会习惯性的强制刷新一下（Ctrl + F5）便好了，而使用“正常重新加载”却无法解决。于是我们会以为硬性重新加载会清空缓存重新向服务器请求，这是一个误区，我们来观察下硬性重新加载后的控制台：</p><p><img src="' + _imports_2 + '" alt="20210907152933.jpg"></p><p>可以看到所有资源都重新向服务器获取，这个没有问题，但是检查下请求报头我们会发现，使用硬性重新加载后所有资源的请求首部都被加上了 <code>cache-control: no-cache</code> 和 <code>pragma: no-cache</code>，两者的作用都表示告知（代理）服务器不直接使用缓存，要求向源服务器发起请求，而 pragma 则是为了兼容 HTTP/1.0。</p><p>因此<strong>硬性重新加载并没有清空缓存，而是禁用缓存</strong>，其效果类似于在开发者工具 Network 面板勾选了 <code>Disable cache</code> 选项：</p><p><img src="' + _imports_3 + '" alt="20210907172651.jpg"></p><h3 id="模式三-清空缓存并硬性重新加载" tabindex="-1">模式三：清空缓存并硬性重新加载 <a class="header-anchor" href="#模式三-清空缓存并硬性重新加载" aria-label="Permalink to &quot;模式三：清空缓存并硬性重新加载&quot;">​</a></h3><p>该模式顾名思义，其比硬性重新加载多了清空缓存的操作，因此<strong>触发该操作会将浏览器存储的本地缓存都清空掉后再重新向服务器发送请求</strong>，同时其影响的并不是当前网站，所有访问过的网站缓存都将被清除。</p><p>介绍完了 Chrome 的三种加载模式，相信也顺其自然解释了用户的一些操作和缓存的密切联系，接着笔者又要开始提问了：<strong>有时候当我们使用硬性重新加载（Ctrl + F5）时，为什么有个别资源还是走了强缓存？</strong></p><p>读者可以在此思考一番，如果实在没有头绪就接着往下阅读。</p><h2 id="为什么-ctrl-f5-还是命中了缓存" tabindex="-1">为什么 Ctrl + F5 还是命中了缓存 <a class="header-anchor" href="#为什么-ctrl-f5-还是命中了缓存" aria-label="Permalink to &quot;为什么 Ctrl + F5 还是命中了缓存&quot;">​</a></h2><p>上述介绍了硬性重新加载时资源请求报头会加上特定的两个首部来重新向服务器发起请求，从而绕过了读取浏览器缓存，<strong>那么换种思路，如果资源在硬性重新加载后还是命中缓存，是不是就说明请求报头上并没有加上特定的两个首部？</strong></p><p>笔者通过观察和分析，发现那些命中缓存的资源都是随着页面渲染而加载的，而不走缓存的则是等待页面加载完通过脚本异步插入到 DOM 中去的，于是便得到了资源异步加载命中缓存不受硬性重新加载控制的猜想。为了验证这个猜想，我们不妨写一个 Demo 来进行试验：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;zh-CN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;Demo&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;异步资源&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        window.onload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">            setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                // 异步加载背景图片</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    a.style.backgroundImage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;url(https://aecpm.alicdn.com/simba/img/TB183NQapLM8KJjSZFBSutJHVXa.jpg)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                // 异步插入 JS 资源</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;script&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    s.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;text/javascript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    s.async </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    s.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;https://g.alicdn.com/mm/tanx-cdn/t/tanxssp.js?v=2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                    var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getElementsByTagName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;script&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    x.parentNode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">insertBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s, x);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        })</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><p>上述代码我们通过一个 1 秒的延时器异步加载了一张背景图片和一个 JS 资源，当在确保浏览器已经缓存了以上资源的前提下，我们采用硬性重新加载后来观察 Network 面板：</p><p><img src="' + _imports_4 + '" alt="20211102144051.jpg"></p><p>发现两者都命中了强缓存，同时两者的请求报头发现都没有被加上 <code>cache-control: no-cache</code> 和 <code>pragma: no-cache</code> 两个首部，于是猜想成立。</p><p>其实原因也很简单，因为硬性重新加载并没有清空缓存，当异步资源在页面加载完后插入时，其加载时仍然优先读取缓存，如果使用清空缓存并硬性重新加载便不会出现这种现象。</p><p><strong>tips：如果采用开发者工具 Network 面板勾选 <code>Disable cache</code> 选项方式，那么异步资源也不会读取缓存，原因是缓存被提前禁用了，这与硬性重新加载不同。</strong></p><p>最后细心的读者还会发现，还有一种资源比异步资源更加“顽固”，几乎永远都是 <code>from memory cache</code>，不管是首次加载还是清空缓存都不奏效，它便是 <code>base64</code> 图片。</p><p><img src="' + _imports_5 + '" alt="20210908214505.jpg"></p><p>这一现象可以这样解释：从本质上看 base64 图片其实就是一堆字符串，其伴随着页面的渲染而加载，浏览器会对其进行解析，会损耗一定的性能。按照浏览器的“节约原则”，我们可以得出以下结论：</p><blockquote><p>Base64 格式的图片被塞进 memory cache 可以视作浏览器为节省渲染开销的“自保行为”。</p></blockquote><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>本文从用户实际操作出发，以 Chrome 为例介绍了其三种加载模式与 HTTP 缓存间的关系。作为一名开发者，希望以上知识点能够帮助大家在日常的开发过程中进一步了解上述浏览器操作背后的秘密，正所谓“知己知彼，百战不殆”，只有吃透了行为的载体、缓存的宿主，遇到缓存带来的问题时才能够应对自如。</p>', 37);
const _hoisted_38 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_38);
}
const _07_________________HTTP___ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _07_________________HTTP___ as default
};
