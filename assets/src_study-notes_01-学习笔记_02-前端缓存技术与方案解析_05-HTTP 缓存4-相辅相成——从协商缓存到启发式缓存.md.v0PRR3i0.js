import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/协商缓存生效流程.png-14.D85vAlqm.jpg";
const _imports_1 = "/advance-blog/assets/20210831212257.jpg-15.VP8ou8Vd.jpg";
const _imports_2 = "/advance-blog/assets/20210930213501.jpg-16.qQMy2FDw.jpg";
const _imports_3 = "/advance-blog/assets/20210901214458.jpg-17.TWhnEqfF.jpg";
const _imports_4 = "/advance-blog/assets/20210901215128.jpg-18.Z89_PtDZ.jpg";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/05-HTTP 缓存4-相辅相成——从协商缓存到启发式缓存.md","filePath":"src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/05-HTTP 缓存4-相辅相成——从协商缓存到启发式缓存.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/02-前端缓存技术与方案解析/05-HTTP 缓存4-相辅相成——从协商缓存到启发式缓存.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p>接触了强缓存的“不善交际”，本文笔者将带大家认识“乐于沟通”的协商缓存。强缓存与协商缓存并不是两个相对独立的概念，两者其实有着密不可分的联系，从协商缓存的概念中我们便可略知一二。</p><blockquote><p>协商缓存可以看作是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程。</p></blockquote><p>由此可知，<strong>浏览器启用协商缓存的前提是强缓存失效</strong>，但是反过来强缓存失效并不一定导致浏览器启用协商缓存。下面我们来了解下协商缓存的生效流程。</p><h2 id="协商缓存的生效流程" tabindex="-1">协商缓存的生效流程 <a class="header-anchor" href="#协商缓存的生效流程" aria-label="Permalink to &quot;协商缓存的生效流程&quot;">​</a></h2><p>为了让大家更容易理解，笔者还是用流程图的方式来进行介绍，如下图所示：</p><p><img src="' + _imports_0 + '" alt="协商缓存生效流程.png"></p><p>图中，我们先经历了一段强缓存的失效流程：浏览器发起 HTTP 请求后浏览器缓存发现该请求的资源失效，便将其<strong>缓存标识</strong>返回给浏览器，于是浏览器携带该缓存标识向服务器发起 HTTP 请求，之后服务器根据该标识判断这个资源其实没有更新过，最终返回 <code>304</code> 给浏览器，浏览器收到无更新的响应后便转向浏览器缓存获取数据。</p><p>以上步骤阐述了关于协商缓存生效的流程，其经历了一次浏览器与服务器协商的过程，并最终返回 304 未更新来达到读取缓存的目的，我们可以通过下方更为生动的对话来理解协商缓存不同流程间的关系：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>小白：小黑，你几岁了？</span></span>\n<span class="line"><span>小黑：小白，我18岁了。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- - - - - - - - - - - - - - - - - - - - - - - -</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>小白：小黑 ，你几岁了？我猜你18岁了。</span></span>\n<span class="line"><span>小黑：靠，你知道还问我？（304）</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- - - - - - - - - - - - - - - - - - - - - - - -</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>小白：小黑 ，你几岁了？我猜你18岁了。</span></span>\n<span class="line"><span>小黑：小白 ，我19岁了。（200）</span></span></code></pre></div><p>从上至下小白与小黑的对话分别代表了浏览器与服务器间进行第一次数据请求、协商缓存生效及协商缓存失效的过程。</p><h2 id="缓存标识-last-modified-与-etag" tabindex="-1">缓存标识 Last-Modified 与 ETag <a class="header-anchor" href="#缓存标识-last-modified-与-etag" aria-label="Permalink to &quot;缓存标识 Last-Modified 与 ETag&quot;">​</a></h2><p>除了强缓存失效外，浏览器判断是否要走协商缓存还得借助上述提到的缓存标识：<code>last-modified</code>、<code>eTag</code>，这两个首部字段我们在前面章节已经有所介绍，它们是服务器响应请求时返回的报头首部，如下图所示：</p><p><img src="' + _imports_1 + '" alt="20210831212257.jpg"></p><p>eTag 的优先级要高于 last-modified，当两者同时出现时，只有 eTag 会生效。只要有这两个缓存标识之一，在强缓存失效后浏览器便会携带它们向服务器发起请求，携带方式如下图请求头所示：</p><p><img src="' + _imports_2 + '" alt="20210930213501.jpg"></p><p>其中 <code>if-modified-since</code> 对应 last-modified 的值，<code>if-none-match</code> 对应 eTag 的值。服务器根据优先级高的缓存标识的值进行判断。</p><p>倘若 eTag 对应的 if-none-match 不存在，那么服务器会将 last-modified 对应的 if-modified-since 的时间值与服务器该资源的最后修改时间进行对比，最后判断是否走协商缓存。</p><p><strong>那么 last-modified 有会什么弊端？服务器进行对比时一定精准吗？</strong></p><p>last-modified 是一个时间，最小单位为秒，试想一下，如果资源的修改时间非常快，快到毫秒级别，那么服务器会误认为该资源仍然是没有修改的，这便导致了资源无法在浏览器及时更新的现象。</p><p>另外还有一种情况，比如服务器资源确实被编辑了，但是其实资源的实质内容并没有被修改，那么服务器还是会返回最新的 last-modified 时间值，但是我们并不希望浏览器认为这个资源被修改而重新加载。</p><p>为了避免以上现象的发生，在特殊的场景下，我们便需要使用 eTag。</p><h2 id="etag-原理及实现" tabindex="-1">ETag 原理及实现 <a class="header-anchor" href="#etag-原理及实现" aria-label="Permalink to &quot;ETag 原理及实现&quot;">​</a></h2><p>那么相比 last-modified，eTag 到底有什么优势？回答这个问题前我们需要去了解 eTag 值的生成原理，而不同的后端语言对 eTag 有着多种处理方式，这里笔者将以 <code>node</code> 中下载量领先的 <a href="https://www.npmjs.com/package/etag" target="_blank" rel="noreferrer">etag</a> 包为例进行介绍。</p><p>eTag 包的源码十分简洁明了，其生成 eTag 值的方式有两种，<strong>第一种方式：使用文件大小和修改时间</strong>。</p><p><img src="' + _imports_3 + '" alt="20210901214458.jpg"></p><p>图中当判断所要处理的内容是文件 stats 对象时，将会采用上述方法生成 eTag 值，最后返回的值是由文件大小和文件最后一次修改时间组成的字符串。</p><p>而当内容非文件 stats 对象时，将采用<strong>第二种方式：使用文件内容的 hash 值和内容长度</strong>。</p><p><img src="' + _imports_4 + '" alt="20210901215128.jpg"></p><p>图中方法通过对内容的 hash 转化和截取，最终返回内容长度与其 hash 值组合成的字符串。</p><p>通过上述方法生成的 eTag 也被称为<strong>强 eTag 值</strong>，其不论实体发生多么细微的变化都会改变它的值。那么与其对立的便是<strong>弱 eTag 值</strong>，在 eTag 包源码中我们可以发现通过传递第二个参数 <code>weak</code> 值为 <code>true</code> 时便可启用弱校验。</p><blockquote><p>弱 ETag 值只适用于提示资源是否相同。只有资源发生了根本改变，产生差异时才会改变 ETag 值。这时会在字段值最开始处附加 W/。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>ETag: W/&quot;29322-09SpAhH3nXWd8KIVqB10hSSz66&quot;</span></span></code></pre></div><p>最终我们通过针对 eTag 原理及实现的分析，不难发现使用 eTag 服务器能够更加精准的分析资源的改变，同时浏览器也便能更加精准的控制缓存。</p><h2 id="彩蛋-启发式缓存" tabindex="-1">彩蛋：启发式缓存 <a class="header-anchor" href="#彩蛋-启发式缓存" aria-label="Permalink to &quot;彩蛋：启发式缓存&quot;">​</a></h2><p>在强缓存的介绍章节中，我们提到计算强缓存新鲜度的公式为：<code>缓存新鲜度 = max-age || (expires - date)</code>。</p><p>那么大家有没有想过如果响应报头中没有 max-age（s-maxage） 和 expires 这两个关键的字段值时，强缓存的新鲜度如何计算？</p><p>有读者可能会疑惑没有了强缓存的必要字段值，浏览器还会走强缓存吗？答案是肯定的。比如下方的响应报头：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>date: Thu, 02 Sep 2021 13:28:56 GMT</span></span>\n<span class="line"><span>age: 10467792</span></span>\n<span class="line"><span>cache-control: public</span></span>\n<span class="line"><span>last-modified: Mon, 26 Apr 2021 09:56:06 GMT</span></span></code></pre></div><p>以上报头中没有用来确定强缓存过期时间的字段，这便无法使用上面提到的缓存新鲜度公式，虽然有与协商缓存相关的 <code>last-modified</code> 首部，但并不会走协商缓存，反而<strong>浏览器会触发启发式缓存</strong>。启发式缓存对于缓存新鲜度计算公式如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>缓存新鲜度 = max(0,（date - last-modified)) * 10%</span></span></code></pre></div><p><strong>根据响应报头中 date 与 last-modified 值之差与 0 取最大值后取其值的百分之十作为缓存时间。</strong></p><p>启发式缓存比较容易被忽视，不了解启发式缓存的读者可能会因为这种默认的缓存模式而掉入坑里，百思不得其解，但是一旦你了解了浏览器触发启发式缓存的机制，那么很多缓存问题便会迎刃而解。</p><p>最后，笔者继续抛出一个问题：<strong>如果连 last-modified 都没有，缓存新鲜度为多少？</strong></p><p>这种情况其实非常少见，因为一个合理的资源必定是有合理的缓存首部的，但是万一服务器真的没有配置和返回怎么办，这个问题留给大家去思考下。</p><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>本文从协商缓存出发，带领大家认识了它的生效流程与不同阶段，相比强缓存，协商缓存有着它特有的首部字段和校验机制，同样在前端缓存策略中发挥着重要的作用，同时其与强缓存也相辅相成，优势互补，共同组成了 HTTP 缓存。</p>', 46);
const _hoisted_47 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_47);
}
const _05HTTP___4__________________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _05HTTP___4__________________ as default
};
