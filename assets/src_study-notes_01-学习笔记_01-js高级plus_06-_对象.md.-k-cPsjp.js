import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/01-js高级plus/06-_对象.md","filePath":"src/study-notes/01-学习笔记/01-js高级plus/06-_对象.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/01-js高级plus/06-_对象.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h3 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h3><p>对象是JavaScript中一个非常重要的概念，因为它可以将多个相关的数据封装在一起，更好地描述一个事物。JavaScript支持多种编程范式，包括<strong>函数式编程</strong>和<strong>面向对象编程</strong>。</p><h4 id="创建对象的方式" tabindex="-1">创建对象的方式 <a class="header-anchor" href="#创建对象的方式" aria-label="Permalink to &quot;创建对象的方式&quot;">​</a></h4><ol><li><p><strong>使用<code>Object</code>类创建对象</strong> 早期常用这种方式，结合<code>new</code>关键字来创建对象。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;malong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 22</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">study</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div></li><li><p><strong>使用对象字面量</strong> 这种方式更简洁，且内聚性更强，近年来更为流行。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> person1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;malong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  study</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div></li></ol><h4 id="对象属性操作的控制" tabindex="-1">对象属性操作的控制 <a class="header-anchor" href="#对象属性操作的控制" aria-label="Permalink to &quot;对象属性操作的控制&quot;">​</a></h4><h5 id="对象属性获取" tabindex="-1">对象属性获取 <a class="header-anchor" href="#对象属性获取" aria-label="Permalink to &quot;对象属性获取&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;zhangsan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: zhangsan</span></span></code></pre></div><h5 id="对象属性修改" tabindex="-1">对象属性修改 <a class="header-anchor" href="#对象属性修改" aria-label="Permalink to &quot;对象属性修改&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;zhangsan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">obj.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;malong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 修改属性值</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: malong</span></span></code></pre></div><h5 id="对象属性删除" tabindex="-1">对象属性删除 <a class="header-anchor" href="#对象属性删除" aria-label="Permalink to &quot;对象属性删除&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;zhangsan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj.age; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 删除 age 属性</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: { name: &quot;zhangsan&quot; }</span></span></code></pre></div><h5 id="对象属性遍历" tabindex="-1">对象属性遍历 <a class="header-anchor" href="#对象属性遍历" aria-label="Permalink to &quot;对象属性遍历&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.gender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;男&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;zhangsan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.avatar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;我的头像&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用 for...in 遍历对象属性，需过滤原型链上的属性</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">hasOwnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key)) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key, obj[key]);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 提示：for...of 适用于数组，且不会遍历原型链上的属性</span></span></code></pre></div><p>确实，在JavaScript中，使用 <code>Object.defineProperty</code> 或 <code>Object.defineProperties</code> 时，如果你定义了 <code>get</code> 或 <code>set</code> 访问器函数，就不能同时使用 <code>value</code> 和 <code>writable</code> 选项。下面我将详细解释这一点，并提供示例代码来帮助理解。</p><h3 id="属性描述符详解" tabindex="-1">属性描述符详解 <a class="header-anchor" href="#属性描述符详解" aria-label="Permalink to &quot;属性描述符详解&quot;">​</a></h3><p>JavaScript 中的属性描述符分为两类：</p><ol><li><strong>数据描述符（Data Descriptor）</strong>： <ul><li>包含一个值 (<code>value</code>) 和用于确定该值是否可写 (<code>writable</code>) 的属性。</li></ul></li><li><strong>存取描述符（Accessor Descriptor）</strong>： <ul><li>包含一对 <code>get</code> 和 <code>set</code> 函数，用于拦截对属性的访问和赋值操作。</li></ul></li></ol><p>这两类描述符不能混用。</p><h4 id="_1-数据描述符" tabindex="-1">1. 数据描述符 <a class="header-anchor" href="#_1-数据描述符" aria-label="Permalink to &quot;1. 数据描述符&quot;">​</a></h4><p>数据描述符包含以下属性：</p><ul><li><code>value</code>：属性的值，默认为 <code>undefined</code>。</li><li><code>writable</code>：表示属性是否可写（即是否可以修改 <code>value</code>），默认为 <code>false</code>。</li><li><code>enumerable</code>：表示属性是否可枚举，默认为 <code>false</code>。</li><li><code>configurable</code>：表示属性是否可以删除或重新定义，默认为 <code>false</code>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;dataProp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj.dataProp); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 42</span></span></code></pre></div><h4 id="_2-存取描述符" tabindex="-1">2. 存取描述符 <a class="header-anchor" href="#_2-存取描述符" aria-label="Permalink to &quot;2. 存取描述符&quot;">​</a></h4><p>存取描述符包含以下属性：</p><ul><li><code>get</code>：一个用于获取属性值的函数，默认值为 <code>undefined</code>。当访问属性时，这个函数会被调用。</li><li><code>set</code>：一个用于设置属性值的函数，默认值为 <code>undefined</code>。当设置属性值时，这个函数会被调用。</li><li><code>enumerable</code>：表示属性是否可枚举，默认为 <code>false</code>。</li><li><code>configurable</code>：表示属性是否可以删除或重新定义，默认为 <code>false</code>。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {};</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> internalValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;accessorProp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Getter called&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> internalValue;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Setter called&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    internalValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj.accessorProp); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 42 并调用getter</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">obj.accessorProp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 调用setter</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj.accessorProp); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 100 并调用getter</span></span></code></pre></div><h4 id="_3-数据描述符与存取描述符的互斥性" tabindex="-1">3. 数据描述符与存取描述符的互斥性 <a class="header-anchor" href="#_3-数据描述符与存取描述符的互斥性" aria-label="Permalink to &quot;3. 数据描述符与存取描述符的互斥性&quot;">​</a></h4><p>当定义属性时，<strong>数据描述符</strong>和<strong>存取描述符</strong>是互斥的。如果你尝试在同一属性描述符中同时使用 <code>value</code> 或 <code>writable</code>（数据描述符的属性）与 <code>get</code> 或 <code>set</code>（存取描述符的属性），JavaScript 会抛出错误。</p><h5 id="示例-错误的组合" tabindex="-1">示例：错误的组合 <a class="header-anchor" href="#示例-错误的组合" aria-label="Permalink to &quot;示例：错误的组合&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;invalidProp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute</span></span></code></pre></div><h5 id="正确的使用方式" tabindex="-1">正确的使用方式 <a class="header-anchor" href="#正确的使用方式" aria-label="Permalink to &quot;正确的使用方式&quot;">​</a></h5><p>你必须选择一种描述符，要么使用数据描述符，要么使用存取描述符，但不能混合两者。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 数据描述符</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;validDataProp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 存取描述符</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;validAccessorProp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 设置逻辑</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><ul><li><strong>数据描述符</strong>用于静态值属性的定义，它们使用 <code>value</code> 和 <code>writable</code>。</li><li><strong>存取描述符</strong>用于动态计算属性值，使用 <code>get</code> 和 <code>set</code>。</li><li>不能将数据描述符和存取描述符的属性混用，否则会导致错误。</li></ul><h5 id="获取对象属性描述符" tabindex="-1">获取对象属性描述符 <a class="header-anchor" href="#获取对象属性描述符" aria-label="Permalink to &quot;获取对象属性描述符&quot;">​</a></h5><p>可以使用<code>Object.getOwnPropertyDescriptor</code>或<code>Object.getOwnPropertyDescriptors</code>获取属性描述符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getOwnPropertyDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取单个属性描述符</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getOwnPropertyDescriptors</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取整个对象的属性描述符</span></span></code></pre></div><h5 id="object的其他一些方法" tabindex="-1"><code>Object</code>的其他一些方法 <a class="header-anchor" href="#object的其他一些方法" aria-label="Permalink to &quot;`Object`的其他一些方法&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;malong&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1. 禁止对象添加新属性</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">preventExtensions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">obj.xxx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;xxx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 无法添加</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj.xxx); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: undefined</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2. 使用 for...of 遍历对象的键值对</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [key, value] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj)) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key, value);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 3. 禁止对象属性的配置/删除 (for...of)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [key, value] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj)) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, key, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    value: value</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 4. 禁止对象属性的配置/删除 (for...in)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">hasOwnProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key)) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, key, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      value: obj[key]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 5. 密封对象，禁止删除属性 (configurable = false)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">seal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 6. 冻结对象，禁止修改属性值 (writable = false)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">freeze</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 7. 获取对象的长度</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj).</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出属性个数</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 8. 获取对象的所有自身属性描述符</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getOwnPropertyDescriptors</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj));</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ol><li><strong>优化了代码结构</strong>：清晰地组织了代码，使用现代JavaScript语法如<code>let</code>和<code>const</code>，并添加了详细注释。</li><li><strong>提升了代码可读性</strong>：通过简洁的语法和合适的注释，使得代码易于理解和维护。</li><li><strong>涵盖了对象的关键操作</strong>：包括属性的创建、修改、删除、遍历，以及属性描述符的使用。</li></ol><p>这些优化使得代码更加简洁、易读，并适合在实际开发中使用。</p>', 42);
const _hoisted_43 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_43);
}
const _06___ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _06___ as default
};
