import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/01-js高级plus/08-_js中零碎知识(with,eval).md","filePath":"src/study-notes/01-学习笔记/01-js高级plus/08-_js中零碎知识(with,eval).md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/01-js高级plus/08-_js中零碎知识(with,eval).md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h3 id="javascript-中的-with、eval-和严格模式-use-strict" tabindex="-1">JavaScript 中的 <code>with</code>、<code>eval</code> 和严格模式（<code>use strict</code>） <a class="header-anchor" href="#javascript-中的-with、eval-和严格模式-use-strict" aria-label="Permalink to &quot;JavaScript 中的 `with`、`eval` 和严格模式（`use strict`）&quot;">​</a></h3><p>这三部分在 JavaScript 中有着独特的作用与各自的限制。以下是详细的讲解及知识扩展。</p><hr><h2 id="_1-with-语句" tabindex="-1">1. <code>with</code> 语句 <a class="header-anchor" href="#_1-with-语句" aria-label="Permalink to &quot;1. `with` 语句&quot;">​</a></h2><h3 id="作用" tabindex="-1"><strong>作用</strong> <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;**作用**&quot;">​</a></h3><p><code>with</code> 语句用于将一个对象的属性直接提升为当前作用域中的局部变量，使得可以简化对对象属性的访问。</p><h3 id="示例代码" tabindex="-1"><strong>示例代码</strong> <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;**示例代码**&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;  </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;malong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    message: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;malong obj&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用 with 语句</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(message); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// this指向为obj,打印 &quot;malong obj&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="运行机制" tabindex="-1"><strong>运行机制</strong> <a class="header-anchor" href="#运行机制" aria-label="Permalink to &quot;**运行机制**&quot;">​</a></h3><p>在上面的例子中，<code>with(obj)</code> 创建了一个新的作用域，其中 <code>obj</code> 对象的属性可以直接使用。如果对象中存在与当前作用域中相同名称的属性，那么 <code>with</code> 中的变量优先级更高。</p><h4 id="解释" tabindex="-1"><strong>解释</strong> <a class="header-anchor" href="#解释" aria-label="Permalink to &quot;**解释**&quot;">​</a></h4><p>在 <code>with(obj)</code> 的作用域中，<code>message</code> 的值取自 <code>obj.message</code>，所以输出结果为 <code>&quot;malong obj&quot;</code>。</p><h3 id="为什么不推荐使用-with" tabindex="-1"><strong>为什么不推荐使用 <code>with</code>？</strong> <a class="header-anchor" href="#为什么不推荐使用-with" aria-label="Permalink to &quot;**为什么不推荐使用 `with`？**&quot;">​</a></h3><ol><li><strong>代码混淆</strong>：<code>with</code> 语句让变量的来源变得不清晰，增加了代码的复杂度，难以维护和调试。</li><li><strong>性能问题</strong>：<code>with</code> 语句使得 JavaScript 引擎在解析作用域链时变得更加复杂，导致性能下降。</li><li><strong>严格模式禁止使用</strong>：在严格模式下，<code>with</code> 语句是被禁止的。</li></ol><h3 id="推荐替代方案" tabindex="-1"><strong>推荐替代方案</strong> <a class="header-anchor" href="#推荐替代方案" aria-label="Permalink to &quot;**推荐替代方案**&quot;">​</a></h3><p>尽量避免使用 <code>with</code>，可以使用更明确的属性访问方式，例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj.message); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 打印 &quot;malong obj&quot;</span></span></code></pre></div><hr><h2 id="_2-eval-函数" tabindex="-1">2. <code>eval</code> 函数 <a class="header-anchor" href="#_2-eval-函数" aria-label="Permalink to &quot;2. `eval` 函数&quot;">​</a></h2><h3 id="作用-1" tabindex="-1"><strong>作用</strong> <a class="header-anchor" href="#作用-1" aria-label="Permalink to &quot;**作用**&quot;">​</a></h3><p><code>eval</code> 是一个特殊的 JavaScript 函数，它可以将传入的字符串当作 JavaScript 代码来执行。</p><h3 id="示例代码-1" tabindex="-1"><strong>示例代码</strong> <a class="header-anchor" href="#示例代码-1" aria-label="Permalink to &quot;**示例代码**&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;var msg = &quot;test&quot;; console.log(&quot;malong &quot; + msg)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(str); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 &quot;malong test&quot;</span></span></code></pre></div><h3 id="使用-eval-的问题" tabindex="-1"><strong>使用 <code>eval</code> 的问题</strong> <a class="header-anchor" href="#使用-eval-的问题" aria-label="Permalink to &quot;**使用 `eval` 的问题**&quot;">​</a></h3><ol><li><strong>安全风险</strong>：<code>eval</code> 允许执行动态代码，可能会被恶意代码利用，带来严重的安全隐患。例如，如果 <code>str</code> 的内容是用户输入的，攻击者可以注入恶意代码。</li><li><strong>可读性差</strong>：动态执行代码使得代码流难以追踪，降低了代码的可维护性。</li><li><strong>性能问题</strong>：<code>eval</code> 会强制 JavaScript 引擎使用解释器模式来执行代码，无法进行编译器优化，导致性能较差。</li></ol><h3 id="推荐替代方案-1" tabindex="-1"><strong>推荐替代方案</strong> <a class="header-anchor" href="#推荐替代方案-1" aria-label="Permalink to &quot;**推荐替代方案**&quot;">​</a></h3><p>在大多数情况下，可以使用更安全和高效的方法来实现相同的功能，比如通过对象属性或函数调用来实现动态行为。</p><hr><h2 id="_3-严格模式-use-strict" tabindex="-1">3. 严格模式（<code>use strict</code>） <a class="header-anchor" href="#_3-严格模式-use-strict" aria-label="Permalink to &quot;3. 严格模式（`use strict`）&quot;">​</a></h2><h3 id="作用-2" tabindex="-1"><strong>作用</strong> <a class="header-anchor" href="#作用-2" aria-label="Permalink to &quot;**作用**&quot;">​</a></h3><p>严格模式（<code>use strict</code>）是一种更加严格的 JavaScript 模式，它通过抛出错误和禁用一些不安全或不推荐的特性，使代码更加安全和规范。</p><h3 id="分类" tabindex="-1"><strong>分类</strong> <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;**分类**&quot;">​</a></h3><ol><li><p><strong>全局严格模式</strong>：</p><ul><li>可以在文件开头使用 <code>&quot;use strict&quot;;</code> 启用全局严格模式。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 全局严格模式生效</span></span></code></pre></div></li><li><p><strong>局部严格模式</strong>：</p><ul><li>只在函数内部启用严格模式。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 仅在该函数内启用严格模式</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li></ol><h3 id="严格模式的好处" tabindex="-1"><strong>严格模式的好处</strong> <a class="header-anchor" href="#严格模式的好处" aria-label="Permalink to &quot;**严格模式的好处**&quot;">​</a></h3><ol><li><strong>消除隐式错误</strong>：严格模式会抛出一些原本被忽略的静默错误，如意外创建的全局变量等。</li><li><strong>提高代码安全性</strong>：它禁用了 <code>with</code> 语句、限制了 <code>eval</code> 的使用，并防止了一些不安全的操作。</li><li><strong>优化性能</strong>：严格模式减少了 JavaScript 引擎需要处理的特殊情况，允许引擎进行更多的优化。</li></ol><h3 id="严格模式的限制" tabindex="-1"><strong>严格模式的限制</strong> <a class="header-anchor" href="#严格模式的限制" aria-label="Permalink to &quot;**严格模式的限制**&quot;">​</a></h3><h4 id="_1-无法意外创建全局变量" tabindex="-1">1. <strong>无法意外创建全局变量</strong> <a class="header-anchor" href="#_1-无法意外创建全局变量" aria-label="Permalink to &quot;1. **无法意外创建全局变量**&quot;">​</a></h4><p>在非严格模式下，未声明的变量会自动变为全局变量，但在严格模式下会抛出错误：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 抛出 ReferenceError: str is not defined</span></span></code></pre></div><h4 id="_2-静默失败变为错误" tabindex="-1">2. <strong>静默失败变为错误</strong> <a class="header-anchor" href="#_2-静默失败变为错误" aria-label="Permalink to &quot;2. **静默失败变为错误**&quot;">​</a></h4><p>一些静默失败的操作在严格模式下会抛出异常，例如给不可写的属性赋值：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, { writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">obj.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;newName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 抛出 TypeError</span></span></code></pre></div><h4 id="_3-禁用八进制语法" tabindex="-1">3. <strong>禁用八进制语法</strong> <a class="header-anchor" href="#_3-禁用八进制语法" aria-label="Permalink to &quot;3. **禁用八进制语法**&quot;">​</a></h4><p>严格模式下不允许使用旧的八进制语法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0123</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 抛出 SyntaxError</span></span></code></pre></div><p>应使用 <code>0o</code> 表示八进制：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0o123</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 正确</span></span></code></pre></div><h4 id="_4-禁止使用重复的函数参数" tabindex="-1">4. <strong>禁止使用重复的函数参数</strong> <a class="header-anchor" href="#_4-禁止使用重复的函数参数" aria-label="Permalink to &quot;4. **禁止使用重复的函数参数**&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 抛出 SyntaxError</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="_5-禁用-with-语句" tabindex="-1">5. <strong>禁用 <code>with</code> 语句</strong> <a class="header-anchor" href="#_5-禁用-with-语句" aria-label="Permalink to &quot;5. **禁用 `with` 语句**&quot;">​</a></h4><p>严格模式下，<code>with</code> 语句被完全禁用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (obj) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 抛出 SyntaxError</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="_6-eval-不再引用上层作用域" tabindex="-1">6. <strong><code>eval</code> 不再引用上层作用域</strong> <a class="header-anchor" href="#_6-eval-不再引用上层作用域" aria-label="Permalink to &quot;6. **`eval` 不再引用上层作用域**&quot;">​</a></h4><p>在严格模式下，<code>eval</code> 执行的代码无法访问或修改外部作用域的变量：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;var msg = &quot;test&quot;; console.log(msg)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eval</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(str); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 正常执行</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(msg); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 抛出 ReferenceError: msg is not defined</span></span></code></pre></div><h4 id="_7-this-不再默认指向全局对象" tabindex="-1">7. <strong><code>this</code> 不再默认指向全局对象</strong> <a class="header-anchor" href="#_7-this-不再默认指向全局对象" aria-label="Permalink to &quot;7. **`this` 不再默认指向全局对象**&quot;">​</a></h4><p>在非严格模式下，如果函数中的 <code>this</code> 没有绑定任何对象，它会默认指向全局对象（如 <code>window</code>）。在严格模式下，<code>this</code> 会变成 <code>undefined</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;use strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// undefined</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><hr><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><strong><code>with</code> 语句</strong> 提供了在作用域链中插入对象的功能，但容易引发混淆和性能问题，不推荐使用。</li><li><strong><code>eval</code> 函数</strong> 允许动态执行字符串代码，但存在安全和性能问题，应避免使用。</li><li><strong>严格模式（<code>use strict</code>）</strong> 提供了更安全和高效的编码方式，通过禁用不安全特性和改进错误处理来提高代码质量。</li></ul>', 61);
const _hoisted_62 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_62);
}
const _08_js______with_eval_ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _08_js______with_eval_ as default
};
