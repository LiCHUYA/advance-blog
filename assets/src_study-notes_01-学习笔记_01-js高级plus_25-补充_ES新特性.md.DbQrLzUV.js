import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/image-20240825171212910.VlhtMR6s.png";
const _imports_1 = "/advance-blog/assets/image-20240825171430446.uRnWUbr-.png";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/01-js高级plus/25-补充_ES新特性.md","filePath":"src/study-notes/01-学习笔记/01-js高级plus/25-补充_ES新特性.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/01-js高级plus/25-补充_ES新特性.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p>ECMAScript（简称ES）是JavaScript的标准化规范，每个版本的ECMAScript标准都会带来新的功能和特性。ES7到ES15这几个版本引入了许多重要的新特性，下面将详细介绍这些特性。</p><h3 id="es7-ecmascript-2016" tabindex="-1"><strong>ES7 (ECMAScript 2016)</strong> <a class="header-anchor" href="#es7-ecmascript-2016" aria-label="Permalink to &quot;**ES7 (ECMAScript 2016)**&quot;">​</a></h3><h4 id="_1-指数运算符" tabindex="-1">1. <strong>指数运算符 (<code>**</code>)</strong> <a class="header-anchor" href="#_1-指数运算符" aria-label="Permalink to &quot;1. **指数运算符 (`**`)**&quot;">​</a></h4><ul><li>该运算符是对数学运算的扩展，用于计算一个数的幂。用法类似于其他编程语言中的<code>pow</code>函数。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> **</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 8</span></span></code></pre></div></li></ul><h4 id="_2-array-prototype-includes" tabindex="-1">2. <strong><code>Array.prototype.includes()</code></strong> <a class="header-anchor" href="#_2-array-prototype-includes" aria-label="Permalink to &quot;2. **`Array.prototype.includes()`**&quot;">​</a></h4><ul><li>该方法用于检查数组中是否包含某个特定值，返回布尔值。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div></li></ul><h3 id="es8-ecmascript-2017" tabindex="-1"><strong>ES8 (ECMAScript 2017)</strong> <a class="header-anchor" href="#es8-ecmascript-2017" aria-label="Permalink to &quot;**ES8 (ECMAScript 2017)**&quot;">​</a></h3><h4 id="_1-object-values-和-object-entries" tabindex="-1">1. <strong><code>Object.values()</code> 和 <code>Object.entries()</code></strong> <a class="header-anchor" href="#_1-object-values-和-object-entries" aria-label="Permalink to &quot;1. **`Object.values()` 和 `Object.entries()`**&quot;">​</a></h4><ul><li><code>Object.values()</code> 返回对象所有可枚举属性的值。</li><li><code>Object.entries()</code> 返回对象所有可枚举属性的键值对数组。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// [1, 2]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// [[&#39;a&#39;, 1], [&#39;b&#39;, 2]]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;cba&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;nba&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]))</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;cba&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;nba&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]))</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//[[&quot;0&quot;,&quot;abc&quot;]]索引值为key</span></span></code></pre></div></li></ul><h4 id="_2-字符串填充-padstart-和-padend" tabindex="-1">2. <strong>字符串填充 (<code>padStart()</code> 和 <code>padEnd()</code>)</strong> <a class="header-anchor" href="#_2-字符串填充-padstart-和-padend" aria-label="Permalink to &quot;2. **字符串填充 (`padStart()` 和 `padEnd()`)**&quot;">​</a></h4><ul><li><code>padStart()</code> 用于在字符串<code>开头</code>填充指定字符到达特定长度。</li><li><code>padEnd()</code> 用于在字符串<code>结尾</code>填充指定字符到达特定长度。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Hello World&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> newMessage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">padEnd</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//***...Hello World-----....</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(newMessage)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 案例</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> cardNumber</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;321324234242342342341312&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> lastFourCard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cardNumber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> finalCard</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lastFourCard.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cardNumber.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(finalCard)</span></span></code></pre></div></li></ul><h4 id="_3-async-await" tabindex="-1">3. <strong><code>async/await</code></strong> <a class="header-anchor" href="#_3-async-await" aria-label="Permalink to &quot;3. **`async/await`**&quot;">​</a></h4><ul><li>该特性允许我们以更简洁和同步的方式编写异步代码。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li></ul><p><img src="' + _imports_0 + '" alt="image-20240825171212910"></p><h3 id="es9-ecmascript-2018" tabindex="-1"><strong>ES9 (ECMAScript 2018)</strong> <a class="header-anchor" href="#es9-ecmascript-2018" aria-label="Permalink to &quot;**ES9 (ECMAScript 2018)**&quot;">​</a></h3><h4 id="_1-异步迭代器-for-await-of" tabindex="-1">1. <strong>异步迭代器 (<code>for-await-of</code>)</strong> <a class="header-anchor" href="#_1-异步迭代器-for-await-of" aria-label="Permalink to &quot;1. **异步迭代器 (`for-await-of`)**&quot;">​</a></h4><ul><li>允许对异步可迭代对象进行迭代。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">array</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> array) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(i);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li></ul><h4 id="_2-对象的-rest-spread-属性" tabindex="-1">2. <strong>对象的 Rest/Spread 属性</strong> <a class="header-anchor" href="#_2-对象的-rest-spread-属性" aria-label="Permalink to &quot;2. **对象的 Rest/Spread 属性**&quot;">​</a></h4><ul><li>Rest 操作符用于提取对象中的剩余属性。</li><li>Spread 操作符用于展开对象的属性。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { a, b, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">rest } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, d: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(rest); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// { c: 3, d: 4 }</span></span></code></pre></div></li></ul><h4 id="_3-正则表达式改进" tabindex="-1">3. <strong>正则表达式改进</strong> <a class="header-anchor" href="#_3-正则表达式改进" aria-label="Permalink to &quot;3. **正则表达式改进**&quot;">​</a></h4><ul><li>具有 <code>s</code> 标志的 dotAll 模式，使 <code>.</code> 能够匹配任何字符（包括换行符）。</li><li>正则表达式命名捕获组，允许为捕获组命名。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> re </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> /(?&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">year</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">{4}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">)-(?&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">month</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">)-(?&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">day</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">{2}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">)/</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> re.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;2024-08-25&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(result.groups.year); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2024</span></span></code></pre></div></li></ul><h3 id="es10-ecmascript-2019" tabindex="-1"><strong>ES10 (ECMAScript 2019)</strong> <a class="header-anchor" href="#es10-ecmascript-2019" aria-label="Permalink to &quot;**ES10 (ECMAScript 2019)**&quot;">​</a></h3><p><img src="' + _imports_1 + '" alt="image-20240825171430446"></p><h4 id="_1-array-prototype-flat-和-array-prototype-flatmap" tabindex="-1">1. <strong><code>Array.prototype.flat()</code> 和 <code>Array.prototype.flatMap()</code></strong> <a class="header-anchor" href="#_1-array-prototype-flat-和-array-prototype-flatmap" aria-label="Permalink to &quot;1. **`Array.prototype.flat()` 和 `Array.prototype.flatMap()`**&quot;">​</a></h4><ul><li><code>flat()</code> 方法用于将多维数组展平为一维数组。</li><li><code>flatMap()</code> 方法首先映射每个元素，然后将结果压平成一个新数组。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]]]];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">flat</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// [1, 2, 3, [4]]</span></span></code></pre></div></li></ul><h4 id="_2-object-fromentries" tabindex="-1">2. <strong><code>Object.fromEntries()</code></strong> <a class="header-anchor" href="#_2-object-fromentries" aria-label="Permalink to &quot;2. **`Object.fromEntries()`**&quot;">​</a></h4><ul><li>该方法将键值对列表转换为对象。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> entries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]];</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fromEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(entries);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// { a: 1, b: 2 }</span></span></code></pre></div></li></ul><h4 id="_3-string-prototype-trimstart-和-string-prototype-trimend" tabindex="-1">3. <strong><code>String.prototype.trimStart()</code> 和 <code>String.prototype.trimEnd()</code></strong> <a class="header-anchor" href="#_3-string-prototype-trimstart-和-string-prototype-trimend" aria-label="Permalink to &quot;3. **`String.prototype.trimStart()` 和 `String.prototype.trimEnd()`**&quot;">​</a></h4><ul><li>这两个方法用于去除字符串开头和结尾的空格。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;  hello  &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">trimStart</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &#39;hello  &#39;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;  hello  &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">trimEnd</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());   </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &#39;  hello&#39;</span></span></code></pre></div></li></ul><h3 id="es11-ecmascript-2020" tabindex="-1"><strong>ES11 (ECMAScript 2020)</strong> <a class="header-anchor" href="#es11-ecmascript-2020" aria-label="Permalink to &quot;**ES11 (ECMAScript 2020)**&quot;">​</a></h3><h4 id="_1-可选链操作符" tabindex="-1">1. <strong>可选链操作符 (<code>?.</code>)</strong> <a class="header-anchor" href="#_1-可选链操作符" aria-label="Permalink to &quot;1. **可选链操作符 (`?.`)**&quot;">​</a></h4><ul><li>该操作符用于安全地访问嵌套对象的属性，不存在则返回 <code>undefined</code>。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { a: { b: { c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> } } };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj?.a?.b?.c); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 3</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj?.x?.y?.z); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// undefined</span></span></code></pre></div></li></ul><h4 id="_2-空值合并操作符" tabindex="-1">2. <strong>空值合并操作符 (<code>??</code>)</strong> <a class="header-anchor" href="#_2-空值合并操作符" aria-label="Permalink to &quot;2. **空值合并操作符 (`??`)**&quot;">​</a></h4><p>空值合并运算符 (<code>??</code>) 是 ECMAScript 2020 (ES11) 中引入的一种新运算符，用于解决处理 <code>null</code> 和 <code>undefined</code> 值时的常见问题。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> expression1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">??</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> expression2;</span></span></code></pre></div><ul><li><strong><code>expression1</code></strong>：要评估的第一个表达式。</li><li><strong><code>expression2</code></strong>：如果 <code>expression1</code> 是 <code>null</code> 或 <code>undefined</code>，则返回这个表达式的值。</li></ul><p><strong>具体规则</strong>是：当 <code>expression1</code> 的值为 <code>null</code> 或 <code>undefined</code> 时，<code>??</code> 运算符返回 <code>expression2</code> 的值；否则，返回 <code>expression1</code> 的值。</p><h5 id="示例" tabindex="-1"><strong>示例</strong> <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;**示例**&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> defaultName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Default Name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">??</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> defaultName;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 &quot;Default Name&quot;</span></span></code></pre></div><p>在上面的示例中，因为 <code>name</code> 是 <code>null</code>，所以 <code>result</code> 的值为 <code>&quot;Default Name&quot;</code>。</p><h5 id="空值合并运算符的应用场景" tabindex="-1"><strong>空值合并运算符的应用场景</strong> <a class="header-anchor" href="#空值合并运算符的应用场景" aria-label="Permalink to &quot;**空值合并运算符的应用场景**&quot;">​</a></h5><p>空值合并运算符主要是为了解决处理<strong>默认值</strong>的场景。通常，在编写代码时，我们需要给变量提供一个默认值以防止出现 <code>null</code> 或 <code>undefined</code>。在引入 <code>??</code> 之前，开发者通常使用逻辑或运算符 (<code>||</code>) 来实现这一功能：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> expression1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> expression2;</span></span></code></pre></div><p>然而，逻辑或运算符会将所有的“假值” (<code>false</code>, <code>0</code>, <code>NaN</code>, <code>&quot;&quot;</code>, <code>null</code>, <code>undefined</code>) 视为 <code>false</code>，这有时会导致不期望的行为。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 10，而不是期望的 0</span></span></code></pre></div><p>在这个例子中，尽管 <code>count</code> 的值为 <code>0</code>（一个有效值），但由于逻辑或运算符将 <code>0</code> 视为 <code>false</code>，<code>result</code> 的值变成了 <code>10</code>。这不是我们想要的结果。</p><p>为了解决这个问题，空值合并运算符应运而生：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(result); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 0</span></span></code></pre></div><p>现在，只有在 <code>count</code> 为 <code>null</code> 或 <code>undefined</code> 时，<code>result</code> 才会被赋值为 <code>10</code>。<code>0</code> 不再被视为“空值”，因此代码行为更加符合预期。</p><h4 id="_3-动态导入-import" tabindex="-1">3. <strong>动态导入 (<code>import()</code>)</strong> <a class="header-anchor" href="#_3-动态导入-import" aria-label="Permalink to &quot;3. **动态导入 (`import()`)**&quot;">​</a></h4><ul><li>允许按需动态加载模块。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div></li></ul><h4 id="_4-globalthis-对象" tabindex="-1">4. <strong><code>globalThis</code> 对象</strong> <a class="header-anchor" href="#_4-globalthis-对象" aria-label="Permalink to &quot;4. **`globalThis` 对象**&quot;">​</a></h4><p>在之前的 ECMAScript 版本中，不同环境中访问全局对象的方式不尽相同。例如：</p><ul><li>在浏览器中，全局对象是 <code>window</code></li><li>在 Node.js 中，全局对象是 <code>global</code></li><li>在 Web Workers 中，全局对象是 <code>self</code></li></ul><p>为了解决这种不一致性，ECMAScript 2021 引入了 <code>globalThis</code> 对象。这个对象提供了一种在任何环境下都可以访问全局对象的标准方式。无论你是在浏览器、Node.js 还是其他 JavaScript 运行环境中，<code>globalThis</code> 都指向全局对象。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>javascript复制代码// 在任何环境中都可以使用 globalThis 来访问全局对象</span></span>\n<span class="line"><span>console.log(globalThis);</span></span></code></pre></div><h4 id="_5-for-in-枚举顺序的标准化" tabindex="-1">5. <strong><code>for-in</code> 枚举顺序的标准化</strong> <a class="header-anchor" href="#_5-for-in-枚举顺序的标准化" aria-label="Permalink to &quot;5. **`for-in` 枚举顺序的标准化**&quot;">​</a></h4><p>在 <code>for-in</code> 循环中，JavaScript 会枚举对象的可枚举属性。之前的 ECMAScript 版本没有明确规定这些属性的枚举顺序，因此在不同的 JavaScript 引擎中，<code>for-in</code> 枚举的顺序可能会有所不同。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//在以前，有些浏览器在for..in的时候,item没有明确是遍历key还是value</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	name：</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">	age：</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj){}</span></span></code></pre></div><p>ECMAScript 2021 对此进行了标准化，规定 <code>for-in</code> 循环的枚举顺序如下：</p><ol><li><strong>整数索引的属性</strong>（即数组索引），按照数值升序排列。</li><li><strong>字符串键的属性</strong>，按照它们被创建的顺序进行枚举。</li><li><strong>Symbol 键的属性</strong>，同样按照它们被创建的顺序进行枚举。</li></ol><p>这种标准化提高了代码的可预见性，尤其是在处理对象属性时。</p><p>总结来说，ECMAScript 2021 的这两个改进使得 JavaScript 在不同环境中的行为更加一致，也提升了代码的可维护性。</p><h4 id="_6-import-meta" tabindex="-1">6,<strong><code>import.meta</code></strong> <a class="header-anchor" href="#_6-import-meta" aria-label="Permalink to &quot;6,**`import.meta`**&quot;">​</a></h4><p><code>import.meta</code> 是一个包含模块元数据的对象，它在 ES 模块中自动可用。这个对象提供了一些模块的特定信息，最常见的属性是 <code>import.meta.url</code>，它返回当前模块的完整 URL。</p><h5 id="详细说明" tabindex="-1"><strong>详细说明</strong> <a class="header-anchor" href="#详细说明" aria-label="Permalink to &quot;**详细说明**&quot;">​</a></h5><ol><li><p><strong><code>import.meta.url</code></strong></p><ul><li>返回当前模块的 URL。这在需要基于模块的相对路径来加载资源时非常有用，尤其是在浏览器环境中。</li></ul></li><li><p><strong>自定义元数据</strong></p><ul><li>虽然 ECMAScript 标准只定义了 <code>import.meta.url</code>，但运行环境（如 Node.js 或浏览器）可以在 <code>import.meta</code> 对象上定义额外的属性。例如，Node.js 在 <code>import.meta</code> 上定义了 <code>import.meta.resolve</code> 方法，用于解析模块的路径。</li></ul></li><li><p><strong>与动态导入结合使用</strong></p><ul><li><code>import.meta</code> 常常与动态导入 <code>import()</code> 结合使用，以便根据模块的上下文执行特定逻辑。</li></ul></li></ol><h5 id="代码示例" tabindex="-1"><strong>代码示例</strong> <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;**代码示例**&quot;">​</a></h5><p>以下是如何在不同环境中使用 <code>import.meta</code> 的一些示例：</p><h6 id="_1-获取模块的-url" tabindex="-1"><strong>1. 获取模块的 URL</strong> <a class="header-anchor" href="#_1-获取模块的-url" aria-label="Permalink to &quot;**1. 获取模块的 URL**&quot;">​</a></h6><p>在浏览器中使用 <code>import.meta.url</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// module.js</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.url); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出当前模块的完整 URL</span></span></code></pre></div><p>假设这个模块通过 <code>&lt;script type=&quot;module&quot; src=&quot;module.js&quot;&gt;&lt;/script&gt;</code> 方式加载，<code>import.meta.url</code> 将返回类似 <code>http://example.com/module.js</code> 的字符串。</p><h6 id="_2-动态导入与-import-meta-结合" tabindex="-1"><strong>2. 动态导入与 <code>import.meta</code> 结合</strong> <a class="header-anchor" href="#_2-动态导入与-import-meta-结合" aria-label="Permalink to &quot;**2. 动态导入与 `import.meta` 结合**&quot;">​</a></h6><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 根据模块的路径动态导入另一个模块</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> loadModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./another-module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Module loaded:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">loadModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><p>在这个示例中，<code>import.meta.url</code> 可以用来构造动态导入模块的路径。</p><h6 id="_3-在-node-js-中使用-import-meta" tabindex="-1"><strong>3. 在 Node.js 中使用 <code>import.meta</code></strong> <a class="header-anchor" href="#_3-在-node-js-中使用-import-meta" aria-label="Permalink to &quot;**3. 在 Node.js 中使用 `import.meta`**&quot;">​</a></h6><p>在 Node.js 环境中，<code>import.meta</code> 可能包含与模块系统相关的额外信息。例如，使用 <code>import.meta.resolve</code> 方法来解析模块路径：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// node-module.mjs</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> modulePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./another-node-module.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Resolved path:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, modulePath);</span></span></code></pre></div><p>在这个示例中，<code>import.meta.resolve</code> 返回解析后的模块路径。</p><h3 id="es12-ecmascript-2021" tabindex="-1"><strong>ES12 (ECMAScript 2021)</strong> <a class="header-anchor" href="#es12-ecmascript-2021" aria-label="Permalink to &quot;**ES12 (ECMAScript 2021)**&quot;">​</a></h3><h4 id="_1-逻辑赋值操作符" tabindex="-1">1. <strong>逻辑赋值操作符</strong> <a class="header-anchor" href="#_1-逻辑赋值操作符" aria-label="Permalink to &quot;1. **逻辑赋值操作符**&quot;">​</a></h4><ul><li><code>&amp;&amp;=</code>, <code>||=</code>, 和 <code>??=</code> 用于在逻辑操作基础上进行赋值。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// a = false</span></span></code></pre></div></li></ul><h4 id="_2-数字分隔符-numeric-separators" tabindex="-1">2. <strong>数字分隔符（Numeric Separators）</strong> <a class="header-anchor" href="#_2-数字分隔符-numeric-separators" aria-label="Permalink to &quot;2. **数字分隔符（Numeric Separators）**&quot;">​</a></h4><ul><li>下划线 <code>_</code> 作为数字分隔符，用于提高数字的可读性。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> largeNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1_000_000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1000000</span></span></code></pre></div></li></ul><h4 id="_3-weakrefs-和-finalizationregistry" tabindex="-1">3. <strong>WeakRefs 和 FinalizationRegistry</strong> <a class="header-anchor" href="#_3-weakrefs-和-finalizationregistry" aria-label="Permalink to &quot;3. **WeakRefs 和 FinalizationRegistry**&quot;">​</a></h4><ul><li><code>WeakRefs</code> 允许创建对对象的弱引用，防止垃圾回收。</li><li><code>FinalizationRegistry</code> 允许在对象被垃圾回收后执行回调函数。</li></ul><p><code>FinalizationRegistry</code> 是 ECMAScript 2021（ES12）中引入的一种新的内置对象，用于在对象被垃圾回收（Garbage Collection，GC）时执行回调函数。这对于需要在对象不再被引用时进行一些清理工作（如释放资源、断开外部连接等）的场景非常有用。</p><h4 id="_4-finalizationregistry-的概念" tabindex="-1"><strong><code>4.FinalizationRegistry</code> 的概念</strong> <a class="header-anchor" href="#_4-finalizationregistry-的概念" aria-label="Permalink to &quot;**`4.FinalizationRegistry` 的概念**&quot;">​</a></h4><p><code>FinalizationRegistry</code> 允许你注册一个目标对象及其关联的回调函数，当这个目标对象被垃圾回收时，回调函数会被执行。回调函数可以用于清理那些与目标对象相关联的资源。</p><p>值得注意的是，由于垃圾回收是不可预测的，<code>FinalizationRegistry</code> 的回调函数的执行时间是不确定的。这意味着你不能依赖 <code>FinalizationRegistry</code> 来及时清理资源，仍然需要通过其他方式管理资源的生命周期。</p><h5 id="如何使用-finalizationregistry" tabindex="-1"><strong>如何使用 <code>FinalizationRegistry</code></strong> <a class="header-anchor" href="#如何使用-finalizationregistry" aria-label="Permalink to &quot;**如何使用 `FinalizationRegistry`**&quot;">​</a></h5><p>以下是 <code>FinalizationRegistry</code> 的使用步骤：</p><ol><li><p><strong>创建 <code>FinalizationRegistry</code> 实例：</strong></p><p>使用 <code>FinalizationRegistry</code> 构造函数创建一个新的注册表实例，并传递一个清理函数作为参数，这个清理函数会在目标对象被垃圾回收时调用。</p></li><li><p><strong>注册对象：</strong></p><p>使用 <code>FinalizationRegistry.prototype.register()</code> 方法，将目标对象与一个值（通常是用于清理的上下文数据）一起注册到 <code>FinalizationRegistry</code> 中。</p></li><li><p><strong>解除注册（可选）：</strong></p><p>如果不再需要清理特定对象，可以使用 <code>FinalizationRegistry.prototype.unregister()</code> 方法解除注册。</p></li></ol><h5 id="代码示例-1" tabindex="-1"><strong>代码示例</strong> <a class="header-anchor" href="#代码示例-1" aria-label="Permalink to &quot;**代码示例**&quot;">​</a></h5><p>以下是 <code>FinalizationRegistry</code> 的一个简单示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建一个 FinalizationRegistry 实例</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> registry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FinalizationRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">heldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">`Object with held value &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">heldValue</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}&quot; was garbage collected`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建一个对象</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myObject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 注册对象并关联一个清理上下文值</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myObject&#39;s context value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 当 obj 不再被引用时，它将被垃圾回收，</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 然后注册表中的回调函数会被调用，输出相应的信息</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 删除对 obj 的引用</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 通过手动调用垃圾回收（在某些引擎中可能可以做到）或等待引擎自动回收</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 回调函数会在适当的时候被调用</span></span></code></pre></div><h5 id="详细解析" tabindex="-1"><strong>详细解析</strong> <a class="header-anchor" href="#详细解析" aria-label="Permalink to &quot;**详细解析**&quot;">​</a></h5><ol><li><p><strong>创建 <code>FinalizationRegistry</code>：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> registry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FinalizationRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">heldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">`Object with held value &quot;${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">heldValue</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}&quot; was garbage collected`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><p>这里，<code>FinalizationRegistry</code> 被创建并传递了一个回调函数。当某个注册的对象被垃圾回收时，这个回调函数将会接收到与该对象相关联的 <code>heldValue</code>。</p></li><li><p><strong>注册对象：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myObject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myObject&#39;s context value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>在这个步骤中，<code>obj</code> 被注册到 <code>registry</code> 中，并且与一个描述性字符串 <code>&quot;myObject&#39;s context value&quot;</code> 关联。这种关联是通过 <code>heldValue</code> 传递的。</p></li><li><p><strong>对象被垃圾回收：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>当我们将 <code>obj</code> 设为 <code>null</code> 时，这个对象就不再被引用了。一旦 JavaScript 引擎在适当的时候将其垃圾回收，<code>FinalizationRegistry</code> 的回调函数就会被触发。</p></li></ol><h5 id="注意事项" tabindex="-1"><strong>注意事项</strong> <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;**注意事项**&quot;">​</a></h5><ul><li><p><strong>执行时机</strong>：<code>FinalizationRegistry</code> 的回调函数执行时间是不确定的。你不能假设它会立即执行，因此不能依赖它来做需要即时生效的工作。</p></li><li><p><strong>性能影响</strong>：注册大量对象到 <code>FinalizationRegistry</code> 可能对性能有一定影响，特别是在需要频繁创建和销毁对象的应用中。</p></li><li><p><strong>弱引用</strong>：<code>FinalizationRegistry</code> 不会阻止对象被垃圾回收，因为它使用的是弱引用（Weak Reference），不会影响对象的生命周期。</p></li></ul><p><code>FinalizationRegistry</code> 提供了一种在对象被垃圾回收时执行清理任务的方法。这对于管理诸如外部资源、文件句柄或其他需要明确释放的资源特别有用。不过，由于垃圾回收的不确定性，<code>FinalizationRegistry</code> 应该用于辅助清理，而不是作为主要的资源管理机制。</p><p><code>WeakRef</code> 是 ECMAScript 2021 (ES12) 中引入的另一个新特性，它提供了一种弱引用对象的方式，这样可以避免引用对象阻止其被垃圾回收。<code>WeakRef</code> 通常与 <code>FinalizationRegistry</code> 结合使用，以管理内存和资源的生命周期。</p><h4 id="_5-weakref-的概念" tabindex="-1">5.<strong><code>WeakRef</code> 的概念</strong> <a class="header-anchor" href="#_5-weakref-的概念" aria-label="Permalink to &quot;5.**`WeakRef` 的概念**&quot;">​</a></h4><p><code>WeakRef</code> 是一种引用对象但不影响该对象的垃圾回收行为的机制。与普通的强引用不同，弱引用不会阻止 JavaScript 引擎对该对象进行垃圾回收。也就是说，即使有 <code>WeakRef</code> 引用指向某个对象，当没有其他强引用时，该对象仍然会被回收。</p><p><code>WeakRef</code> 主要用于需要缓存或存储对象的场景，在这些场景下，避免因为引用而阻止对象被回收，从而有效管理内存使用。</p><h5 id="如何使用-weakref" tabindex="-1"><strong>如何使用 <code>WeakRef</code></strong> <a class="header-anchor" href="#如何使用-weakref" aria-label="Permalink to &quot;**如何使用 `WeakRef`**&quot;">​</a></h5><p>以下是使用 <code>WeakRef</code> 的基本步骤：</p><ol><li><p><strong>创建 <code>WeakRef</code> 实例：</strong></p><p>通过 <code>new WeakRef(object)</code> 创建一个指向目标对象的 <code>WeakRef</code> 实例。</p></li><li><p><strong>访问弱引用对象：</strong></p><p>使用 <code>WeakRef.prototype.deref()</code> 方法可以尝试访问弱引用的目标对象。如果目标对象尚未被垃圾回收，该方法返回该对象；如果目标对象已经被回收，则返回 <code>undefined</code>。</p></li><li><p><strong>结合 <code>FinalizationRegistry</code> 使用：</strong></p><p>通常，<code>WeakRef</code> 会与 <code>FinalizationRegistry</code> 一起使用，以便在对象被回收后执行一些清理操作。</p></li></ol><h5 id="代码示例-2" tabindex="-1"><strong>代码示例</strong> <a class="header-anchor" href="#代码示例-2" aria-label="Permalink to &quot;**代码示例**&quot;">​</a></h5><p>以下是 <code>WeakRef</code> 的使用示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建一个对象</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myObject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建一个指向 obj 的弱引用</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> weakRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> WeakRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 通过 weakRef 访问对象</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> derefObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> weakRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">deref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (derefObj) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Object is still alive:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, derefObj.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &quot;Object is still alive: myObject&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Object has been garbage collected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 解除对 obj 的强引用</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 试图通过 weakRef 访问对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">derefObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> weakRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">deref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (derefObj) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Object is still alive:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, derefObj.name);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Object has been garbage collected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 可能会输出这行</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h5 id="详细解析-1" tabindex="-1"><strong>详细解析</strong> <a class="header-anchor" href="#详细解析-1" aria-label="Permalink to &quot;**详细解析**&quot;">​</a></h5><ol><li><p><strong>创建弱引用：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myObject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> weakRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> WeakRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj);</span></span></code></pre></div><p>这里，我们创建了一个指向 <code>obj</code> 的 <code>WeakRef</code> 实例 <code>weakRef</code>。这个弱引用不会阻止 <code>obj</code> 被垃圾回收。</p></li><li><p><strong>访问弱引用的对象：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> derefObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> weakRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">deref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (derefObj) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Object is still alive:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, derefObj.name);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Object has been garbage collected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>通过 <code>weakRef.deref()</code> 方法尝试访问对象。如果对象尚未被回收，我们可以正常访问它的属性；如果对象已经被垃圾回收，<code>deref()</code> 将返回 <code>undefined</code>。</p></li><li><p><strong>解除强引用并再次访问：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">derefObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> weakRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">deref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (derefObj) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Object is still alive:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, derefObj.name);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Object has been garbage collected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>当我们将 <code>obj</code> 设置为 <code>null</code> 后，它的强引用就被解除，此时如果垃圾回收已经发生，<code>weakRef.deref()</code> 可能会返回 <code>undefined</code>，表明对象已经被回收。</p></li></ol><h5 id="使用场景" tabindex="-1"><strong>使用场景</strong> <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;**使用场景**&quot;">​</a></h5><ol><li><p><strong>缓存数据：</strong></p><p>弱引用非常适合用于缓存场景，例如，你可能希望缓存某些计算结果或数据对象，但不希望因为缓存阻止它们被垃圾回收。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> DataCache</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    getData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cachedData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ref.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">deref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cachedData) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            cachedData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">_fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 假设这是一个耗时操作</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(key, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> WeakRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cachedData));</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cachedData;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    _fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 模拟从某处获取数据</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { key, data: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Some data for &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> key };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> DataCache</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data);</span></span></code></pre></div></li><li><p><strong>与 <code>FinalizationRegistry</code> 配合使用：</strong></p><p>通过 <code>FinalizationRegistry</code> 和 <code>WeakRef</code> 的组合，你可以在对象被回收后执行一些清理任务，比如释放与对象关联的资源。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> registry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> FinalizationRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">heldValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">`Cleaning up ${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">heldValue</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myObject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> weakRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> WeakRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myObject&#39;s resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 解除强引用</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 如果垃圾回收发生，FinalizationRegistry 的回调将会执行</span></span></code></pre></div></li></ol><h5 id="注意事项-1" tabindex="-1"><strong>注意事项</strong> <a class="header-anchor" href="#注意事项-1" aria-label="Permalink to &quot;**注意事项**&quot;">​</a></h5><ul><li><p><strong>不可预测性</strong>：<code>WeakRef</code> 和垃圾回收一样，具有不可预测性。你不能依赖它们来管理时间敏感的逻辑。</p></li><li><p><strong>性能影响</strong>：虽然 <code>WeakRef</code> 对内存管理非常有用，但使用过多 <code>WeakRef</code> 可能会对性能产生负面影响，尤其是在高频访问的场景中。</p></li><li><p><strong>垃圾回收不保证</strong>：即使对象没有强引用，也不能保证它们立即被垃圾回收，因此不要依赖 <code>WeakRef</code> 来确定对象何时被清理。</p></li></ul><h4 id="_6-logical-assign-operator" tabindex="-1">6.logical-assign-operator <a class="header-anchor" href="#_6-logical-assign-operator" aria-label="Permalink to &quot;6.logical-assign-operator&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1.||= 逻辑或赋值运算</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// let message = &quot;hello world&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// message = message || &quot;default value&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// message ||= &quot;default value&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// console.log(message)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2.&amp;&amp;= 逻辑与赋值运算</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &amp;&amp;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// const obj = {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   name: &quot;why&quot;,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   foo: function() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//     console.log(&quot;foo函数被调用&quot;)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   }</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// obj.foo &amp;&amp; obj.foo()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &amp;&amp;=</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// let info = {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   name: &quot;why&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// // 1.判断info</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// // 2.有值的情况下, 取出info.name</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// // info = info &amp;&amp; info.name</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// info &amp;&amp;= info.name</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// console.log(info)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 3.??= 逻辑空赋值运算</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">??=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;default value&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(message)</span></span></code></pre></div><h3 id="es13-ecmascript-2022" tabindex="-1"><strong>ES13 (ECMAScript 2022)</strong> <a class="header-anchor" href="#es13-ecmascript-2022" aria-label="Permalink to &quot;**ES13 (ECMAScript 2022)**&quot;">​</a></h3><h4 id="_1-at-方法" tabindex="-1">1. <strong><code>at()</code> 方法</strong> <a class="header-anchor" href="#_1-at-方法" aria-label="Permalink to &quot;1. **`at()` 方法**&quot;">​</a></h4><ul><li><code>Array.prototype.at()</code> 方法允许我们使用正索引或负索引来访问数组元素。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 3</span></span></code></pre></div></li></ul><h4 id="_2-类的私有字段" tabindex="-1">2. <strong>类的私有字段</strong> <a class="header-anchor" href="#_2-类的私有字段" aria-label="Permalink to &quot;2. **类的私有字段**&quot;">​</a></h4><ul><li>使用 <code>#</code> 前缀定义私有字段，只能在类内部访问。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  #privateField</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  getPrivateField</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.#privateField;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li></ul><h3 id="es14-ecmascript-2023" tabindex="-1"><strong>ES14 (ECMAScript 2023)</strong> <a class="header-anchor" href="#es14-ecmascript-2023" aria-label="Permalink to &quot;**ES14 (ECMAScript 2023)**&quot;">​</a></h3><h4 id="_1-顶层-await" tabindex="-1">1. <strong>顶层 <code>await</code></strong> <a class="header-anchor" href="#_1-顶层-await" aria-label="Permalink to &quot;1. **顶层 `await`**&quot;">​</a></h4><ul><li>允许在模块的顶层作用域中使用 <code>await</code>。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;https://api.example.com/data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(data);</span></span></code></pre></div></li></ul><h4 id="_2-array-typedarray-的-findlast-和-findlastindex" tabindex="-1">2. <strong>Array/TypedArray 的 <code>findLast()</code> 和 <code>findLastIndex()</code></strong> <a class="header-anchor" href="#_2-array-typedarray-的-findlast-和-findlastindex" aria-label="Permalink to &quot;2. **Array/TypedArray 的 `findLast()` 和 `findLastIndex()`**&quot;">​</a></h4><ul><li><code>findLast()</code> 返回数组中最后一个满足条件的元素。</li><li><code>findLastIndex()</code> 返回数组中最后一个满足条件的元素的索引。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">findLast</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 4</span></span></code></pre></div></li></ul><h3 id="es15-ecmascript-2024" tabindex="-1"><strong>ES15 (ECMAScript 2024)</strong> <a class="header-anchor" href="#es15-ecmascript-2024" aria-label="Permalink to &quot;**ES15 (ECMAScript 2024)**&quot;">​</a></h3><h4 id="_1-function-prototype-tostring-的改进" tabindex="-1">1. <strong><code>Function.prototype.toString()</code> 的改进</strong> <a class="header-anchor" href="#_1-function-prototype-tostring-的改进" aria-label="Permalink to &quot;1. **`Function.prototype.toString()` 的改进**&quot;">​</a></h4><ul><li><code>Function.prototype.toString()</code> 现在返回准确的源代码。</li></ul><h4 id="_2-类的静态块" tabindex="-1">2. <strong>类的静态块</strong> <a class="header-anchor" href="#_2-类的静态块" aria-label="Permalink to &quot;2. **类的静态块**&quot;">​</a></h4><ul><li>静态块允许在类定义时执行初始化代码。</li><li>示例：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  static</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 执行初始化代码</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Class is being defined&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li></ul>', 135);
const _hoisted_136 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_136);
}
const _25____ES___ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _25____ES___ as default
};
