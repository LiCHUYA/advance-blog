import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/浏览器的渲染过程.3AsOB4Kq.png";
const _imports_1 = "/advance-blog/assets/image-20240804080817089.A_xSZ7Vv.png";
const _imports_2 = "/advance-blog/assets/V8引擎如何解析和执行.7LX8Zytx.png";
const _imports_3 = "/advance-blog/assets/V8引擎执行细节.4GcNSf_K.png";
const _imports_4 = "/advance-blog/assets/JavaScript代码执行过程1.4K7SUI-b.png";
const _imports_5 = "/advance-blog/assets/GEC开始执行代码.5JCb4zNq.png";
const _imports_6 = "/advance-blog/assets/FEC被放入到ECS中.TUdyhkGw.png";
const _imports_7 = "/advance-blog/assets/FEC开始执行代码.blopgTzT.png";
const _imports_8 = "/advance-blog/assets/img_6.DMcTOy-E.png";
const _imports_9 = "/advance-blog/assets/img_9.LMkWH3Vx.png";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/01-js高级plus/01-深入JavaScript运行原理.md","filePath":"src/study-notes/01-学习笔记/01-js高级plus/01-深入JavaScript运行原理.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/01-js高级plus/01-深入JavaScript运行原理.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h3 id="浏览器渲染的原理" tabindex="-1">浏览器渲染的原理 <a class="header-anchor" href="#浏览器渲染的原理" aria-label="Permalink to &quot;浏览器渲染的原理&quot;">​</a></h3><h4 id="主流浏览器及其内核" tabindex="-1">主流浏览器及其内核 <a class="header-anchor" href="#主流浏览器及其内核" aria-label="Permalink to &quot;主流浏览器及其内核&quot;">​</a></h4><table><thead><tr><th>内核</th><th>浏览器</th><th>css 前缀</th><th>备注</th></tr></thead><tbody><tr><td>Trident</td><td>IE4-IE11</td><td>-ms</td><td>最新的 Edge 已转向 Blink</td></tr><tr><td>Gecko</td><td>火狐浏览器</td><td>-moz</td><td></td></tr><tr><td>Webkit</td><td>safari、旧版谷歌</td><td>-webkit</td><td></td></tr><tr><td>Blink</td><td>Google Chrome</td><td>-webkit</td><td></td></tr><tr><td>Presto</td><td>opera</td><td>-o</td><td>现在的 opera 转向了 Blink</td></tr></tbody></table><h3 id="浏览器内核-blink-和-webkit" tabindex="-1">浏览器内核 Blink 和 WebKit <a class="header-anchor" href="#浏览器内核-blink-和-webkit" aria-label="Permalink to &quot;浏览器内核 Blink 和 WebKit&quot;">​</a></h3><ul><li><strong>Blink：</strong> Blink 是由谷歌开发并维护的一个浏览器引擎，它最初是基于 WebKit 的分支，用于 Google Chrome 和许多其他基于 Chromium 的浏览器，如 Microsoft Edge (Chromium 版本) 和 Opera。</li><li><strong>WebKit：</strong> WebKit 是一个开源的浏览器引擎项目，最初由苹果开发，用于 Safari 浏览器。它的一个重要分支是 Blink，而且仍然在其他浏览器和设备上使用，如 Apple 的 Safari 浏览器和一些嵌入式设备浏览器。</li></ul><p>当前主流的浏览器内核主要是 Blink 和 Gecko：</p><ul><li><strong>Blink：</strong> 由于其在 Google Chrome 和大多数基于 Chromium 的浏览器中的广泛使用，Blink 引擎在全球范围内拥有主导地位。它在性能、兼容性和安全性方面持续进行优化，因此被认为是一个非常强劲的浏览器引擎。</li><li><strong>Gecko：</strong> 由 Mozilla 维护的 Gecko 引擎用于 Firefox 浏览器。尽管 Firefox 的市场份额相对较小，但 Gecko 仍然是重要的浏览器引擎之一，特别是在开放网络和隐私保护方面的立场上。</li></ul><p>​ 谷歌目前主要使用的浏览器引擎是 Blink。Blink 引擎最初由谷歌基于 WebKit 分支开发，用于 Google Chrome 浏览器以及其他基于 Chromium 的浏览器，如 Microsoft Edge (Chromium 版本) 和 Opera。谷歌通过对 Blink 引擎的持续优化和开发，确保其在性能、安全性和兼容性方面保持领先地位，因此 Blink 引擎已成为谷歌浏览器的核心引擎。</p><p>​ 我们常说的<strong>浏览器内核</strong>指的就是浏览器的<strong>排版引擎</strong>，排版引擎(layout engine)也称为浏览器引擎（browser engine)、页面渲染引擎（rendering engine）或样板引擎。</p><hr><h3 id="浏览器内核的组成" tabindex="-1">浏览器内核的组成 <a class="header-anchor" href="#浏览器内核的组成" aria-label="Permalink to &quot;浏览器内核的组成&quot;">​</a></h3><p><strong>浏览器内核</strong> 可以进一步详细解释为浏览器的核心技术组成部分，主要包括<strong>渲染引擎</strong>和<strong>JavaScript 引擎</strong>。这两部分协同工作，以实现浏览器的基本功能：解析、布局和展示网页内容，同时处理动态交互和脚本执行。</p><h4 id="_1-渲染引擎-rendering-engine" tabindex="-1">1.渲染引擎（Rendering Engine） <a class="header-anchor" href="#_1-渲染引擎-rendering-engine" aria-label="Permalink to &quot;1.渲染引擎（Rendering Engine）&quot;">​</a></h4><p>渲染引擎的主要责任是解析网页的结构和样式，以便将其转换为用户可以看到和与之交互的可视化内容。其工作流程如下：</p><ul><li><p><strong>HTML 解析：</strong> 渲染引擎首先获取到从服务器传输的网页数据，然后解析 HTML 标记语言，构建文档对象模型（DOM），这是浏览器理解网页结构的方式。</p></li><li><p><strong>CSS 解析和样式计算：</strong> 同时，渲染引擎会解析 CSS 样式表，构建样式对象模型（CSSOM）。接着，它会根据 DOM 和 CSSOM 的信息，计算每个网页元素的具体大小、位置和样式。</p></li><li><p><strong>布局和绘制：</strong> 一旦计算出每个元素在浏览器窗口中的准确位置，渲染引擎开始进行布局（layout）和绘制（painting）操作。这些操作包括文本排版、图像绘制、背景填充等，最终将所有内容以像素形式渲染在屏幕上。</p></li></ul><h5 id="常见的渲染引擎包括" tabindex="-1">常见的渲染引擎包括： <a class="header-anchor" href="#常见的渲染引擎包括" aria-label="Permalink to &quot;常见的渲染引擎包括：&quot;">​</a></h5><ul><li><p><strong>WebKit/Blink：</strong> 最初由苹果开发的 WebKit 引擎，后来谷歌基于其开发了 Blink 引擎，用于 Chrome 浏览器及其衍生产品。Blink 引擎以其高性能和多平台支持而闻名。</p></li><li><p><strong>Gecko：</strong> 由 Mozilla 开发，用于 Firefox 浏览器。Gecko 引擎在网页布局和复杂特效方面表现优秀，支持最新的 Web 标准。</p></li><li><p><strong>Trident/EdgeHTML：</strong> 由 Microsoft 开发，最初用于 Internet Explorer 浏览器，后来基于 EdgeHTML 引擎的 Microsoft Edge 浏览器也有一段时间使用它。</p></li></ul><h4 id="_2-javascript-引擎-javascript-engine" tabindex="-1">2.JavaScript 引擎（JavaScript Engine） <a class="header-anchor" href="#_2-javascript-引擎-javascript-engine" aria-label="Permalink to &quot;2.JavaScript 引擎（JavaScript Engine）&quot;">​</a></h4><p>JavaScript 引擎负责解析和执行网页中的 JavaScript 代码，这是实现网页动态行为和交互的关键组件。</p><ul><li><p><strong>解析和编译：</strong> JavaScript 引擎首先解析 JavaScript 代码，并将其编译成可执行的字节码或直接编译成机器代码，以确保快速执行。</p></li><li><p><strong>执行和优化：</strong> 引擎执行代码，并通过优化技术（如即时编译（Just-In-Time Compilation，JIT））提高代码的执行速度和效率。</p></li></ul><h5 id="常见的-javascript-引擎包括" tabindex="-1">常见的 JavaScript 引擎包括： <a class="header-anchor" href="#常见的-javascript-引擎包括" aria-label="Permalink to &quot;常见的 JavaScript 引擎包括：&quot;">​</a></h5><ul><li><p><strong>V8：</strong> 由谷歌开发，用于 Chrome 浏览器和 Node.js。V8 引擎以其高效的内存管理和快速的执行速度而著称，是现代 JavaScript 应用程序的关键基础。</p></li><li><p><strong>SpiderMonkey：</strong> Mozilla Firefox 使用的 JavaScript 引擎。它支持广泛的 JavaScript 标准和特性，并通过持续的优化提供高性能的执行环境。</p></li><li><p><strong>Chakra：</strong> 由 Microsoft 开发，用于早期版本的 Microsoft Edge 浏览器。Chakra 通过并行处理和优化技术，提供了快速和响应的 JavaScript 执行能力。</p></li></ul><p>这些引擎的选择直接影响了浏览器在性能、兼容性和安全性方面的表现。开发者根据其项目需求和优先考量，选择适合的浏览器内核以实现最佳的用户体验和功能支持。</p><hr><h4 id="浏览器的渲染过程" tabindex="-1">浏览器的渲染过程 <a class="header-anchor" href="#浏览器的渲染过程" aria-label="Permalink to &quot;浏览器的渲染过程&quot;">​</a></h4><p><img src="' + _imports_0 + '" alt="image.png"></p><p>浏览器会先下载 HTML 形成 DOM 树，在中途如果遇见 CSS 标签就开始下载 CSS 并解析，结合 DOM 树和 CSS 文件生成渲染树，浏览器根据渲染树，将页面绘制在屏幕上。如果在中途解析到 JavaScript 代码，会停止解析 HTML 和 CSS，去执行 JavaScript 代码。</p><h4 id="webkit-内核和-js-引擎的关系" tabindex="-1">webkit 内核和 JS 引擎的关系 <a class="header-anchor" href="#webkit-内核和-js-引擎的关系" aria-label="Permalink to &quot;webkit 内核和 JS 引擎的关系&quot;">​</a></h4><p>WebCore:负责 HTML 解析、布局、渲染等等相关的工作</p><p>JavaScriptCore:解析、执行 JavaScript 代码</p><p>​ WebCore 是 WebKit 中的核心模块，负责处理网页的静态内容解析、布局计算和渲染操作。它与 JavaScript 引擎（如 JavaScriptCore）共同作用，通过 DOM 和事件处理机制实现网页的动态交互和内容更新。这种协作使得浏览器能够提供丰富的用户体验，同时保持高效的性能和准确的渲染。</p><p><img src="' + _imports_1 + '" alt="image-20240804080817089"></p><h3 id="webkit" tabindex="-1">WebKit <a class="header-anchor" href="#webkit" aria-label="Permalink to &quot;WebKit&quot;">​</a></h3><p>WebKit 是一个开源的渲染引擎，主要用于 Safari 浏览器和一些其他的浏览器。它包括了多个核心组件，其中主要的是 WebCore 和 JavaScriptCore。</p><ul><li><strong>WebCore：</strong> WebCore 负责处理 HTML、CSS 解析、布局和渲染等任务。它构建了文档对象模型（DOM）和样式对象模型（CSSOM），将网页内容呈现到用户界面上。</li><li><strong>JavaScriptCore：</strong> JavaScriptCore 是 WebKit 中负责解析和执行 JavaScript 代码的引擎。它包括了解释器、即时编译器（JIT）、垃圾回收器等功能，用于优化 JavaScript 代码的执行效率和性能。</li></ul><p>在 WebKit 的源码中<a href="https://github.com/WebKit/WebKit/blob/main/Source%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E4%BB%A5%E4%B8%8B%E5%87%A0%E4%B8%AA%E5%85%B3%E9%94%AE%E9%83%A8%E5%88%86%E6%9D%A5%E7%90%86%E8%A7%A3%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%B1" target="_blank" rel="noreferrer">https://github.com/WebKit/WebKit/blob/main/Source，可以通过以下几个关键部分来理解渲染引擎是如何由</a> WebCore 和 JavaScript 引擎（JavaScriptCore）组成，并了解它们之间的相互作用：</p><h4 id="webcore-的主要部分" tabindex="-1">WebCore 的主要部分 <a class="header-anchor" href="#webcore-的主要部分" aria-label="Permalink to &quot;WebCore 的主要部分&quot;">​</a></h4><p>WebCore 是 WebKit 渲染引擎的核心，主要负责处理和呈现网页的静态内容。以下是一些关键的 WebCore 源码部分，可以帮助理解其功能和结构：</p><ul><li>DOM 相关代码： <ul><li><code>Document.cpp</code> 和 <code>Document.h</code>：定义了 <code>Document</code> 类，表示整个 HTML 或 XML 文档。</li><li><code>Element.cpp</code> 和 <code>Element.h</code>：定义了 <code>Element</code> 类，表示 DOM 树中的元素节点。</li><li><code>Node.cpp</code> 和 <code>Node.h</code>：定义了 <code>Node</code> 类，作为 DOM 树中所有节点的基类。</li></ul></li></ul><p>这些文件和类定义了如何解析 HTML、构建 DOM 树，并提供了操作和访问 DOM 元素的接口。</p><ul><li>CSS 相关代码： <ul><li><code>CSSParser.cpp</code> 和 <code>CSSParser.h</code>：定义了 CSS 解析器，负责解析 CSS 样式表并构建 CSSOM。</li><li><code>StyleResolver.cpp</code> 和 <code>StyleResolver.h</code>：定义了样式解析器，负责计算每个元素的最终样式。</li><li><code>RenderStyle.cpp</code> 和 <code>RenderStyle.h</code>：定义了渲染样式，包含样式属性的存储和管理。</li></ul></li></ul><p>这些文件和类处理了如何解析和应用 CSS 样式，以及如何将样式应用到 DOM 元素上。</p><ul><li>渲染相关代码： <ul><li><code>RenderObject.cpp</code> 和 <code>RenderObject.h</code>：定义了渲染对象的基本类，表示 DOM 元素的可视化表示。</li><li><code>RenderBox.cpp</code> 和 <code>RenderBox.h</code>：定义了盒子模型的渲染对象，处理块级元素的布局和绘制。</li><li><code>RenderTreeUpdater.cpp</code> 和 <code>RenderTreeUpdater.h</code>：负责更新渲染树，处理 DOM 树和渲染树之间的同步。</li></ul></li></ul><p>这些文件和类定义了如何进行网页的布局计算和绘制操作。</p><h4 id="javascriptcore-的集成与交互" tabindex="-1">JavaScriptCore 的集成与交互 <a class="header-anchor" href="#javascriptcore-的集成与交互" aria-label="Permalink to &quot;JavaScriptCore 的集成与交互&quot;">​</a></h4><p>JavaScriptCore 是 WebKit 中的 JavaScript 引擎，负责解析和执行 JavaScript 代码，并与 WebCore 相互作用实现动态网页的功能。</p><ul><li>JavaScriptCore 的关键文件： <ul><li><code>JSGlobalObject.cpp</code> 和 <code>JSGlobalObject.h</code>：定义了全局对象，管理 JavaScript 环境中的全局属性和函数。</li><li><code>Interpreter.cpp</code> 和 <code>Interpreter.h</code>：定义了解释器，负责解析和执行 JavaScript 代码。</li><li><code>Executable.cpp</code> 和 <code>Executable.h</code>：定义了可执行对象，表示编译后的 JavaScript 代码。</li><li><code>JSObject.cpp</code> 和 <code>JSObject.h</code>：定义了 JavaScript 对象模型的基本类，表示 JavaScript 中的对象和函数。</li></ul></li></ul><p>这些文件和类负责 JavaScript 的解析、执行、内存管理和优化。</p><h4 id="webcore-和-javascriptcore-的交互" tabindex="-1">WebCore 和 JavaScriptCore 的交互 <a class="header-anchor" href="#webcore-和-javascriptcore-的交互" aria-label="Permalink to &quot;WebCore 和 JavaScriptCore 的交互&quot;">​</a></h4><p>在 WebKit 中，WebCore 和 JavaScriptCore 之间通过一些关键的接口和机制进行交互，实现网页的动态效果：</p><ul><li><strong>DOM 和 JavaScript 的交互：</strong><ul><li>JavaScript 可以通过调用 DOM 提供的 JavaScript 绑定接口（JSBindings）来操作 DOM 元素和属性。</li><li>WebCore 可以将 DOM 事件传递给 JavaScriptCore，让 JavaScript 代码响应用户的交互操作，如点击、输入等事件。</li></ul></li><li><strong>JavaScript 的动态执行：</strong><ul><li>JavaScriptCore 可以动态地创建新的 DOM 元素，修改元素的样式和属性，实现动态网页的功能和交互效果。</li></ul></li></ul><p>这种交互和集成使得 WebKit 渲染引擎能够结合静态网页内容（由 WebCore 处理）和动态脚本逻辑（由 JavaScriptCore 执行）来展现和操作网页。</p><h3 id="v8-引擎如何解析和执行" tabindex="-1">V8 引擎如何解析和执行 <a class="header-anchor" href="#v8-引擎如何解析和执行" aria-label="Permalink to &quot;V8 引擎如何解析和执行&quot;">​</a></h3><p><img src="' + _imports_2 + '" alt="image.png"></p><p><strong>Parse</strong>模块会将 JavaScript 代码转换成 AST(抽象语法树 abstract syntax tree)，这是因为解释器不认识 JavaScript 代码</p><p><strong>Ignition</strong>是一个解释器，会将 AST 转换成 ByteCode(字节码)</p><ul><li>同时会收集 TurboFan 优化所需要的信息(比如函数参数的类型信息，有了类型才能进行真实的运算);</li><li>如果函数只调用一次，Ignition 会执行解释执行 ByteCode</li></ul><p><strong>TurboFan</strong>是一个编译器，可以将字节码编译为 CPU 可以直接执行的机器码</p><ul><li>如果一个函数被多次调用，那么就会被标记为热点函数，那么就会经过 TurboFan 转换成优化的机器码，提高代码的执行性能</li><li>机器码实际上也会被还原为 ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化(比如 sum 函数原来执行的是 number 类型，后来执行变成了 string 类型)，之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码（如果有一天 JavaScript 加入了类型检测，那么 TypeScript 可能会退出历史的舞台）</li></ul><h4 id="v8-引擎执行细节" tabindex="-1">V8 引擎执行细节 <a class="header-anchor" href="#v8-引擎执行细节" aria-label="Permalink to &quot;V8 引擎执行细节&quot;">​</a></h4><p><img src="' + _imports_3 + '" alt="image.png"></p><p>JavaScript 源码是如何被解析(Parse 过程)</p><ul><li>Blink 将源码交给 V8 引擎，Stream 获取到源码并且进行编码转换</li><li>Scanner 会进行词法分析(lexical analysis)，词法分析会将代码转换成 tokens;</li><li>接下来 tokens 会被转换成 AST 树，经过 Parser 和 PreParser: <ul><li>Parser 就是直接将 tokens 转成 AST 树架构</li><li>PreParser 称之为预解析，为什么需要预解析（变量提升）呢? <ul><li>不是所有的 JavaScript 代码，在一开始时就会被执行。那么对所有的 JavaScript 代码进行解析，必然会影响网页的运行效率</li><li>所以 V8 引擎就实现了 Lazy Parsing(延迟解析)的方案，它的作用是将不必要的函数进行预解析，也就是只解析暂时需要的内容，而对函数的全量解析是在函数被调用时才会进行</li></ul></li></ul></li><li>生成 AST 树后，会被 Ignition 转成字节码(bytecode)，之后的过程就是代码的执行过程</li></ul><h5 id="解析阶段-parsing" tabindex="-1">解析阶段（Parsing） <a class="header-anchor" href="#解析阶段-parsing" aria-label="Permalink to &quot;解析阶段（Parsing）&quot;">​</a></h5><p>在解析阶段，V8 将 JavaScript 源码转化为抽象语法树（AST），这包括词法分析和语法分析两个主要步骤。</p><h5 id="词法分析-lexical-analysis" tabindex="-1">词法分析（Lexical Analysis） <a class="header-anchor" href="#词法分析-lexical-analysis" aria-label="Permalink to &quot;词法分析（Lexical Analysis）&quot;">​</a></h5><p>词法分析器（Lexer）将 JavaScript 源码转化为 Token 流，每个 Token 对应代码中的一个词法单位，如关键字、标识符、运算符等。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cpp复制代码</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// lexer.h - 词法分析器示例</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> v8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> uint16_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> source</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    Token</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> NextToken</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> uint16_t*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> source_;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // Private methods for tokenizing</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // namespace v8</span></span></code></pre></div><h5 id="语法分析-syntax-analysis" tabindex="-1">语法分析（Syntax Analysis） <a class="header-anchor" href="#语法分析-syntax-analysis" aria-label="Permalink to &quot;语法分析（Syntax Analysis）&quot;">​</a></h5><p>语法分析器（Parser）根据 Token 流构建抽象语法树（AST），它定义了代码的结构和语义。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cpp复制代码</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// parser.h - 语法分析器示例</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> v8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Parser</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Parser</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    ~Parser</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    ASTNode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ParseScript</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> uint16_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> source</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate_;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // Private methods for parsing</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // namespace v8</span></span></code></pre></div><h4 id="预解析-preparser" tabindex="-1">预解析（PreParser） <a class="header-anchor" href="#预解析-preparser" aria-label="Permalink to &quot;预解析（PreParser）&quot;">​</a></h4><p>预解析（PreParser）是 V8 引擎的一项优化技术，用于快速识别和提升函数声明和函数表达式。它避免了不必要的完整解析，仅在需要时进行。</p><p>PreParser 在 V8 引擎中的作用是进行快速的函数预解析，以识别和提升函数声明和表达式。这个过程是为了优化解析阶段的性能和效率，避免不必要的完整解析，特别是针对大型 JavaScript 应用程序中的大量函数声明。</p><h5 id="为什么需要-preparser" tabindex="-1">为什么需要 PreParser？ <a class="header-anchor" href="#为什么需要-preparser" aria-label="Permalink to &quot;为什么需要 PreParser？&quot;">​</a></h5><ol><li><strong>快速加载和启动</strong>：预解析允许 V8 引擎在加载 JavaScript 代码时快速识别函数声明和表达式，而不需要完全解析整个代码文件。这提高了应用程序的启动速度，特别是在处理大量函数声明时。</li><li><strong>延迟解析</strong>：不是所有函数在初始加载时都被调用或执行。预解析允许 V8 引擎延迟对函数体的完全解析，只有在函数被调用时才会进行完整解析，从而节省了解析的开销和内存消耗。</li></ol><h5 id="preparser-过程详解" tabindex="-1">PreParser 过程详解 <a class="header-anchor" href="#preparser-过程详解" aria-label="Permalink to &quot;PreParser 过程详解&quot;">​</a></h5><p>PreParser 主要工作在词法分析和语法分析之前，它的任务是快速识别和收集函数声明和表达式的信息，以便后续代码解析过程能够更高效地处理。</p><h6 id="示例代码" tabindex="-1">示例代码： <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码：&quot;">​</a></h6><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cpp复制代码</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// preparser.h - PreParser 示例</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> v8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> PreParser</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    explicit</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> PreParser</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    ~PreParser</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> PreParseFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> uint16_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> source</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">FunctionInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate_;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // Private methods for pre-parsing</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // namespace v8</span></span></code></pre></div><h5 id="preparser-实现细节" tabindex="-1">PreParser 实现细节： <a class="header-anchor" href="#preparser-实现细节" aria-label="Permalink to &quot;PreParser 实现细节：&quot;">​</a></h5><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cpp复制代码</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// preparser.cc - PreParser 实现示例</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;preparser.h&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> v8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">PreParser</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">PreParser</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isolate_</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate) {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">PreParser</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">~</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">PreParser</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> PreParser</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">PreParseFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> uint16_t*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> source</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">FunctionInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Lexer </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">lexer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(source);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Token token;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    bool</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> in_function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> lexer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NextToken</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> END_OF_FILE) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        switch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (token) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            case</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FUNCTION:</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                in_function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            case</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> IDENTIFIER:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (in_function) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    info-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">AddFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(token);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                    in_function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">                // Handle other tokens if necessary</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // namespace v8</span></span></code></pre></div><h5 id="解析-preparser-过程" tabindex="-1">解析 PreParser 过程： <a class="header-anchor" href="#解析-preparser-过程" aria-label="Permalink to &quot;解析 PreParser 过程：&quot;">​</a></h5><ol><li><strong>初始化</strong>：创建 PreParser 对象，并传入 V8 引擎的 Isolate 实例。</li><li><strong>预解析函数</strong>：调用 <code>PreParseFunction</code> 方法，传入 JavaScript 源码的指针和长度，以及用于存储函数信息的 <code>FunctionInfo</code> 对象。</li><li><strong>词法分析和遍历</strong>：PreParser 使用词法分析器（Lexer）遍历 JavaScript 源码，识别关键词（如 FUNCTION 和 IDENTIFIER）。</li><li><strong>函数识别</strong>：当识别到 FUNCTION 关键词时，PreParser 标记正在解析函数；当识别到 IDENTIFIER 时，将其添加到 FunctionInfo 中表示已识别的函数。</li><li><strong>信息收集</strong>：FunctionInfo 结构用于收集和存储每个函数的基本信息，如函数名称和位置。</li></ol><h4 id="字节码生成-bytecode-generation" tabindex="-1">字节码生成（Bytecode Generation） <a class="header-anchor" href="#字节码生成-bytecode-generation" aria-label="Permalink to &quot;字节码生成（Bytecode Generation）&quot;">​</a></h4><p>一旦 AST 构建完成，Ignition 引擎将其转化为字节码（Bytecode）。字节码是一种中间表示形式，介于高级 JavaScript 源码和机器码之间，便于解释器执行和优化器进一步处理。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>cpp复制代码// ignition.cpp - 字节码生成示例</span></span>\n<span class="line"><span>namespace v8 {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>void Ignition::GenerateBytecode(ASTNode* rootNode) {</span></span>\n<span class="line"><span>    BytecodeGenerator generator(isolate_);</span></span>\n<span class="line"><span>    rootNode-&gt;Visit(&amp;generator);</span></span>\n<span class="line"><span>    BytecodeArray* bytecode = generator.GetBytecode();</span></span>\n<span class="line"><span>    // 存储字节码以备执行或优化</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>} // namespace v8</span></span></code></pre></div><h4 id="优化阶段-optimization" tabindex="-1">优化阶段（Optimization） <a class="header-anchor" href="#优化阶段-optimization" aria-label="Permalink to &quot;优化阶段（Optimization）&quot;">​</a></h4><p>优化阶段由 TurboFan 引擎负责，它对字节码进行高级优化，包括类型推断、静态单赋值形式（SSA）、数据流分析等，以生成更高效的机器码。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>cpp复制代码// turbofan.cpp - 优化过程示例</span></span>\n<span class="line"><span>namespace v8 {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>void TurboFan::OptimizeFunction(Function* function) {</span></span>\n<span class="line"><span>    Graph graph(function-&gt;GetBytecode());</span></span>\n<span class="line"><span>    OptimizationPasses passes;</span></span>\n<span class="line"><span>    passes.Run(&amp;graph);</span></span>\n<span class="line"><span>    MachineCode* code = CodeGenerator::GenerateMachineCode(&amp;graph);</span></span>\n<span class="line"><span>    function-&gt;SetOptimizedCode(code);</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>} // namespace v8</span></span></code></pre></div><h4 id="热点函数优化" tabindex="-1">热点函数优化 <a class="header-anchor" href="#热点函数优化" aria-label="Permalink to &quot;热点函数优化&quot;">​</a></h4><p>TurboFan 通过监控运行时的函数调用情况，识别出频繁执行的热点函数，并对其进行特殊优化，以提高性能和响应速度。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>cpp复制代码// turbofan.cpp - 热点函数优化示例</span></span>\n<span class="line"><span>namespace v8 {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>void TurboFan::OptimizeHotFunctions() {</span></span>\n<span class="line"><span>    for (Function* function : hotFunctions_) {</span></span>\n<span class="line"><span>        InlineCache cache;</span></span>\n<span class="line"><span>        function-&gt;Optimize(&amp;cache);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>} // namespace v8</span></span></code></pre></div><h4 id="重新优化-deoptimization" tabindex="-1">重新优化（Deoptimization） <a class="header-anchor" href="#重新优化-deoptimization" aria-label="Permalink to &quot;重新优化（Deoptimization）&quot;">​</a></h4><p>如果优化后的代码因为运行时条件的变化而失效，V8 引擎会通过 Deoptimizer 模块将代码回退到更安全和有效的状态。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>cpp复制代码// deoptimizer.h - 重新优化示例</span></span>\n<span class="line"><span>namespace v8 {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class Deoptimizer {</span></span>\n<span class="line"><span>public:</span></span>\n<span class="line"><span>    explicit Deoptimizer(Isolate* isolate);</span></span>\n<span class="line"><span>    void DeoptimizeFunction(Function* function);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>private:</span></span>\n<span class="line"><span>    Isolate* isolate_;</span></span>\n<span class="line"><span>    // Private methods for deoptimizing</span></span>\n<span class="line"><span>    ...</span></span>\n<span class="line"><span>};</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>} // namespace v8</span></span></code></pre></div><p>​ V8 引擎通过上述流程将 JavaScript 源码转化为高效的机器码，每个阶段都利用不同的技术和优化手段。从解析到最终的机器码生成，V8 引擎通过精细的设计和优化确保 JavaScript 在运行时获得最佳性能和响应速度。</p><h3 id="javascript-代码执行过程" tabindex="-1">JavaScript 代码执行过程 <a class="header-anchor" href="#javascript-代码执行过程" aria-label="Permalink to &quot;JavaScript 代码执行过程&quot;">​</a></h3><ul><li>JS 在执行代码之前会在堆内存中创建一个全局对象 Global Object（初始化全局对象 GO） <ul><li>该对象的 Scope 所有作用域都可以访问</li><li>里面会包含 Date、String、Array、setTimeout 等等。。。</li><li>其中还包含一个 window 属性指向自己</li></ul></li></ul><p><img src="' + _imports_4 + '" alt="image.png"></p><p>在 JavaScript 中，全局对象（Global Object）是在代码执行之前在堆内存中创建的一个特殊对象，它在整个应用程序的生命周期中都存在并且是全局作用域的根。全局对象包含了许多内置的属性和方法，如 <code>Date</code>、<code>String</code>、<code>Array</code> 等，还包括一些浏览器环境中特有的属性，如 <code>window</code>。</p><h4 id="创建全局对象过程" tabindex="-1">创建全局对象过程 <a class="header-anchor" href="#创建全局对象过程" aria-label="Permalink to &quot;创建全局对象过程&quot;">​</a></h4><p>在浏览器环境中，全局对象的创建通常发生在 JavaScript 引擎初始化时或者页面加载时的执行上下文创建阶段。</p><h4 id="示例代码-简化版本" tabindex="-1">示例代码（简化版本）： <a class="header-anchor" href="#示例代码-简化版本" aria-label="Permalink to &quot;示例代码（简化版本）：&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cpp复制代码</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// global_object.h - 全局对象示例</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> v8</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> GlobalObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    GlobalObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    ~GlobalObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 添加内置属性和方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> InitializeBuiltinObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 内置对象的成员变量，例如 Date、String、Array 等</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> date_;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> string_;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> array_;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 其他全局属性，如 setTimeout 等</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 全局对象自引用属性</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    GlobalObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> self_;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">GlobalObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">GlobalObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    InitializeBuiltinObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    self_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // window 属性指向自身</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> GlobalObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">InitializeBuiltinObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 初始化内置对象，例如 Date、String、Array 等</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    date_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    string_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    array_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 初始化其他全局属性，如 setTimeout 等</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // namespace v8</span></span></code></pre></div><h3 id="window-和-globalobject-对象" tabindex="-1">window 和 GlobalObject 对象 <a class="header-anchor" href="#window-和-globalobject-对象" aria-label="Permalink to &quot;window 和 GlobalObject 对象&quot;">​</a></h3><p>在 JavaScript 引擎中，特别是像 V8 这样的引擎中，<code>window</code> 和 <code>GlobalObject</code> 的处理方式是紧密相关的，但具体实现和处理细节会因引擎的设计和用途而有所不同。以下是一般情况下它们的处理方式及其关联：</p><h4 id="globalobject" tabindex="-1">GlobalObject <a class="header-anchor" href="#globalobject" aria-label="Permalink to &quot;GlobalObject&quot;">​</a></h4><ul><li><strong>作用</strong>： <ul><li><code>GlobalObject</code> 是 JavaScript 引擎中全局对象的抽象表示。它包含了 JavaScript 运行时所需的全局作用域对象和方法。这些对象和方法包括标准的 JavaScript 内置对象（如 <code>Object</code>、<code>Array</code>、<code>Function</code> 等）和特定环境下的全局属性和方法。</li></ul></li><li><strong>实现和处理</strong>： <ul><li>在 JavaScript 引擎初始化时，会创建 <code>GlobalObject</code>。这个过程通常涉及内存分配、对象初始化和属性设置等操作。具体实现可以通过 C++ 等语言完成，与引擎的设计和优化策略相关。</li></ul></li></ul><h4 id="window" tabindex="-1">window <a class="header-anchor" href="#window" aria-label="Permalink to &quot;window&quot;">​</a></h4><ul><li><strong>作用</strong>： <ul><li><code>window</code> 是浏览器环境中特有的全局对象。它是 <code>GlobalObject</code> 的扩展，提供了与浏览器窗口交互的接口，包括操作 DOM、管理页面状态、处理事件等。</li></ul></li><li><strong>实现和处理</strong>： <ul><li>在浏览器环境中，JavaScript 引擎会将 <code>window</code> 对象作为 <code>GlobalObject</code> 的一部分创建和管理。<code>window</code> 对象通常具有浏览器窗口相关的属性和方法，如 <code>document</code>、<code>location</code>、<code>localStorage</code> 等。</li></ul></li></ul><h4 id="示例概念" tabindex="-1">示例概念 <a class="header-anchor" href="#示例概念" aria-label="Permalink to &quot;示例概念&quot;">​</a></h4><p>以下是一个简化的示例概念，展示了 <code>GlobalObject</code> 和 <code>window</code> 的处理方式（这不是 V8 引擎的实际代码，而是一个概念性的示例）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>cpp复制代码// global_object.h - 全局对象的简化示例</span></span>\n<span class="line"><span>namespace v8 {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class GlobalObject {</span></span>\n<span class="line"><span>public:</span></span>\n<span class="line"><span>    GlobalObject();</span></span>\n<span class="line"><span>    ~GlobalObject();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 初始化内置对象和特定环境对象</span></span>\n<span class="line"><span>    void Initialize();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 访问内置对象和特定环境对象的方法</span></span>\n<span class="line"><span>    Object* GetObject(const std::string&amp; name);</span></span>\n<span class="line"><span>    Window* GetWindow();  // 获取浏览器环境下的 window 对象</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>private:</span></span>\n<span class="line"><span>    Object* object_;  // 内置对象</span></span>\n<span class="line"><span>    Window* window_;  // window 对象，作为 GlobalObject 的一部分</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 其他全局属性和方法的定义</span></span>\n<span class="line"><span>};</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>GlobalObject::GlobalObject() {</span></span>\n<span class="line"><span>    Initialize();</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>void GlobalObject::Initialize() {</span></span>\n<span class="line"><span>    // 初始化内置对象，如 Object、Array、Function 等</span></span>\n<span class="line"><span>    object_ = new Object();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    // 在浏览器环境中，初始化 window 对象</span></span>\n<span class="line"><span>    window_ = new Window();</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Object* GlobalObject::GetObject(const std::string&amp; name) {</span></span>\n<span class="line"><span>    // 返回指定名称的内置对象</span></span>\n<span class="line"><span>    if (name == &quot;Object&quot;) {</span></span>\n<span class="line"><span>        return object_;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>    return nullptr;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>Window* GlobalObject::GetWindow() {</span></span>\n<span class="line"><span>    return window_;</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>} // namespace v8</span></span></code></pre></div><h4 id="解释和关联" tabindex="-1">解释和关联 <a class="header-anchor" href="#解释和关联" aria-label="Permalink to &quot;解释和关联&quot;">​</a></h4><ul><li>在上述示例中，<code>GlobalObject</code> 类代表了 JavaScript 引擎中的全局对象抽象。<code>Initialize</code> 方法初始化了内置对象（如 <code>Object</code>）和浏览器环境下的 <code>window</code> 对象。</li><li><code>GetWindow</code> 方法用于获取浏览器环境下的 <code>window</code> 对象，这个对象是 <code>GlobalObject</code> 的一部分，而不是通过 <code>new</code> 操作符单独创建的。</li></ul><h4 id="全局对象的特点和作用" tabindex="-1">全局对象的特点和作用 <a class="header-anchor" href="#全局对象的特点和作用" aria-label="Permalink to &quot;全局对象的特点和作用&quot;">​</a></h4><ol><li><strong>全局作用域访问</strong>：全局对象的属性和方法可以被所有作用域访问，因为它是全局作用域的根。</li><li><strong>内置对象和方法</strong>：全局对象包含许多内置的 JavaScript 对象和方法，这些对象和方法可以直接在任何地方使用，如 <code>Date</code>、<code>String</code>、<code>Array</code> 等。</li><li><strong>window 属性</strong>：在浏览器环境中，全局对象的 <code>window</code> 属性指向自身，它是浏览器窗口的 JavaScript 表示。通过 <code>window</code> 属性，可以访问和操作浏览器窗口的各种特性和方法。</li></ol><h4 id="全局对象在浏览器中的应用" tabindex="-1">全局对象在浏览器中的应用 <a class="header-anchor" href="#全局对象在浏览器中的应用" aria-label="Permalink to &quot;全局对象在浏览器中的应用&quot;">​</a></h4><p>在浏览器中，全局对象不仅仅是 JavaScript 代码的运行环境，它还承载了与浏览器窗口交互的重要功能，如 DOM 操作、事件处理、定时器管理等。通过 <code>window</code> 属性，开发者可以直接操作页面元素、发送网络请求、管理页面状态等。</p><h3 id="执行上下文" tabindex="-1">执行上下文 <a class="header-anchor" href="#执行上下文" aria-label="Permalink to &quot;执行上下文&quot;">​</a></h3><ul><li><p>js 引擎内部有一个执行上下文栈(<strong>Execution Context Stack，简称 ECS</strong>)，它是用于执行代码的调用栈。</p><ul><li>那么现在它要执行谁呢?执行的是全局的代码块: <ul><li>全局的代码块为了执行会构建一个 <strong>Global Execution Context(GEC)</strong></li><li>全局执行上下文(GEC)会被放入到执行上下文栈(ESC)中执行</li></ul></li></ul></li><li><p>GEC 被放入到 ECS 中里面包含两部分内容</p><ul><li>第一部分:在代码执行前，在 parser 转成 AST 的过程中，会将全局定义的变量、函数等加入到 GlobalObject 中但是并不会赋值(变量提升)</li><li>第二部分:在代码执行中，对变量赋值，或者执行其他的函数</li></ul></li><li><p>GEC 被放入到 ECS 中</p></li><li><p>GEC 开始执行代码</p></li></ul><p><img src="' + _imports_5 + '" alt="image.png"></p><ul><li><p>执行过程中遇到函数如何执行？</p><ul><li>在执行的过程中执行到一个函数时，就会根据函数体创建一个函数执行上下文(<strong>Functional Execution Context，简称 FEC</strong>)，并且压入到 EC Stack 中。</li><li>FEC 中包含三部分内容: <ul><li>在解析函数成为 AST 树结构时，会创建一个 Activation Object(AO)</li><li>作用域链:由 VO(在函数中就是 AO 对象)和父级 VO 组成，查找时会一层层查找;</li><li>this 绑定的值</li></ul></li></ul></li><li><p>FEC 被放入到 ECS 中 <img src="' + _imports_6 + '" alt="image.png"></p></li><li><p>FEC 开始执行代码</p><p><img src="' + _imports_7 + '" alt="image.png"></p></li></ul><h3 id="javascript-执行上下文栈-execution-context-stack-ecs-详解" tabindex="-1">JavaScript 执行上下文栈（Execution Context Stack, ECS）详解 <a class="header-anchor" href="#javascript-执行上下文栈-execution-context-stack-ecs-详解" aria-label="Permalink to &quot;JavaScript 执行上下文栈（Execution Context Stack, ECS）详解&quot;">​</a></h3><p>在 JavaScript 引擎中，代码的执行是通过执行上下文栈（ECS）来管理的。执行上下文栈负责管理代码的调用顺序，确保函数调用和全局代码按正确的顺序执行。接下来，我将详细讲解这个过程。</p><h4 id="_1-全局执行上下文-global-execution-context-gec" tabindex="-1">1. 全局执行上下文（Global Execution Context, GEC） <a class="header-anchor" href="#_1-全局执行上下文-global-execution-context-gec" aria-label="Permalink to &quot;1. 全局执行上下文（Global Execution Context, GEC）&quot;">​</a></h4><p>当 JavaScript 代码开始执行时，首先会创建一个全局执行上下文。全局执行上下文包含两部分内容：</p><ol><li><strong>代码执行前</strong>： <ul><li>在代码执行之前，JavaScript 引擎会解析代码并生成抽象语法树（AST）。在解析过程中，全局定义的变量和函数会被添加到 <code>GlobalObject</code> 中，但不会赋值。这被称为<strong>变量提升</strong>。</li></ul></li><li><strong>代码执行中</strong>： <ul><li>在实际执行代码时，变量会被赋值，函数会被调用。</li></ul></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 代码示例</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// undefined，变量提升</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 10</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &#39;foo&#39;</span></span></code></pre></div><p>在上面的代码中，变量 <code>a</code> 和函数 <code>foo</code> 都会在解析过程中被添加到 <code>GlobalObject</code> 中，但变量 <code>a</code> 不会立即赋值。</p><h4 id="_2-执行上下文栈-ecs" tabindex="-1">2. 执行上下文栈（ECS） <a class="header-anchor" href="#_2-执行上下文栈-ecs" aria-label="Permalink to &quot;2. 执行上下文栈（ECS）&quot;">​</a></h4><p>全局执行上下文会被放入执行上下文栈中执行。当 JavaScript 引擎运行时，它首先会创建一个全局执行上下文，并将其推入执行上下文栈中。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ECS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [] </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 初始化执行上下文栈</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">GEC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建全局执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ECS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">GEC</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 将全局执行上下文推入栈中</span></span></code></pre></div><h4 id="_3-函数执行上下文-functional-execution-context-fec" tabindex="-1">3. 函数执行上下文（Functional Execution Context, FEC） <a class="header-anchor" href="#_3-函数执行上下文-functional-execution-context-fec" aria-label="Permalink to &quot;3. 函数执行上下文（Functional Execution Context, FEC）&quot;">​</a></h4><p>在全局代码执行过程中，如果遇到函数调用，会为该函数创建一个函数执行上下文，并将其推入执行上下文栈中。 <img src="' + _imports_8 + '" alt="image.png"> 函数执行上下文包含三部分内容：</p><ol><li><strong>Activation Object (AO)</strong>： <ul><li>在解析函数成为 AST 树结构时，会创建一个激活对象（AO）。激活对象包含函数的参数和局部变量。</li></ul></li><li><strong>作用域链</strong>： <ul><li>作用域链由激活对象（AO）和父级执行上下文的变量对象（VO）组成。在查找变量时，会沿着作用域链一层层向上查找。</li></ul></li><li><strong>this 绑定的值</strong>： <ul><li>函数执行时，<code>this</code> 关键字的值根据调用方式确定。</li></ul></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 20</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 10</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  bar</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 执行函数 foo</span></span></code></pre></div><p>执行上面的代码时，执行上下文栈的变化如下：</p><ol><li><strong>全局执行上下文</strong>被创建并推入栈中。</li><li>执行 <code>foo</code> 函数时，创建 <code>foo</code> 的执行上下文并推入栈中。</li><li>在 <code>foo</code> 函数内部调用 <code>bar</code> 函数时，创建 <code>bar</code> 的执行上下文并推入栈中。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ECS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">GEC</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 初始全局执行上下文在栈中</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FEC_foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  AO: { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Scope: [AO_foo, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">GEC</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  this: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ECS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FEC_foo) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// foo 函数的执行上下文推入栈中</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FEC_bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  AO: { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Scope: [AO_bar, AO_foo, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">GEC</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  this: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ECS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FEC_bar) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bar 函数的执行上下文推入栈中</span></span></code></pre></div><h4 id="_4-执行上下文栈的流程" tabindex="-1">4. 执行上下文栈的流程 <a class="header-anchor" href="#_4-执行上下文栈的流程" aria-label="Permalink to &quot;4. 执行上下文栈的流程&quot;">​</a></h4><p>以下是代码执行的详细流程：</p><ol><li><strong>创建全局执行上下文</strong>，并推入执行上下文栈。</li><li><strong>全局代码执行</strong>，遇到 <code>foo</code> 函数调用： <ul><li>创建 <code>foo</code> 的执行上下文，推入栈中。</li></ul></li><li><strong>foo 函数执行</strong>，遇到 <code>bar</code> 函数调用： <ul><li>创建 <code>bar</code> 的执行上下文，推入栈中。</li></ul></li><li><strong>bar 函数执行完毕</strong>，<code>bar</code> 的执行上下文从栈中弹出。</li><li><strong>foo 函数执行完毕</strong>，<code>foo</code> 的执行上下文从栈中弹出。</li><li><strong>全局代码执行完毕</strong>，全局执行上下文从栈中弹出。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ECS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">GEC</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 初始状态</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// foo 函数调用</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ECS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FEC_foo) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ECS = [GEC, FEC_foo]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bar 函数调用</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ECS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FEC_bar) </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ECS = [GEC, FEC_foo, FEC_bar]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// bar 函数执行完毕</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ECS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ECS = [GEC, FEC_foo]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// foo 函数执行完毕</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ECS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ECS = [GEC]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 全局代码执行完毕</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">ECS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ECS = []</span></span></code></pre></div><h2 id="javascript-引擎如何管理代码的执行顺" tabindex="-1">JavaScript 引擎如何管理代码的执行顺 <a class="header-anchor" href="#javascript-引擎如何管理代码的执行顺" aria-label="Permalink to &quot;JavaScript 引擎如何管理代码的执行顺&quot;">​</a></h2><h3 id="_1-全局执行上下文的创建" tabindex="-1">1. 全局执行上下文的创建 <a class="header-anchor" href="#_1-全局执行上下文的创建" aria-label="Permalink to &quot;1. 全局执行上下文的创建&quot;">​</a></h3><p>全局执行上下文是由 <code>GlobalObject</code> 创建的。全局对象初始化的代码可以在 <code>src/api.cc</code> 文件中找到。以下是相关代码段：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/api.cc</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> InitializeGlobal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">GlobalObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建全局对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">GlobalObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> global_handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(global, isolate);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 初始化全局对象的属性</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  InstallStandardGlobalObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, global_handle);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_2-解析和编译代码" tabindex="-1">2. 解析和编译代码 <a class="header-anchor" href="#_2-解析和编译代码" aria-label="Permalink to &quot;2. 解析和编译代码&quot;">​</a></h3><p>V8 会将 JavaScript 源代码解析为抽象语法树（AST），然后编译为机器码。以下是解析和编译代码的部分：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/parsing/parsing.cc</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ParseAndCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ParseInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 解析源代码，生成 AST</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">parsing</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">ParseProgram</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(info, isolate)) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 将 AST 编译为机器码</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Compiler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Compile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(info)) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> info-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_3-函数执行上下文的创建" tabindex="-1">3. 函数执行上下文的创建 <a class="header-anchor" href="#_3-函数执行上下文的创建" aria-label="Permalink to &quot;3. 函数执行上下文的创建&quot;">​</a></h3><p>当函数被调用时，会创建函数执行上下文。在 V8 中，这是由 <code>Execution</code> 模块管理的。以下是相关代码段：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/execution.cc</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MaybeHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Call</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">callable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[]) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建函数执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  HandleScope </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  DCHECK</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(callable-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">IsCallable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 设置上下文，并执行函数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  ASSIGN_RETURN_ON_EXCEPTION</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      isolate, result,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      Execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CallInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, callable, receiver, argc, args),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      Object);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> scope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CloseAndEscape</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(result);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_4-执行上下文栈的管理" tabindex="-1">4. 执行上下文栈的管理 <a class="header-anchor" href="#_4-执行上下文栈的管理" aria-label="Permalink to &quot;4. 执行上下文栈的管理&quot;">​</a></h3><p>执行上下文栈由 <code>StackFrame</code> 类管理。以下是相关代码段：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/frames.cc</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> StackFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">StackFrame</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> frame</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 将执行上下文推入栈中</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  top_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> frame;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">StackFrame</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> StackFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Pop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 将执行上下文从栈中弹出</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  StackFrame</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> top_;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  top_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> top_-&gt;previous_;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> frame;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_5-作用域链的处理" tabindex="-1">5. 作用域链的处理 <a class="header-anchor" href="#_5-作用域链的处理" aria-label="Permalink to &quot;5. 作用域链的处理&quot;">​</a></h3><p>作用域链由 <code>Scope</code> 类管理。以下是相关代码段：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/scope.cc</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">AddScopeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Scope</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 添加作用域信息</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  scope_infos_.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">Add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(scope);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="综合代码示例" tabindex="-1">综合代码示例 <a class="header-anchor" href="#综合代码示例" aria-label="Permalink to &quot;综合代码示例&quot;">​</a></h3><p>以下是一个综合示例，将这些部分整合起来展示 V8 引擎如何处理全局和函数执行上下文：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// src/execution.cc</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MaybeHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">RunScript</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建全局执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  GlobalObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> global </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">global_object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  InitializeGlobal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(global);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 解析和编译脚本</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ParseInfo </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">parse_info</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> compiled_script </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ParseAndCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">parse_info);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 执行全局代码</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  ASSIGN_RETURN_ON_EXCEPTION</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      isolate, result,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      Execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CallInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, compiled_script, context, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      Object);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MaybeHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CallFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Isolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">receiver</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[]) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建函数执行上下文</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  FunctionScope </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">function_scope</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(context);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 执行函数代码</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  ASSIGN_RETURN_ON_EXCEPTION</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      isolate, result,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">      Execution</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">CallInternal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isolate, function, receiver, argc, args),</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      Object);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> result;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p><img src="' + _imports_9 + '" alt="image.png"></p>', 165);
const _hoisted_166 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_166);
}
const _01___JavaScript____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _01___JavaScript____ as default
};
