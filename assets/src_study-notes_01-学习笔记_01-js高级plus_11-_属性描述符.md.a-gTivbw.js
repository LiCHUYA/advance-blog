import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/01-js高级plus/11-_属性描述符.md","filePath":"src/study-notes/01-学习笔记/01-js高级plus/11-_属性描述符.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/01-js高级plus/11-_属性描述符.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h3 id="属性描述符" tabindex="-1">属性描述符 <a class="header-anchor" href="#属性描述符" aria-label="Permalink to &quot;属性描述符&quot;">​</a></h3><p>在 JavaScript 中，<strong>属性描述符</strong>、<strong><code>get</code></strong> 和 <strong><code>set</code></strong> 是针对对象属性的高级特性。它们并非直接应用于函数或类本身，而是与对象的<strong>属性</strong>关联。</p><hr><h3 id="_1-对象属性描述符" tabindex="-1"><strong>1. 对象属性描述符</strong> <a class="header-anchor" href="#_1-对象属性描述符" aria-label="Permalink to &quot;**1. 对象属性描述符**&quot;">​</a></h3><h4 id="对象中的属性描述符" tabindex="-1"><strong>对象中的属性描述符</strong> <a class="header-anchor" href="#对象中的属性描述符" aria-label="Permalink to &quot;**对象中的属性描述符**&quot;">​</a></h4><p>每个对象的属性都有对应的属性描述符。这意味着你可以使用属性描述符来详细定义对象的属性行为，包括 <code>writable</code>、<code>enumerable</code>、<code>configurable</code> 以及 <code>get</code> 和 <code>set</code> 方法。</p><ul><li><strong>所有对象属性</strong>：无论是通过对象字面量、构造函数还是 <code>Object.defineProperty</code> 等方式创建的属性，都有属性描述符。</li><li><strong>动态添加的属性</strong>：即使在对象创建后通过点操作符（<code>obj.property</code>）动态添加的属性，也会有默认的属性描述符。</li></ul><h4 id="类中的属性描述符" tabindex="-1"><strong>类中的属性描述符</strong> <a class="header-anchor" href="#类中的属性描述符" aria-label="Permalink to &quot;**类中的属性描述符**&quot;">​</a></h4><p>在 JavaScript 中，类（<code>class</code>）是一种特殊的函数。因此，类的<strong>实例属性</strong>和<strong>静态属性</strong>同样具有属性描述符。</p><ul><li><strong>实例属性</strong>：通过构造函数（<code>constructor</code>）或类方法添加到类实例上的属性，具有属性描述符。</li><li><strong>静态属性</strong>：直接定义在类本身上的属性，也有属性描述符。</li></ul><h4 id="函数中的属性描述符" tabindex="-1"><strong>函数中的属性描述符</strong> <a class="header-anchor" href="#函数中的属性描述符" aria-label="Permalink to &quot;**函数中的属性描述符**&quot;">​</a></h4><p>函数本身是一种特殊类型的对象。作为对象，函数也有属性（例如 <code>name</code>、<code>length</code>、<code>prototype</code> 等），这些属性同样有属性描述符。</p><ul><li><p><strong>函数属性</strong>：包括函数的内建属性（如 <code>name</code>、<code>length</code>）和通过点操作符添加的自定义属性，它们都有属性描述符。</p></li><li><p><strong>函数本身</strong>：尽管函数是对象，但属性描述符并不直接用于描述函数的行为（如参数列表或返回值），而是用于描述函数对象的属性。</p></li><li><p>函数的属性描述符可以被修改，就像普通对象的属性一样。例如，函数的 <code>name</code> 属性通常是不可修改的，但你可以通过 <code>Object.defineProperty</code> 来更改其描述符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(myFunction, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  value: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;NewName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(myFunction.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: NewName</span></span></code></pre></div></li></ul><hr><h3 id="_2-javascript-对象中的属性描述符、get-和-set" tabindex="-1">2.JavaScript 对象中的属性描述符、<code>get</code> 和 <code>set</code> <a class="header-anchor" href="#_2-javascript-对象中的属性描述符、get-和-set" aria-label="Permalink to &quot;2.JavaScript 对象中的属性描述符、`get` 和 `set`&quot;">​</a></h3><p>在 JavaScript 中，对象的属性可以通过属性描述符来详细定义。使用 <code>get</code> 和 <code>set</code> 方法则可以对属性的访问和赋值进行更加灵活的控制。</p><hr><h4 id="属性描述符以及get-set" tabindex="-1"><strong>属性描述符以及get/set</strong> <a class="header-anchor" href="#属性描述符以及get-set" aria-label="Permalink to &quot;**属性描述符以及get/set**&quot;">​</a></h4><p><strong>属性描述符（Property Descriptor）</strong> 是一个对象，它描述了对象属性的行为。每个属性都由一个属性描述符来定义，这个描述符决定了属性的特性，如是否可修改、是否可枚举、是否可配置等。</p><h4 id="属性描述符的组成" tabindex="-1"><strong>属性描述符的组成</strong> <a class="header-anchor" href="#属性描述符的组成" aria-label="Permalink to &quot;**属性描述符的组成**&quot;">​</a></h4><p>属性描述符分为两类：<strong>数据属性（Data Property）</strong> 和 <strong>存取属性（Accessor Property）</strong>。</p><ol><li><p><strong>数据属性（Data Property）</strong>：</p><ul><li><strong><code>value</code></strong>: 属性的值，默认为 <code>undefined</code>。</li><li><strong><code>writable</code></strong>: 表示属性的值是否可以被修改（默认为 <code>false</code>）。</li><li><strong><code>enumerable</code></strong>: 表示属性是否可以被枚举（默认为 <code>false</code>）。</li><li><strong><code>configurable</code></strong>: 表示属性描述符是否可以被修改，属性是否可以被删除（默认为 <code>false</code>）。</li></ul></li><li><p><strong>存取属性（Accessor Property）</strong>：</p><ul><li><strong><code>get</code></strong>: 当访问属性时调用的函数，如果未定义则返回 <code>undefined</code>。</li><li><strong><code>set</code></strong>: 当属性值被修改时调用的函数，如果未定义则不会执行任何操作。</li><li><strong><code>enumerable</code></strong>: 同数据属性，表示属性是否可以被枚举。</li><li><strong><code>configurable</code></strong>: 同数据属性，表示属性描述符是否可以被修改。</li></ul></li></ol><h4 id="默认值" tabindex="-1"><strong>默认值</strong> <a class="header-anchor" href="#默认值" aria-label="Permalink to &quot;**默认值**&quot;">​</a></h4><ul><li><p>如果通过简单的对象字面量或默认的方式定义属性，这些描述符的默认值通常是：</p><ul><li><code>value</code>: <code>undefined</code></li><li><code>writable</code>: <code>false</code></li><li><code>enumerable</code>: <code>false</code></li><li><code>configurable</code>: <code>false</code></li></ul></li><li><p>但是，当你为一个属性定义了 <code>get</code> 和 <code>set</code> 方法时，JavaScript 会自动将 <code>configurable</code> 和 <code>enumerable</code> 设置为 <code>true</code>。</p></li></ul><hr><h3 id="get-和-set-的作用与机制" tabindex="-1"><strong><code>get</code> 和 <code>set</code> 的作用与机制</strong> <a class="header-anchor" href="#get-和-set-的作用与机制" aria-label="Permalink to &quot;**`get` 和 `set` 的作用与机制**&quot;">​</a></h3><p><strong><code>get</code></strong> 和 <strong><code>set</code></strong> 是用来定义存取属性的特殊函数。它们不直接存储属性的值，而是通过函数来动态地获取和设置属性的值。</p><h4 id="get-函数" tabindex="-1"><strong><code>get</code> 函数</strong> <a class="header-anchor" href="#get-函数" aria-label="Permalink to &quot;**`get` 函数**&quot;">​</a></h4><ul><li><strong>作用</strong>: 定义在对象中的 <code>get</code> 函数在访问属性时自动调用。它的主要作用是在获取属性值时执行一些额外的逻辑，而不仅仅是返回一个存储的值。</li></ul><h4 id="set-函数" tabindex="-1"><strong><code>set</code> 函数</strong> <a class="header-anchor" href="#set-函数" aria-label="Permalink to &quot;**`set` 函数**&quot;">​</a></h4><ul><li><strong>作用</strong>: <code>set</code> 函数在给属性赋值时自动调用。它允许你在设置属性值时执行逻辑操作，比如数据验证或调整其他属性的值。</li></ul><h4 id="行为示例" tabindex="-1"><strong>行为示例</strong> <a class="header-anchor" href="#行为示例" aria-label="Permalink to &quot;**行为示例**&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  _age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 定义 age 的 get 方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._age;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 定义 age 的 set 方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Age must be positive&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 访问 age 属性，调用 get 方法</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person.age); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 30</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 age 属性，调用 set 方法</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: Age must be positive</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person.age); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 仍为 30</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 正常设置 age 属性</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person.age); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 25</span></span></code></pre></div><hr><h3 id="get-和-set-的内部机制" tabindex="-1"><strong><code>[[Get]]</code> 和 <code>[[Set]]</code> 的内部机制</strong> <a class="header-anchor" href="#get-和-set-的内部机制" aria-label="Permalink to &quot;**`[[Get]]` 和 `[[Set]]` 的内部机制**&quot;">​</a></h3><p>当你使用 <code>get</code> 和 <code>set</code> 方法时，JavaScript 引擎会自动为这些属性关联内部的 <code>[[Get]]</code> 和 <code>[[Set]]</code> 操作。这两个内部属性处理对象属性的获取和设置。</p><ul><li><p><strong><code>[[Get]]</code></strong>: 在访问属性时触发。默认情况下，它会返回属性的值；如果有 <code>get</code> 方法，则调用该方法。</p></li><li><p><strong><code>[[Set]]</code></strong>: 在设置属性时触发。默认情况下，它会直接设置属性值；如果有 <code>set</code> 方法，则调用该方法。</p></li></ul><p>这些内部机制为开发者提供了高度的灵活性，使得在属性访问和赋值时能够插入自定义的逻辑。</p><hr><h3 id="属性描述符的具体应用" tabindex="-1"><strong>属性描述符的具体应用</strong> <a class="header-anchor" href="#属性描述符的具体应用" aria-label="Permalink to &quot;**属性描述符的具体应用**&quot;">​</a></h3><p>通过 <code>Object.defineProperty</code> 或 <code>Object.defineProperties</code> 方法，你可以手动设置对象属性的描述符，包括 <code>get</code> 和 <code>set</code> 方法。</p><h4 id="示例" tabindex="-1"><strong>示例</strong> <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;**示例**&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;birthYear&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getFullYear</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._age;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person.birthYear); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 基于 age 计算并返回出生年份</span></span></code></pre></div><hr><p>当你在对象中使用 <code>get</code> 和 <code>set</code> 时，JavaScript 会自动将这些属性的描述符设置为：</p><ul><li><strong><code>configurable: true</code></strong></li><li><strong><code>enumerable: true</code></strong></li></ul><h3 id="解释-configurable-和-enumerable-的默认行为" tabindex="-1"><strong>解释 <code>configurable</code> 和 <code>enumerable</code> 的默认行为</strong> <a class="header-anchor" href="#解释-configurable-和-enumerable-的默认行为" aria-label="Permalink to &quot;**解释 `configurable` 和 `enumerable` 的默认行为**&quot;">​</a></h3><ol><li><p><strong><code>configurable: true</code></strong></p><ul><li><strong>含义</strong>：属性描述符是可配置的。这意味着你可以随时修改属性描述符，或者通过 <code>delete</code> 操作符删除这个属性。</li><li><strong>默认行为</strong>：如果你为一个属性定义了 <code>get</code> 或 <code>set</code> 方法，JavaScript 会默认将 <code>configurable</code> 设置为 <code>true</code>，允许你在以后修改或删除这个属性的描述符。</li></ul></li><li><p><strong><code>enumerable: true</code></strong></p><ul><li><strong>含义</strong>：属性是可枚举的。这意味着这个属性会在遍历对象属性时（如 <code>for...in</code> 循环或 <code>Object.keys()</code> 方法）被包括在内。</li><li><strong>默认行为</strong>：当你定义了 <code>get</code> 或 <code>set</code> 方法，JavaScript 会自动将 <code>enumerable</code> 设置为 <code>true</code>，使得这个属性在对象的枚举过程中是可见的。</li></ul></li></ol><h3 id="示例-1" tabindex="-1"><strong>示例</strong> <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;**示例**&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  _name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 定义了 get 和 set</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._name;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 查看属性描述符</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getOwnPropertyDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span></code></pre></div><p><strong>输出</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [Function: get name],</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: [Function: set name],</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  enumerable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 默认设置</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  configurable</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 默认设置</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h4><p>当在对象中定义 <code>get</code> 和 <code>set</code> 方法时，JavaScript 会自动为该属性的描述符添加 <code>configurable: true</code> 和 <code>enumerable: true</code> 这两个默认设置。这意味着该属性可以被修改、删除，并且在遍历时是可见的。</p><h3 id="_2-对于类的应用-class-中的-get-和-set" tabindex="-1"><strong>2. 对于类的应用</strong>(<strong><code>class</code> 中的 <code>get</code> 和 <code>set</code></strong>) <a class="header-anchor" href="#_2-对于类的应用-class-中的-get-和-set" aria-label="Permalink to &quot;**2. 对于类的应用**(**`class` 中的 `get` 和 `set`**)&quot;">​</a></h3><hr><h3 id="_1-class-中的-get-和-set" tabindex="-1"><strong>1. <code>class</code> 中的 <code>get</code> 和 <code>set</code></strong> <a class="header-anchor" href="#_1-class-中的-get-和-set" aria-label="Permalink to &quot;**1. `class` 中的 `get` 和 `set`**&quot;">​</a></h3><p>在 JavaScript 中，<strong>类</strong>（<code>class</code>）提供了定义存取器（accessor）的语法糖，使得我们可以直接在类中定义 <code>get</code> 和 <code>set</code> 方法。</p><h4 id="如何在类中使用-get-和-set" tabindex="-1"><strong>如何在类中使用 <code>get</code> 和 <code>set</code></strong> <a class="header-anchor" href="#如何在类中使用-get-和-set" aria-label="Permalink to &quot;**如何在类中使用 `get` 和 `set`**&quot;">​</a></h4><ul><li><p><strong><code>get</code> 方法</strong>：在类中定义的 <code>get</code> 方法，可以在访问某个属性时执行自定义逻辑，并返回值。它不需要显式地调用，直接通过属性访问触发。</p></li><li><p><strong><code>set</code> 方法</strong>：类似地，<code>set</code> 方法可以在给某个属性赋值时执行自定义逻辑。赋值时，<code>set</code> 方法会自动被调用，并接收新的值。</p></li></ul><h4 id="示例-2" tabindex="-1"><strong>示例</strong> <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;**示例**&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 通常会用 &quot;_&quot; 作为私有属性的前缀</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> age;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 定义 name 属性的 get 方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 访问时返回大写形式</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 定义 name 属性的 set 方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">newName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (newName.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> newName;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Name cannot be empty&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 定义 age 属性的 get 方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._age;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 定义 age 属性的 set 方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">newAge</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (newAge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> newAge;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Age must be positive&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 通过 get 方法获取 name</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: ALICE</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 通过 set 方法设置 name</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: Name cannot be empty</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 仍为: ALICE</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;Bob&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: BOB</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 通过 get 方法获取 age</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person.age); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 30</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 通过 set 方法设置 age</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">person.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: Age must be positive</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person.age); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 仍为: 30</span></span></code></pre></div><h4 id="get-和-set-在类中的作用" tabindex="-1"><strong><code>get</code> 和 <code>set</code> 在类中的作用</strong> <a class="header-anchor" href="#get-和-set-在类中的作用" aria-label="Permalink to &quot;**`get` 和 `set` 在类中的作用**&quot;">​</a></h4><ul><li><strong>封装性</strong>：<code>get</code> 和 <code>set</code> 方法通过控制属性访问，可以封装数据，确保外部代码不会直接修改对象的内部状态。这使得数据的管理更加安全。</li><li><strong>数据验证</strong>：在 <code>set</code> 方法中可以对赋值进行验证，比如检查值是否有效。如果值不合法，可以拒绝赋值并给出提示。</li><li><strong>计算属性</strong>：<code>get</code> 方法可以根据其他属性的值计算并返回一个值，而不需要显式地存储它。</li></ul><hr><h3 id="_2-get-和-set-与属性描述符的关系" tabindex="-1"><strong>2. <code>get</code> 和 <code>set</code> 与属性描述符的关系</strong> <a class="header-anchor" href="#_2-get-和-set-与属性描述符的关系" aria-label="Permalink to &quot;**2. `get` 和 `set` 与属性描述符的关系**&quot;">​</a></h3><p>当在类中定义 <code>get</code> 和 <code>set</code> 方法时，JavaScript 会自动将这些方法绑定到对应的属性描述符上。这些描述符中的 <code>enumerable</code> 和 <code>configurable</code> 默认设置为 <code>true</code>，这意味着这些属性是可枚举和可配置的。</p><p>你可以使用 <code>Object.getOwnPropertyDescriptor</code> 方法来查看某个类实例属性的描述符：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> descriptor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getOwnPropertyDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(person, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(descriptor);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出类似于:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   get: [Function: get name],</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   set: [Function: set name],</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   enumerable: true,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   configurable: true</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// }</span></span></code></pre></div><hr><h3 id="_3-get-和-set-在类中的高级应用" tabindex="-1"><strong>3. <code>get</code> 和 <code>set</code> 在类中的高级应用</strong> <a class="header-anchor" href="#_3-get-和-set-在类中的高级应用" aria-label="Permalink to &quot;**3. `get` 和 `set` 在类中的高级应用**&quot;">​</a></h3><p>除了普通的类实例属性，<code>get</code> 和 <code>set</code> 方法还可以用于定义类的静态属性：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  static</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> _count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._count;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Count cannot be negative&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Counter.count); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 0</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Counter.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Counter.count); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 5</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Counter.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: Count cannot be negative</span></span></code></pre></div><p>在这个例子中，<code>get</code> 和 <code>set</code> 方法被用来控制一个静态属性 <code>count</code> 的访问和修改。</p><h2 id="class和普通对象中get-set的关联" tabindex="-1">class和普通对象中Get/Set的关联 <a class="header-anchor" href="#class和普通对象中get-set的关联" aria-label="Permalink to &quot;class和普通对象中Get/Set的关联&quot;">​</a></h2><p><code>class</code> 中的 <code>get</code> 和 <code>set</code> 与对象中的 <code>get</code> 和 <code>set</code> 实际上是相同的机制，只是它们在不同的上下文中使用。它们的<strong>本质</strong>相同，但<strong>使用场景</strong>和<strong>应用方式</strong>略有不同。下面详细介绍它们的关联与区别。</p><h3 id="_1-共同点-关联" tabindex="-1"><strong>1. 共同点（关联）</strong> <a class="header-anchor" href="#_1-共同点-关联" aria-label="Permalink to &quot;**1. 共同点（关联）**&quot;">​</a></h3><h4 id="机制相同" tabindex="-1"><strong>机制相同</strong> <a class="header-anchor" href="#机制相同" aria-label="Permalink to &quot;**机制相同**&quot;">​</a></h4><ul><li><p><strong>存取器属性</strong>：无论是在类中还是在对象中，<code>get</code> 和 <code>set</code> 方法都被称为<strong>存取器属性</strong>。它们用于定义属性的访问器，这些属性不直接保存值，而是在访问和赋值时执行代码逻辑。</p></li><li><p><strong>属性描述符</strong>：在对象和类中，<code>get</code> 和 <code>set</code> 实际上是通过属性描述符来实现的。这意味着它们都依赖于属性描述符中的 <code>get</code> 和 <code>set</code> 字段。</p><p>对于任意对象或类，当你定义 <code>get</code> 和 <code>set</code> 方法时，JavaScript 会在背后创建一个包含 <code>get</code> 和 <code>set</code> 方法的属性描述符。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;set:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, value);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取属性描述符</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getOwnPropertyDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;prop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span></code></pre></div><p>类似地，类中的 <code>get</code> 和 <code>set</code> 也会创建属性描述符：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;set:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, value);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getOwnPropertyDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;prop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span></code></pre></div></li><li><p><strong>功能一致</strong>：无论是在类还是对象中，<code>get</code> 和 <code>set</code> 都允许你控制属性的访问和赋值行为，提供了封装性、数据验证和计算属性等功能。</p></li></ul><h3 id="_2-区别" tabindex="-1"><strong>2. 区别</strong> <a class="header-anchor" href="#_2-区别" aria-label="Permalink to &quot;**2. 区别**&quot;">​</a></h3><p>尽管 <code>get</code> 和 <code>set</code> 在类和对象中的机制相同，它们的使用方式和应用场景有一些区别：</p><h4 id="定义方式" tabindex="-1"><strong>定义方式</strong> <a class="header-anchor" href="#定义方式" aria-label="Permalink to &quot;**定义方式**&quot;">​</a></h4><ul><li><p><strong>对象字面量</strong>：在普通对象中，你可以直接在对象字面量中定义 <code>get</code> 和 <code>set</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  _prop: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._prop;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._prop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><p>这里 <code>get</code> 和 <code>set</code> 是直接作为对象属性定义的。</p></li><li><p><strong>类</strong>：在类中，<code>get</code> 和 <code>set</code> 通常是在类的<strong>原型</strong>上定义的（即定义在 <code>prototype</code> 上），这意味着所有实例共享这些方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._prop;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._prop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>这种方式使得 <code>get</code> 和 <code>set</code> 可以通过类的实例进行访问和赋值。</p></li></ul><h4 id="应用场景" tabindex="-1"><strong>应用场景</strong> <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;**应用场景**&quot;">​</a></h4><ul><li><p><strong>类</strong>：在类中，<code>get</code> 和 <code>set</code> 通常用于管理实例属性的访问和赋值。例如，你可以在类的 <code>get</code> 方法中返回某些计算值，或者在 <code>set</code> 方法中对赋值进行验证。这些方法适用于类的实例属性和静态属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._name;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  set</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (value) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>类中的 <code>get</code> 和 <code>set</code> 使得类实例的属性访问和赋值更加灵活和安全。</p></li><li><p><strong>对象</strong>：在对象字面量或通过 <code>Object.defineProperty</code> 创建的对象中，<code>get</code> 和 <code>set</code> 主要用于定义对象的某些属性。这些对象可能是单一的，也可能是构造函数的实例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {};</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;prop&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;getter value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;setter:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, value);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><p>这种方式适用于更灵活的对象定义，尤其是在需要控制特定属性行为时。</p></li></ul><h4 id="作用范围" tabindex="-1"><strong>作用范围</strong> <a class="header-anchor" href="#作用范围" aria-label="Permalink to &quot;**作用范围**&quot;">​</a></h4><ul><li><p><strong>类中的 <code>get</code> 和 <code>set</code></strong>：作用在类的实例上，控制的是类实例属性的访问和赋值。通过类定义的 <code>get</code> 和 <code>set</code> 是<strong>原型方法</strong>，因此它们在所有实例上共享。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> obj1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj1.prop); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &quot;value&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj2.prop); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &quot;value&quot;</span></span></code></pre></div></li><li><p><strong>对象中的 <code>get</code> 和 <code>set</code></strong>：直接作用于单个对象的属性，控制该对象的特定属性行为。每个对象的 <code>get</code> 和 <code>set</code> 是<strong>独立的</strong>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> obj1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;value1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> obj2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  get</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;value2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj1.prop); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &quot;value1&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj2.prop); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &quot;value2&quot;</span></span></code></pre></div></li></ul><h3 id="总结-1" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ul><li><strong>共同点</strong>：类和对象中的 <code>get</code> 和 <code>set</code> 都是通过属性描述符实现的，功能和机制相同，提供对属性的访问和赋值控制。</li><li><strong>区别</strong>：类中的 <code>get</code> 和 <code>set</code> 通常用于类实例的属性管理，定义在原型上，多个实例共享；对象中的 <code>get</code> 和 <code>set</code> 作用于单个对象，控制对象的特定属性行为。</li></ul>', 89);
const _hoisted_90 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_90);
}
const _11______ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _11______ as default
};
