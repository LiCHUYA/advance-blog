import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/image-20240824120912543.uLqxzCFx.png";
const _imports_1 = "/advance-blog/assets/原型链.nk0liDlg.png";
const _imports_2 = "/advance-blog/assets/image-20240824120106992.4zEClpg7.png";
const _imports_3 = "/advance-blog/assets/image-20240824120010835.FN5hVXKR.png";
const _imports_4 = "/advance-blog/assets/image-20240824120037432._IeNK-j_.png";
const _imports_5 = "/advance-blog/assets/image-20240824120154960.9Xns0C95.png";
const _imports_6 = "/advance-blog/assets/image-20240824120400792.iqGb51rc.png";
const _imports_7 = "/advance-blog/assets/image-20240824120412869.oQ7OdbfD.png";
const _imports_8 = "/advance-blog/assets/image-20240824120448020.XZ2hAqSk.png";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/01-js高级plus/10-_原型链与继承.md","filePath":"src/study-notes/01-学习笔记/01-js高级plus/10-_原型链与继承.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/01-js高级plus/10-_原型链与继承.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h2 id="原型与原型链" tabindex="-1">原型与原型链 <a class="header-anchor" href="#原型与原型链" aria-label="Permalink to &quot;原型与原型链&quot;">​</a></h2><p><img src="' + _imports_0 + '" alt="image-20240824120912543"></p><p><img src="' + _imports_1 + '" alt="原型链"></p><h3 id="_0-显式原型-prototype-与隐式原型-proto" tabindex="-1">**0.显式原型 (<code>prototype</code>) 与隐式原型 (<code>__proto__</code>) ** <a class="header-anchor" href="#_0-显式原型-prototype-与隐式原型-proto" aria-label="Permalink to &quot;**0.显式原型 (`prototype`) 与隐式原型 (`__proto__`) **&quot;">​</a></h3><p>在 JavaScript 中，<strong>函数</strong>和<strong>对象</strong>都有与原型相关的属性，但它们的作用和命名方式有所不同：</p><h4 id="_1-隐式原型-proto" tabindex="-1"><strong>1. 隐式原型 (<code>__proto__</code>)</strong> <a class="header-anchor" href="#_1-隐式原型-proto" aria-label="Permalink to &quot;**1. 隐式原型 (`__proto__`)**&quot;">​</a></h4><ul><li><strong>定义</strong>：<code>__proto__</code> 是每个对象（包括函数对象）都拥有的一个属性，它指向该对象的原型对象，即 <code>[[Prototype]]</code>。</li><li><strong>作用</strong>：<code>__proto__</code> 用于实现属性的继承。当访问对象的某个属性时，如果对象本身没有这个属性，JavaScript 引擎会沿着 <code>__proto__</code> 指向的原型链向上查找，直到找到该属性或者到达原型链的顶端。</li><li><strong>获取方式</strong>：虽然 <code>__proto__</code> 是浏览器提供的非标准属性，但可以通过它直接访问对象的原型。标准的获取方式是使用 <code>Object.getPrototypeOf</code> 方法。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 obj 的原型对象，通常是 Object.prototype</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 推荐的标准方式</span></span></code></pre></div><h4 id="_2-显式原型-prototype" tabindex="-1"><strong>2. 显式原型 (<code>prototype</code>)</strong> <a class="header-anchor" href="#_2-显式原型-prototype" aria-label="Permalink to &quot;**2. 显式原型 (`prototype`)**&quot;">​</a></h4><ul><li><strong>定义</strong>：<code>prototype</code> 是每个函数（包括构造函数）独有的一个属性，它本质上是一个对象，只有函数才有这个属性。<code>prototype</code> 指向的是一个包含所有实例共享属性和方法的对象，当使用 <code>new</code> 关键字来创建实例时，实例的 <code>__proto__</code> 会指向构造函数的 <code>prototype</code> 对象。</li><li><strong>作用</strong>：当使用构造函数创建新对象时，新对象的 <code>__proto__</code> 会被设置为构造函数的 <code>prototype</code>，从而实现通过原型链来继承构造函数 <code>prototype</code> 上的属性和方法。</li><li><strong>获取方式</strong>：<code>prototype</code> 直接通过函数来访问。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> age;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">sayHello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello, I&#39;m &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(p1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div><ul><li><strong>隐式原型 (<code>__proto__</code>)</strong>：对象通过 <code>__proto__</code> 属性来指向构造函数的 <code>prototype</code>，这是对象之间的继承关系链条。</li><li><strong>显式原型 (<code>prototype</code>)</strong>：构造函数通过 <code>prototype</code> 属性来定义它的实例共享的属性和方法。所有通过该构造函数创建的实例对象的 <code>__proto__</code> 都会指向这个 <code>prototype</code>。</li></ul><p>通过这种机制，JavaScript 实现了灵活的继承方式，允许对象共享行为而不必重复定义属性和方法。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 定义在显式原型上的方法</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">run</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot; is running&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Dog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// dog.__proto__ 指向 Animal.prototype，所以可以调用 run 方法</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dog.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 &quot;Dog is running&quot;</span></span></code></pre></div><p>这种结构使得 JavaScript 的原型链非常强大，允许对象和构造函数之间创建共享、继承关系，从而使代码更加简洁和可维护。</p><h3 id="_1-原型的概念和查看原型" tabindex="-1">1. 原型的概念和查看原型 <a class="header-anchor" href="#_1-原型的概念和查看原型" aria-label="Permalink to &quot;1. 原型的概念和查看原型&quot;">​</a></h3><p>在 JavaScript 中，每个对象都有一个特殊的内置属性 <code>[[Prototype]]</code>，这个属性通常称为对象的 <strong>原型</strong>（或隐式原型）。原型在对象的属性查找和继承中起到关键作用。</p><h4 id="早期的查看原型方式" tabindex="-1"><strong>早期的查看原型方式</strong> <a class="header-anchor" href="#早期的查看原型方式" aria-label="Permalink to &quot;**早期的查看原型方式**&quot;">​</a></h4><p>在早期的 ECMAScript 规范中，没有标准的方法来查看对象的 <code>[[Prototype]]</code>。不过，浏览器为对象提供了一个非标准属性 <code>__proto__</code>，可以用来访问和查看对象的原型。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 obj 的原型，通常是 Object.prototype</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(info.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 info 的原型，通常是 Object.prototype</span></span></code></pre></div><h4 id="es5-之后的标准方法" tabindex="-1"><strong>ES5 之后的标准方法</strong> <a class="header-anchor" href="#es5-之后的标准方法" aria-label="Permalink to &quot;**ES5 之后的标准方法**&quot;">​</a></h4><p>从 ECMAScript 5 开始，JavaScript 提供了一个标准方法 <code>Object.getPrototypeOf</code> 来获取对象的原型。这种方式更标准化，推荐在现代开发中使用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 同样输出 obj 的原型</span></span></code></pre></div><h3 id="_2-原型的作用" tabindex="-1">2. 原型的作用 <a class="header-anchor" href="#_2-原型的作用" aria-label="Permalink to &quot;2. 原型的作用&quot;">​</a></h3><p>原型在 JavaScript 的继承和属性查找机制中非常重要。当我们从一个对象中获取某个属性时，会触发 <code>[[Get]]</code> 操作：</p><ol><li><strong>在当前对象查找属性</strong>：首先，解释器会在当前对象中查找该属性。如果找到了，直接返回其值。</li><li><strong>沿着原型链查找属性</strong>：如果在当前对象中没有找到该属性，解释器会沿着 <code>[[Prototype]]</code> 链向上查找，直到找到该属性或到达原型链的末端。</li></ol><h4 id="原型链查找示例" tabindex="-1"><strong>原型链查找示例</strong> <a class="header-anchor" href="#原型链查找示例" aria-label="Permalink to &quot;**原型链查找示例**&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 如果对象本身没有某个属性，它会沿着原型链去查找</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj.age); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出 18，因为 obj 自身没有 age 属性，所以从原型中获取</span></span></code></pre></div><h3 id="_3-函数的原型和-prototype-属性" tabindex="-1">3. 函数的原型和 <code>prototype</code> 属性 <a class="header-anchor" href="#_3-函数的原型和-prototype-属性" aria-label="Permalink to &quot;3. 函数的原型和 `prototype` 属性&quot;">​</a></h3><p>在 JavaScript 中，函数也是对象，因此它们也有 <code>[[Prototype]]</code> 属性。此外，函数还具有一个特殊的属性 <code>prototype</code>，这个属性是用于创建新对象的原型。当我们使用 <code>new</code> 关键字来创建对象时，函数的 <code>prototype</code> 属性将作为新对象的原型。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 函数作为对象有 `[[Prototype]]` 属性</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(foo.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 函数还有 `prototype` 属性，用于创建实例的原型</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(f1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(f2.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div><h3 id="_4-使用-constructor-属性" tabindex="-1">4. 使用 <code>constructor</code> 属性 <a class="header-anchor" href="#_4-使用-constructor-属性" aria-label="Permalink to &quot;4. 使用 `constructor` 属性&quot;">​</a></h3><p>每个函数的 <code>prototype</code> 对象都有一个 <code>constructor</code> 属性，它指向函数自身。<code>constructor</code> 属性在对象创建和识别过程中起到重要作用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Person); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div><p>通过 <code>constructor</code> 属性，我们可以确定对象是由哪个构造函数创建的。</p><h3 id="_5-自定义原型对象的属性" tabindex="-1">5. 自定义原型对象的属性 <a class="header-anchor" href="#_5-自定义原型对象的属性" aria-label="Permalink to &quot;5. 自定义原型对象的属性&quot;">​</a></h3><p>我们可以在函数的 <code>prototype</code> 对象上添加自定义属性或方法，以供所有实例共享。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> age;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eating</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot; 在吃东西~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;kobe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">p1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eating</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// why 在吃东西~</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">p2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eating</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// kobe 在吃东西~</span></span></code></pre></div><h3 id="_6-直接修改-prototype-对象" tabindex="-1">6. 直接修改 <code>prototype</code> 对象 <a class="header-anchor" href="#_6-直接修改-prototype-对象" aria-label="Permalink to &quot;6. 直接修改 `prototype` 对象&quot;">​</a></h3><p>我们可以直接替换整个 <code>prototype</code> 对象，这种方式可以更方便地定义多个属性和方法。但要注意，直接替换 <code>prototype</code> 对象时，需要重新设置 <code>constructor</code> 属性，以确保它指向正确的构造函数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 直接修改整个 prototype 对象</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1.88</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> f1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(f1.name, f1.age, f1.height); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// why 18 1.88</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 恢复 constructor 属性</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;constructor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  value: foo</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> foo); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div><ul><li><strong>原型机制</strong> 是 JavaScript 实现继承和属性查找的核心机制。理解和使用 <code>[[Prototype]]</code> 对于掌握 JavaScript 的对象模型至关重要。</li><li><strong><code>__proto__</code> 和 <code>Object.getPrototypeOf</code></strong> 提供了访问对象原型的两种方式，推荐使用标准的 <code>Object.getPrototypeOf</code>。</li><li><strong><code>prototype</code> 和 <code>constructor</code></strong> 属性在对象创建和继承中起到重要作用，尤其是在构造函数和面向对象编程中。</li></ul><p>通过这些机制，JavaScript 实现了灵活的对象继承和共享行为，从而构建出复杂而高效的代码结构。</p><h3 id="_7-object-和-function-的关系" tabindex="-1">7.<strong>Object 和 Function 的关系</strong> <a class="header-anchor" href="#_7-object-和-function-的关系" aria-label="Permalink to &quot;7.**Object 和 Function 的关系**&quot;">​</a></h3><ol><li><p><strong><code>Object</code> 是一个函数</strong>：在 JavaScript 中，<code>Object</code> 是一个内置构造函数，用于创建对象。你可以通过 <code>typeof Object</code> 看到它的类型是 <code>function</code>，这意味着 <code>Object</code> 本质上是一个函数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &quot;function&quot;</span></span></code></pre></div></li><li><p><strong><code>Function</code> 也是一个函数</strong>：<code>Function</code> 是 JavaScript 中所有函数的构造函数。所有的函数（包括内置的 <code>Object</code> 函数）都是由 <code>Function</code> 构造出来的。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Function); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// &quot;function&quot;</span></span></code></pre></div></li><li><p><strong><code>Object.prototype.constructor</code></strong>：这个属性指向 <code>Object</code> 构造函数本身。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// [Function: Object]</span></span></code></pre></div></li><li><p><strong><code>Function.prototype.constructor</code></strong>：这个属性指向 <code>Function</code> 构造函数本身。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// [Function: Function]</span></span></code></pre></div></li></ol><h3 id="解释-object-是由-function-构造出来的" tabindex="-1"><strong>解释：<code>Object</code> 是由 <code>Function</code> 构造出来的</strong> <a class="header-anchor" href="#解释-object-是由-function-构造出来的" aria-label="Permalink to &quot;**解释：`Object` 是由 `Function` 构造出来的**&quot;">​</a></h3><p>在 JavaScript 的底层实现中，<code>Object</code> 作为一个函数，实际上是通过 <code>Function</code> 构造出来的。JavaScript 中，所有的函数都是由 <code>Function</code> 构造器生成的，而 <code>Object</code> 函数也不例外。</p><h3 id="javascript-的构造顺序" tabindex="-1"><strong>JavaScript 的构造顺序</strong> <a class="header-anchor" href="#javascript-的构造顺序" aria-label="Permalink to &quot;**JavaScript 的构造顺序**&quot;">​</a></h3><ul><li><strong><code>Function</code> 是最顶层的构造函数</strong>：它构造了包括 <code>Object</code> 在内的所有函数。</li><li><strong><code>Object</code> 是所有对象的原型顶层</strong>：它构造了 JavaScript 中所有的普通对象。</li></ul><p>这意味着，在 JavaScript 中，所有的函数都是 <code>Function</code> 的实例，而 <code>Object</code> 本身也是一个函数，所以 <code>Object</code> 是 <code>Function</code> 的实例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div><h3 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ul><li><code>Object</code> 是一个函数，它由 <code>Function</code> 构造。</li><li><code>Function</code> 是一个更高层次的构造函数，所有的函数（包括 <code>Object</code>）都是由 <code>Function</code> 创建的。</li><li>JavaScript 的这一构造顺序表明 <code>Function</code> 是所有函数的构造者，而 <code>Object</code> 是所有普通对象的构造者。</li></ul><p>所以，<code>Object</code> 确实可以被认为是通过 <code>new Function()</code> 构造出来的。这种关系表明了 JavaScript 的函数与对象之间深层次的联系与一致性。</p><h3 id="javascript-引擎中的核心概念" tabindex="-1"><strong>JavaScript 引擎中的核心概念</strong> <a class="header-anchor" href="#javascript-引擎中的核心概念" aria-label="Permalink to &quot;**JavaScript 引擎中的核心概念**&quot;">​</a></h3><p>首先，我们需要理解 JavaScript 的两个核心概念：<strong>函数</strong> 和 <strong>对象</strong>。</p><ul><li><strong>函数</strong> 是 JavaScript 的一等公民，可以用来创建其他对象或函数本身。</li><li><strong>对象</strong> 是 JavaScript 中的核心数据结构，几乎所有东西都是对象或继承自对象。</li></ul><p>在 JavaScript 的设计中，<strong>函数</strong> 实际上是特殊的对象。它们不仅可以被调用，还可以拥有自己的属性和方法。</p><h3 id="javascript-的原型链机制" tabindex="-1"><strong>JavaScript 的原型链机制</strong> <a class="header-anchor" href="#javascript-的原型链机制" aria-label="Permalink to &quot;**JavaScript 的原型链机制**&quot;">​</a></h3><p>在 JavaScript 中，每个<code>对象</code>都有一个隐式链接到其构造函数的原型对象，这就是所谓的原型链（prototype chain）。通过这条链，JavaScript 实现了继承机制。</p><p>例如：</p><ul><li><strong><code>Object</code> 是所有对象的顶层构造函数</strong>，因此所有对象最终都可以追溯到 <code>Object.prototype</code>。</li><li><strong><code>Function</code> 是所有函数的构造函数</strong>，包括 <code>Object</code> 在内，所有函数对象的原型都可以追溯到 <code>Function.prototype</code>。</li></ul><h3 id="深入探讨-v8-引擎中的实现" tabindex="-1"><strong>深入探讨：V8 引擎中的实现</strong> <a class="header-anchor" href="#深入探讨-v8-引擎中的实现" aria-label="Permalink to &quot;**深入探讨：V8 引擎中的实现**&quot;">​</a></h3><p>在 V8 引擎中，JavaScript 中的函数和对象是用 C++ 实现的类进行表示的。让我们更详细地看看这个机制。</p><ol><li><p><strong>Function 的实现</strong>：</p><ul><li>在 V8 中，<code>Function</code> 是所有<code>函数</code>和<code>对象的</code>基础类。它提供了函数的基本行为和原型链。</li><li><code>Function</code> 对象在 V8 中具有以下关键属性： <ul><li><strong>代码指针</strong>：指向函数的实际执行代码。</li><li><strong>闭包数据</strong>：用于支持 JavaScript 中的闭包。</li><li><strong>原型</strong>：每个函数都有一个指向其原型对象的链接。</li></ul></li></ul><p>示例伪代码：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 函数代码指针</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> code;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 原型对象指针</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    JSObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> prototype;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 闭包数据</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ClosureData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> closure;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><p>在这个类中，<code>JSFunction</code> 继承自 <code>JSObject</code>，这意味着函数本身也是一个对象，具有对象的所有特性。</p></li><li><p><strong>Object 的实现</strong>：</p><ul><li><code>Object</code> 在 V8 中是一个特殊的 <code>Function</code>，它定义了所有对象的基本行为。</li><li>在 V8 中，<code>Object</code> 是通过 <code>JSFunction</code> 类来实现的，这意味着它本质上是一个函数。</li></ul><p>示例伪代码：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 对象的属性存储</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    PropertyArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> properties;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 对象的原型链</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    JSObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> prototype;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public:</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 继承了 JSObject 的所有特性</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 加上函数特有的行为</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><p>这里，<code>JSObject</code> 类定义了对象的基本结构和行为，而 <code>JSFunction</code> 继承了 <code>JSObject</code>，扩展了函数特有的行为。</p></li><li><p><strong><code>Object</code> 是如何通过 <code>Function</code> 构造的</strong>：</p><ul><li>当你在 JavaScript 中使用 <code>Object</code> 时，实际上是在调用一个 <code>JSFunction</code> 类型的对象，它由 <code>Function</code> 构造函数生成。</li><li>因此，<code>Object</code> 自身是 <code>Function</code> 的实例，而 <code>Object.prototype</code> 是 <code>JSObject</code> 类型的实例。</li></ul><p>JavaScript 中的 <code>Object</code> 和 <code>Function</code> 是这样联系起来的：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FunctionConstructor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // Function 构造函数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ObjectConstructor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">   // Object 构造函数</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ObjectConstructor-&gt;prototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // Object 的原型是一个普通对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FunctionConstructor-&gt;prototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // Function 的原型也是一个对象</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Object 是 Function 的实例</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObjectConstructor-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">IsInstanceOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FunctionConstructor));</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Function 也是 Function 的实例</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FunctionConstructor-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">IsInstanceOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FunctionConstructor));</span></span></code></pre></div><p>以上<code>伪代码</code>展示了 V8 引擎如何处理 <code>Object</code> 和 <code>Function</code> 的关系。<code>Object</code> 和 <code>Function</code> 都是由 <code>JSFunction</code> 构造出来的，因此它们共享一些底层机制。</p></li></ol><h3 id="javascript-中的行为验证" tabindex="-1"><strong>JavaScript 中的行为验证</strong> <a class="header-anchor" href="#javascript-中的行为验证" aria-label="Permalink to &quot;**JavaScript 中的行为验证**&quot;">​</a></h3><p>这种底层关系可以通过 JavaScript 中的代码来验证：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div><p>以上代码验证了我们在 V8 中讨论的关系：<code>Object</code> 是 <code>Function</code> 的实例，同时 <code>Function</code> 也是 <code>Object</code> 的实例。两者的这种双向关系显示了 JavaScript 中对象和函数的互相关联性。</p><h3 id="小结" tabindex="-1"><strong>小结</strong> <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;**小结**&quot;">​</a></h3><ul><li>在 V8 引擎中，<code>Function</code> 是一个核心的构造函数，用来生成所有的函数对象，包括 <code>Object</code> 在内。</li><li><code>Object</code> 是 JavaScript 中的顶层对象构造函数，它本质上也是一个函数，由 <code>Function</code> 构造而来。</li><li>这种设计使得 JavaScript 中的对象和函数具有深层次的联系，体现了 JavaScript 语言的灵活性和一致性。</li></ul><h3 id="_8-小结object-和-function-的关系" tabindex="-1">8.小结<code>Object</code> 和 <code>Function</code> 的关系 <a class="header-anchor" href="#_8-小结object-和-function-的关系" aria-label="Permalink to &quot;8.小结`Object` 和 `Function` 的关系&quot;">​</a></h3><p>JavaScript 中 <code>Object</code> 和 <code>Function</code> 的关系及其显示原型和隐式原型的理解，对于深入掌握 JavaScript 的原型链机制至关重要。让我们从基础概念开始，并逐步深入分析和扩展。</p><h3 id="_1-基础概念-构造函数与实例" tabindex="-1"><strong>1. 基础概念：构造函数与实例</strong> <a class="header-anchor" href="#_1-基础概念-构造函数与实例" aria-label="Permalink to &quot;**1. 基础概念：构造函数与实例**&quot;">​</a></h3><ul><li><p><strong><code>Object</code> 构造函数</strong>：<code>Object</code> 是 JavaScript 中所有对象的顶层构造函数。你可以通过 <code>new Object()</code> 来创建一个新的对象实例，虽然通常直接使用字面量 <code>{}</code> 来创建对象。</p></li><li><p><strong><code>Function</code> 构造函数</strong>：<code>Function</code> 是所有函数的构造函数，JavaScript 中的每一个函数都是由 <code>Function</code> 构造函数创建的。即便是 <code>Object</code> 构造函数本身，也是由 <code>Function</code> 创建的。</p></li></ul><h3 id="_2-显式原型与隐式原型" tabindex="-1"><strong>2. 显式原型与隐式原型</strong> <a class="header-anchor" href="#_2-显式原型与隐式原型" aria-label="Permalink to &quot;**2. 显式原型与隐式原型**&quot;">​</a></h3><p>在 JavaScript 中，每个函数对象都有一个 <code>prototype</code> 属性，称为<strong>显式原型</strong>（也叫 <code>[[Prototype]]</code>），它定义了函数创建的实例对象的原型对象。此外，每个 JavaScript 对象（包括函数对象）都有一个内部属性 <code>__proto__</code>，称为<strong>隐式原型</strong>，它指向该对象的构造函数的原型对象。</p><ul><li><p><strong>显式原型 (<code>prototype</code>)</strong>：这是函数特有的属性，它指向该函数的实例的原型对象。例如，<code>Function.prototype</code> 是所有函数实例的原型对象。</p></li><li><p><strong>隐式原型 (<code>__proto__</code>)</strong>：这是所有 JavaScript 对象的内部属性（在某些浏览器中可以访问），它指向该对象的构造函数的 <code>prototype</code> 属性。</p></li></ul><h3 id="_3-object-和-function-的关系及其原型链" tabindex="-1"><strong>3. <code>Object</code> 和 <code>Function</code> 的关系及其原型链</strong> <a class="header-anchor" href="#_3-object-和-function-的关系及其原型链" aria-label="Permalink to &quot;**3. `Object` 和 `Function` 的关系及其原型链**&quot;">​</a></h3><h4 id="object-和-function-的基本关系" tabindex="-1"><strong><code>Object</code> 和 <code>Function</code> 的基本关系</strong> <a class="header-anchor" href="#object-和-function-的基本关系" aria-label="Permalink to &quot;**`Object` 和 `Function` 的基本关系**&quot;">​</a></h4><ul><li><p><strong><code>Object</code> 是一个函数</strong>：由于 <code>Object</code> 是一个构造函数，并且在 JavaScript 中所有构造函数都是函数，<code>Object</code> 本身是由 <code>Function</code> 构造的。因此，<code>Object</code> 是 <code>Function</code> 的实例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div></li><li><p><strong><code>Function</code> 也是一个对象</strong>：<code>Function</code> 本身是一个对象，它由 <code>Function</code> 构造函数创建，因此 <code>Function</code> 是 <code>Object</code> 的实例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div></li></ul><h4 id="function-作为构造函数和对象的双重身份" tabindex="-1"><strong><code>Function</code> 作为构造函数和对象的双重身份</strong> <a class="header-anchor" href="#function-作为构造函数和对象的双重身份" aria-label="Permalink to &quot;**`Function` 作为构造函数和对象的双重身份**&quot;">​</a></h4><p><code>Function</code> 在 JavaScript 中既是对象，也是构造函数。它的这种双重身份有助于理解 JavaScript 中的类与对象之间的关系。</p><ul><li><strong>作为对象</strong>: <code>Function</code> 具有对象的所有特性，可以拥有属性和方法。</li><li><strong>作为构造函数</strong>: <code>Function</code> 可以用来创建新的函数对象，这些函数对象本身也是 <code>Function</code> 构造函数的实例。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>function example() {} // 这是一个通过 Function 构造函数创建的函数</span></span>\n<span class="line"><span>console.log(example.constructor === Function); // 输出: true</span></span></code></pre></div><h4 id="object-的显式和隐式原型" tabindex="-1"><strong><code>Object</code> 的显式和隐式原型</strong> <a class="header-anchor" href="#object-的显式和隐式原型" aria-label="Permalink to &quot;**`Object` 的显式和隐式原型**&quot;">​</a></h4><ul><li><p><strong><code>Object.prototype</code></strong>：<code>Object</code> 构造函数的显式原型。它是所有对象的原型，几乎所有对象都能通过原型链追溯到 <code>Object.prototype</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// [Object: null prototype] {}</span></span></code></pre></div></li><li><p><strong><code>Object.__proto__</code></strong>：<code>Object</code> 构造函数的隐式原型。因为 <code>Object</code> 是由 <code>Function</code> 构造出来的，因此 <code>Object.__proto__</code> 指向 <code>Function.prototype</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Object.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div></li></ul><h4 id="function-的显式和隐式原型" tabindex="-1"><strong><code>Function</code> 的显式和隐式原型</strong> <a class="header-anchor" href="#function-的显式和隐式原型" aria-label="Permalink to &quot;**`Function` 的显式和隐式原型**&quot;">​</a></h4><ul><li><p><strong><code>Function.prototype</code></strong>：<code>Function</code> 构造函数的显式原型。它是所有函数对象的原型。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// [Function: empty]</span></span></code></pre></div></li><li><p><strong><code>Function.__proto__</code></strong>：<code>Function</code> 构造函数的隐式原型。因为 <code>Function</code> 是一个对象，它的隐式原型指向 <code>Object.prototype</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Function.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// false</span></span></code></pre></div></li></ul><h4 id="关系的扩展分析" tabindex="-1"><strong>关系的扩展分析</strong> <a class="header-anchor" href="#关系的扩展分析" aria-label="Permalink to &quot;**关系的扩展分析**&quot;">​</a></h4><p>在 JavaScript 中，<code>Function</code> 和 <code>Object</code> 构造函数是非常基础的内置对象，它们在引擎初始化时就被创建。在 V8 引擎中，虽然 <code>Function</code> 构造函数看起来是“顶级”的，但它们的创建过程其实有一些复杂的相互依赖。接下来我们将更详细地剖析它们在 V8 中的初始化过程，并探讨它们之间的关系。</p><h5 id="_1-v8-初始化流程的细节" tabindex="-1">1. V8 初始化流程的细节 <a class="header-anchor" href="#_1-v8-初始化流程的细节" aria-label="Permalink to &quot;1. V8 初始化流程的细节&quot;">​</a></h5><h6 id="_1-0-jsfunction-和-jsobject" tabindex="-1">1.0 <strong><code>JSFunction</code> 和 <code>JSObject</code></strong> <a class="header-anchor" href="#_1-0-jsfunction-和-jsobject" aria-label="Permalink to &quot;1.0 **`JSFunction` 和 `JSObject`**&quot;">​</a></h6><p>在 V8 中，<code>Function</code> 和 <code>Object</code> 都是通过 <code>JSFunction</code> 和 <code>JSObject</code> 类来实现的。</p><ul><li><p><strong><code>JSObject</code></strong>: 这是 V8 中的一个基类，所有 JavaScript 对象的内部表示都继承自它。<code>JSObject</code> 提供了对象的基本属性和方法。</p></li><li><p><strong><code>JSFunction</code></strong>: 这是继承自 <code>JSObject</code> 的一个类，专门用于表示 JavaScript 中的函数。<code>JSFunction</code> 包含了与函数调用相关的元数据和行为，比如代码执行上下文等。</p></li><li><p><strong>V8 中的原型链实现</strong>: V8 通过 <code>Map</code> 对象来管理 JavaScript 对象的形态（即原型链结构）。<code>Map</code> 对象维护了一个指向对象原型的指针，从而形成了对象之间的继承链。</p></li><li><p><strong><code>Function.prototype</code> 的 <code>Map</code></strong>: 在 V8 中，<code>Function.prototype</code> 的 <code>Map</code> 对象指向 <code>Object.prototype</code> 的 <code>Map</code>。这表明 <code>Function.prototype</code> 继承自 <code>Object.prototype</code>。</p></li><li><p><strong><code>Function</code> 本身的 <code>Map</code></strong>: 由于 <code>Function</code> 是一个对象，它也有自己的 <code>Map</code>，该 <code>Map</code> 的原型指向 <code>Function.prototype</code>，从而形成一个完整的原型链。</p></li></ul><h6 id="_1-01-继承的实现" tabindex="-1">1.01 继承的实现 <a class="header-anchor" href="#_1-01-继承的实现" aria-label="Permalink to &quot;1.01 继承的实现&quot;">​</a></h6><p>以下是 V8 源代码中一些核心片段，用于展示 <code>Function</code> 和 <code>Object</code> 的关系：</p><ul><li><p><strong><code>JSObject</code> 类定义</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">class JSObject : public HeapObject {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // JSObject 是所有对象的基类</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div></li><li><p><strong><code>JSFunction</code> 类定义</strong>:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">class JSFunction : public JSObject {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // JSFunction 继承自 JSObject</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div></li><li><p><strong><code>Map</code> 初始化</strong>: 在 V8 的初始化过程中，<code>Function</code> 和 <code>Object</code> 的 <code>Map</code> 对象被设置为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>function_map-&gt;SetPrototype(function_prototype_map);</span></span>\n<span class="line"><span>function_prototype_map-&gt;SetPrototype(object_prototype_map);</span></span></code></pre></div></li></ul><p>以上展示了<code>Function</code> 的 <code>Map</code> 对象的原型指向 <code>Function.prototype</code> 的 <code>Map</code>，而 <code>Function.prototype</code> 的 <code>Map</code> 的原型又指向 <code>Object.prototype</code> 的 <code>Map</code>。</p><h6 id="_1-1-初始阶段-function-的特殊地位" tabindex="-1">1.1 初始阶段：<code>Function</code> 的特殊地位 <a class="header-anchor" href="#_1-1-初始阶段-function-的特殊地位" aria-label="Permalink to &quot;1.1 初始阶段：`Function` 的特殊地位&quot;">​</a></h6><p>在 V8 中，JavaScript 的引擎初始化涉及大量的对象和构造函数的创建。我们可以在 <code>src/objects/objects.cc</code> 和 <code>src/objects/js-objects.cc</code> 中找到相关代码。</p><p>首先，<code>Function</code> 的确被视为一种特殊的构造函数，因为它不仅是一个函数对象，而且是所有函数对象的原型。<strong>在 V8 中，所有的函数（包括内置构造函数如 <code>Object</code>）都是通过 <code>Function</code> 构造函数生成的。</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function_fun </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">function_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), JS_OBJECT_TYPE, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::kHeaderSize, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">null_value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Builtins</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::kIllegal, kNoSourcePosition);</span></span></code></pre></div><p>通过工厂函数 <code>NewFunction</code> 创建一个新的 <code>Function</code> 对象。这个对象被存储在环境（<code>env</code>）中，作为全局 <code>Function</code> 构造函数的定义。</p><p><strong>这里需要注意：</strong> 虽然 <code>Function</code> 是作为顶级构造函数来处理的，它依然是通过 <code>NewFunction</code> 工厂函数生成的，而不是直接硬编码在引擎中。这意味着 <code>Function</code> 也需要经历一个创建的过程，尽管这个过程是非常早期的。</p><h6 id="_1-2-object-的创建与依赖" tabindex="-1">1.2 <code>Object</code> 的创建与依赖 <a class="header-anchor" href="#_1-2-object-的创建与依赖" aria-label="Permalink to &quot;1.2 `Object` 的创建与依赖&quot;">​</a></h6><p>在 <code>Function</code> 构造函数创建完成之后，<code>Object</code> 构造函数才会被创建。V8 引擎确保 <code>Object</code> 是由 <code>Function</code> 创建的，以保持一致性。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> object_fun </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> NewFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">object_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), JS_OBJECT_TYPE, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::kHeaderSize);</span></span></code></pre></div><p>上面的代码展示了 <code>Object</code> 构造函数的初始化，它是通过同样的 <code>NewFunction</code> 工厂函数创建的。但是，因为 <code>Function</code> 构造函数已经存在，<code>Object</code> 的构建可以依赖 <code>Function</code>。</p><h6 id="_1-3-构造函数的互相依赖" tabindex="-1">1.3 构造函数的互相依赖 <a class="header-anchor" href="#_1-3-构造函数的互相依赖" aria-label="Permalink to &quot;1.3 构造函数的互相依赖&quot;">​</a></h6><p>最重要的部分是，**V8 确保 <code>Function</code> 构造函数是所有其他函数的“构造者”，而其他所有函数，包括 <code>Object</code>，都是由 <code>Function</code> 创建的。**这意味着即使 <code>Object</code> 是一个构造函数，它本质上也是 <code>Function</code> 构造函数的一个实例。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Assign the newly created function to be the prototype of all functions.</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">function_fun-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetPrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">initial_function_prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span></code></pre></div><p>在这段代码中，<code>Function</code> 的原型被设置为一个新的 <code>Function</code> 实例，这确保了所有函数都共享同一个原型链。</p><h5 id="_2-function-是-顶级-构造函数的意义" tabindex="-1">2. <code>Function</code> 是“顶级”构造函数的意义 <a class="header-anchor" href="#_2-function-是-顶级-构造函数的意义" aria-label="Permalink to &quot;2. `Function` 是“顶级”构造函数的意义&quot;">​</a></h5><p>从 V8 的实现角度来看，<code>Function</code> 是所有构造函数的原型，这使它在某种意义上成为“顶级”构造函数。但在实现细节上，<code>Function</code> 依然需要通过引擎的工厂方法生成。</p><p>在 V8 的设计中，这样的实现方式保证了：</p><ol><li><strong>一致性</strong>：所有函数都来自同一个构造函数（<code>Function</code>）。</li><li><strong>灵活性</strong>：通过工厂方法创建对象，使得初始化过程更易于管理和维护。</li></ol><blockquote><p>在 V8 中，<code>Function</code> 构造函数确实占据了“顶级”的地位，但它仍然需要通过工厂函数 <code>NewFunction</code> 来生成。而 <code>Object</code> 构造函数，则是在 <code>Function</code> 创建之后再生成的，这确保了 <code>Object</code> 也能够继承 <code>Function</code> 的特性。</p><p>通过这样的设计，V8 维持了 JavaScript 语言的逻辑一致性，使得所有函数都共享同一个原型链，保证了语言的灵活性和扩展性。这种复杂的相互依赖也展示了 JavaScript 引擎的精巧设计。</p></blockquote><p>V8 引擎中的工厂函数（Factory Functions）是用来创建各种 JavaScript 对象的关键机制。它们为不同类型的对象提供了一个统一的创建接口，从而使对象的初始化更加规范和高效。了解这些工厂函数是如何工作的，有助于深入理解 V8 是如何实现 JavaScript 引擎的核心功能的。</p><h5 id="v8中的-工厂函数的概述" tabindex="-1">V8中的 工厂函数的概述 <a class="header-anchor" href="#v8中的-工厂函数的概述" aria-label="Permalink to &quot;V8中的 工厂函数的概述&quot;">​</a></h5><p>在 V8 中，工厂函数是专门用于创建和初始化各种内置对象的函数。这些工厂函数封装了对象的创建逻辑、内存分配，以及一些初始属性的设置。在 V8 的实现中，工厂函数通常会被定义在 <code>Factory</code> 类中，而这个类本身位于 <code>src/heap/factory.h</code> 和 <code>src/heap/factory.cc</code> 文件中。</p><h5 id="工厂函数的实现细节" tabindex="-1">工厂函数的实现细节 <a class="header-anchor" href="#工厂函数的实现细节" aria-label="Permalink to &quot;工厂函数的实现细节&quot;">​</a></h5><h6 id="_2-1-newfunction-工厂函数" tabindex="-1">2.1 <code>NewFunction</code> 工厂函数 <a class="header-anchor" href="#_2-1-newfunction-工厂函数" aria-label="Permalink to &quot;2.1 `NewFunction` 工厂函数&quot;">​</a></h6><p><code>NewFunction</code> 是一个关键的工厂函数，用于创建 JavaScript 中的函数对象。我们以 <code>NewFunction</code> 为例，深入剖析它的实现。</p><p>首先，来看一个典型的 <code>NewFunction</code> 的声明：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">                                        Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">initial_map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">                                        int</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> number_of_properties</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">                                        Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">                                        BuiltinFunctionId</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">                                        FunctionKind</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> kind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 具体的实现逻辑</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在这个函数中，<code>Factory::NewFunction</code> 用来创建一个新的 JavaScript 函数对象（<code>JSFunction</code>），它需要多个参数：</p><ul><li><code>name</code>: 函数的名称，通常是 <code>Function</code> 或者其他构造函数的名称。</li><li><code>initial_map</code>: 该函数对象的初始 <code>Map</code>（V8 中用来描述对象布局的结构）。</li><li><code>number_of_properties</code>: 初始属性的数量。</li><li><code>prototype</code>: 该函数对象的原型。</li><li><code>id</code>: 内建函数的 ID，通常用于标识一些特殊的内置函数。</li><li><code>kind</code>: 函数的类型，决定了它是普通函数还是特殊类型的函数（如箭头函数）。</li></ul><h6 id="_2-2-工厂函数的工作流程" tabindex="-1">2.2 工厂函数的工作流程 <a class="header-anchor" href="#_2-2-工厂函数的工作流程" aria-label="Permalink to &quot;2.2 工厂函数的工作流程&quot;">​</a></h6><p>以下是 <code>NewFunction</code> 工厂函数的核心流程：</p><ol><li><p><strong>创建空函数对象</strong>： 通过 <code>Allocate</code> 函数分配内存，创建一个空的 <code>JSFunction</code> 对象。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">cast</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">AllocateJSObjectFromMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(initial_map));</span></span></code></pre></div><p>这里的 <code>AllocateJSObjectFromMap</code> 是另一个内部函数，它根据传入的 <code>Map</code> 创建对象，并分配相应的内存。</p></li><li><p><strong>设置初始属性</strong>： 工厂函数会对这个新创建的函数对象设置一些基本属性，如函数名称、原型链等。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">function-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_prototype_or_initial_map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">prototype);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">function-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_shared</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">shared_function_info);</span></span></code></pre></div></li><li><p><strong>配置 <code>Map</code> 和原型</strong>： V8 会根据函数的种类，为其配置合适的 <code>Map</code> 对象，并设置函数的原型。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">function-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">set_map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">initial_map);</span></span></code></pre></div><p>这里的 <code>Map</code> 是 V8 中非常重要的一个数据结构，它定义了对象的属性布局和方法表。</p></li><li><p><strong>返回函数对象</strong>： 在完成所有的配置后，<code>NewFunction</code> 会返回这个函数对象，以供后续使用。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> function;</span></span></code></pre></div></li></ol><h5 id="_3-工厂函数的应用场景" tabindex="-1">3. 工厂函数的应用场景 <a class="header-anchor" href="#_3-工厂函数的应用场景" aria-label="Permalink to &quot;3. 工厂函数的应用场景&quot;">​</a></h5><p>V8 中的工厂函数不仅用于创建 <code>Function</code> 对象，还广泛用于创建其他 JavaScript 内置对象，比如 <code>Object</code>、<code>Array</code>、<code>RegExp</code> 等。每种类型的对象都有相应的工厂函数，负责管理对象的内存分配、原型设置和初始状态配置。</p><h6 id="_3-1-newobject-工厂函数" tabindex="-1">3.1 <code>NewObject</code> 工厂函数 <a class="header-anchor" href="#_3-1-newobject-工厂函数" aria-label="Permalink to &quot;3.1 `NewObject` 工厂函数&quot;">​</a></h6><p>类似于 <code>NewFunction</code>，<code>NewObject</code> 工厂函数用于创建一个普通的 <code>Object</code> 对象：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">NewObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">PretenureFlag</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;"> pretenure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> NOT_TENURED) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(constructor-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">initial_map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isolate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> NewJSObjectFromMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(map, pretenure);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>这里，<code>NewJSObjectFromMap</code> 被用来根据传入的 <code>Map</code> 创建一个新的对象。<code>Map</code> 确定了对象的属性布局，因此可以根据不同的 <code>Map</code> 创建不同类型的对象。</p><h5 id="_4-工厂函数在引擎中的作用" tabindex="-1">4. 工厂函数在引擎中的作用 <a class="header-anchor" href="#_4-工厂函数在引擎中的作用" aria-label="Permalink to &quot;4. 工厂函数在引擎中的作用&quot;">​</a></h5><p>工厂函数为 V8 提供了一种统一的对象创建机制，使得内置对象的创建更加标准化。通过这种机制，V8 能够更好地管理内存、优化对象分配，并且提供了一致的接口，便于维护和扩展。</p><h5 id="_5-总结" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h5><p>V8 中的工厂函数如 <code>NewFunction</code> 和 <code>NewObject</code> 承担了对象创建和初始化的关键任务。通过将对象的创建逻辑集中在这些工厂函数中，V8 引擎能够确保所有内置对象的创建过程是可控的、可扩展的。这些工厂函数不仅管理了内存的分配，还确保了对象的属性布局、原型链的设置等关键配置，从而保证了 JavaScript 运行时的稳定性和一致性。</p><p>希望这些详细的解释能帮助你更好地理解 V8 引擎中工厂函数的工作原理和重要性。如果你对某个特定的工厂函数或其他细节有更多疑问，随时可以继续深入讨论。</p><ul><li><p><strong>循环引用与自举机制</strong>：在 JavaScript 中，<code>Object</code> 和 <code>Function</code> 之间有一个循环引用的关系。<code>Object</code> 是由 <code>Function</code> 构造出来的，而 <code>Function</code> 本身又是一个对象，由 <code>Object</code> 构造。因此在 JavaScript 的引擎实现中，需要通过一种自举机制（bootstrap mechanism）来处理这种循环关系。这种机制确保了语言中的基本类型可以相互引用和依赖。</p><p>循环引用与自举机制在 V8 引擎中的实现是 JavaScript 引擎启动时的关键步骤。自举机制（Bootstrap Mechanism）是指在引擎初始化时如何建立基本的对象和函数结构，从而使得 <code>Object</code> 和 <code>Function</code> 可以相互引用。这种机制确保了 JavaScript 运行时环境中，<code>Object</code> 和 <code>Function</code> 能够正确地工作。</p></li></ul><h5 id="自举机制的实现概述" tabindex="-1"><strong>自举机制的实现概述</strong> <a class="header-anchor" href="#自举机制的实现概述" aria-label="Permalink to &quot;**自举机制的实现概述**&quot;">​</a></h5><p>在 V8 中，<code>Object</code> 和 <code>Function</code> 之间的循环引用问题是通过自举机制解决的。在引擎启动时，V8 逐步建立起基本的构造函数和原型链关系。以下是一个简化的伪代码示例，展示了这一过程。</p><h5 id="v8-自举机制的伪代码示例" tabindex="-1"><strong>V8 自举机制的伪代码示例</strong> <a class="header-anchor" href="#v8-自举机制的伪代码示例" aria-label="Permalink to &quot;**V8 自举机制的伪代码示例**&quot;">​</a></h5><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建 Function.prototype 对象 (这个对象是普通对象，但稍后将作为所有函数对象的原型)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FunctionPrototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建 Object.prototype 对象 (普通对象，所有对象最终的原型)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ObjectPrototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建 Function 构造函数 (这是一个函数，因此也是一个对象)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FunctionConstructor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FunctionPrototype);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 Function.prototype.constructor 为 Function 构造函数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FunctionPrototype-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FunctionConstructor);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 Object 构造函数 (Object 是 Function 的实例，因此也由 Function 构造)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ObjectConstructor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> JSFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FunctionPrototype);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 Object.prototype.constructor 为 Object 构造函数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ObjectPrototype-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObjectConstructor);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 现在设置 Function 构造函数的原型 (Function 也是 Object 的实例，因此其原型指向 Object.prototype)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FunctionConstructor-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetPrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObjectPrototype);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 Object 构造函数的原型 (Object 是 Function 的实例，因此其隐式原型指向 Function.prototype)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ObjectConstructor-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetPrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FunctionPrototype);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 Function 构造函数的隐式原型 (Function 本身也是一个对象，因此其隐式原型是 Object.prototype)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FunctionConstructor-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetPrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObjectPrototype);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 Object 构造函数的隐式原型 (Object 本身也是一个函数，因此其隐式原型是 Function.prototype)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ObjectConstructor-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetPrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FunctionPrototype);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 将 Function.prototype 的隐式原型设为 Object.prototype (这是原型链的终点)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">FunctionPrototype-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetPrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObjectPrototype);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 将 Object.prototype 的隐式原型设为 null (原型链的终点)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ObjectPrototype-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetPrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">nullptr</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><h5 id="关键点解释" tabindex="-1"><strong>关键点解释</strong> <a class="header-anchor" href="#关键点解释" aria-label="Permalink to &quot;**关键点解释**&quot;">​</a></h5><ol><li><p><strong>创建基础原型对象</strong>：</p><ul><li><code>FunctionPrototype</code> 是所有函数的原型对象。</li><li><code>ObjectPrototype</code> 是所有对象的原型对象。</li></ul></li><li><p><strong>构造 <code>Function</code> 和 <code>Object</code></strong>：</p><ul><li><code>FunctionConstructor</code> 是 <code>Function</code> 构造函数，它是所有函数（包括 <code>Object</code> 和 <code>Function</code> 本身）的构造函数。</li><li><code>ObjectConstructor</code> 是 <code>Object</code> 构造函数，它是所有对象的构造函数。</li></ul></li><li><p><strong>设置原型链</strong>：</p><ul><li><code>FunctionPrototype</code> 的 <code>constructor</code> 指向 <code>FunctionConstructor</code>，这意味着 <code>Function.prototype.constructor</code> 是 <code>Function</code>。</li><li><code>ObjectPrototype</code> 的 <code>constructor</code> 指向 <code>ObjectConstructor</code>，这意味着 <code>Object.prototype.constructor</code> 是 <code>Object</code>。</li></ul></li><li><p><strong>建立循环引用</strong>：</p><ul><li><code>ObjectConstructor</code> 的隐式原型 <code>__proto__</code> 指向 <code>FunctionPrototype</code>，表示 <code>Object</code> 是 <code>Function</code> 的实例。</li><li><code>FunctionConstructor</code> 的隐式原型 <code>__proto__</code> 指向 <code>ObjectPrototype</code>，表示 <code>Function</code> 也是 <code>Object</code> 的实例。</li></ul></li><li><p><strong>终止原型链</strong>：</p><ul><li><code>ObjectPrototype</code> 的隐式原型 <code>__proto__</code> 指向 <code>null</code>，这意味着原型链在此终止。</li></ul></li></ol><h5 id="自举机制的实际意义" tabindex="-1"><strong>自举机制的实际意义</strong> <a class="header-anchor" href="#自举机制的实际意义" aria-label="Permalink to &quot;**自举机制的实际意义**&quot;">​</a></h5><p>在 V8 中，这个自举机制的实现非常复杂，涉及到很多内部优化和内存管理。但核心思想是：</p><ul><li><strong>解决循环依赖</strong>：通过逐步构建和相互引用，解决了 <code>Object</code> 和 <code>Function</code> 之间的循环依赖问题。</li><li><strong>创建一致的运行环境</strong>：确保所有对象和函数都有一致的原型链结构，这为 JavaScript 提供了统一的继承机制。</li></ul><h5 id="v8-中的实际代码片段" tabindex="-1"><strong>V8 中的实际代码片段</strong> <a class="header-anchor" href="#v8-中的实际代码片段" aria-label="Permalink to &quot;**V8 中的实际代码片段**&quot;">​</a></h5><p>在 V8 的源码中，类似的过程发生在 <code>src/init/bootstrapper.cc</code> 文件中。下面是一个简化的实际代码片段示例：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Function </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 创建 Function 构造函数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> FunctionPrototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 创建 Function.prototype</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 Function.prototype 的构造函数为 Function</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FunctionPrototype, Function);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 Function 构造函数的 prototype 为 Function.prototype</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Function-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetPrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FunctionPrototype);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 创建 Object 构造函数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">JSObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ObjectPrototype </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 创建 Object.prototype</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 Object.prototype 的构造函数为 Object</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">JSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObjectPrototype, Object);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 Object 构造函数的 prototype 为 Function.prototype</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetPrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(FunctionPrototype);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 设置 Function 构造函数的隐式原型为 Object.prototype</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Function-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">SetPrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(ObjectPrototype);</span></span></code></pre></div><p>通过这种自举机制，V8 能够建立起所有对象和函数的基本关系，使 JavaScript 引擎能够正常工作。</p><h5 id="总结-1" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;**总结**&quot;">​</a></h5><p>V8 引擎通过自举机制解决了 <code>Object</code> 和 <code>Function</code> 之间的循环引用问题。它首先创建基础原型对象，然后逐步构建 <code>Object</code> 和 <code>Function</code> 之间的引用关系，最终形成完整且一致的原型链结构。这种机制确保了 JavaScript 语言的基础类型可以相互引用，从而支持复杂的继承和对象构建模型。</p><ul><li><p><strong>原型链的终点</strong>：在 JavaScript 的原型链中，<code>Object.prototype</code> 是大多数对象的原型链终点。它的 <code>__proto__</code> 是 <code>null</code>，这意味着再往上追溯原型链时会到达终点。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// null</span></span></code></pre></div></li></ul><h3 id="_4-object-和-function-的复杂性及其扩展" tabindex="-1"><strong>4. <code>Object</code> 和 <code>Function</code> 的复杂性及其扩展</strong> <a class="header-anchor" href="#_4-object-和-function-的复杂性及其扩展" aria-label="Permalink to &quot;**4. `Object` 和 `Function` 的复杂性及其扩展**&quot;">​</a></h3><h4 id="内置对象与自定义函数" tabindex="-1"><strong>内置对象与自定义函数</strong> <a class="header-anchor" href="#内置对象与自定义函数" aria-label="Permalink to &quot;**内置对象与自定义函数**&quot;">​</a></h4><ul><li><p>所有的内置对象（如 <code>Array</code>, <code>Date</code>, <code>RegExp</code>）都是 <code>Object</code> 的实例，并且它们的构造函数（如 <code>Array</code>, <code>Date</code>）都是 <code>Function</code> 的实例。因此，这些构造函数也遵循 <code>Object</code> 和 <code>Function</code> 之间的关系。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Array.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div></li><li><p>自定义函数和对象也遵循同样的关系。每个自定义函数都是 <code>Function</code> 的实例，每个自定义对象都是 <code>Object</code> 的实例。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CustomFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> customObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> CustomFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(CustomFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(customObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// true</span></span></code></pre></div></li></ul><h4 id="原型链的动态性" tabindex="-1"><strong>原型链的动态性</strong> <a class="header-anchor" href="#原型链的动态性" aria-label="Permalink to &quot;**原型链的动态性**&quot;">​</a></h4><ul><li><p>JavaScript 的原型链是动态的，这意味着可以在运行时修改对象或函数的原型属性。例如，你可以改变函数的 <code>prototype</code> 属性，这将影响所有新创建的实例的原型链。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> MyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">MyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> MyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// { a: 1 }</span></span></code></pre></div></li><li><p><strong><code>Object</code> 和 <code>Function</code> 的关系</strong>：<code>Object</code> 是由 <code>Function</code> 构造的函数，而 <code>Function</code> 是由 <code>Object</code> 构造的对象。这种双向关系体现了 JavaScript 设计中的一致性和互通性。</p></li><li><p><strong>显式原型与隐式原型</strong>：显式原型 <code>prototype</code> 是函数特有的，用来定义实例的原型对象；隐式原型 <code>__proto__</code> 是所有对象（包括函数）的内部属性，用来指向构造函数的原型对象。</p></li><li><p><strong>原型链</strong>：原型链是 JavaScript 继承机制的核心，<code>Object.prototype</code> 是绝大多数对象原型链的终点，而 <code>Function.prototype</code> 是所有函数对象的原型。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34459469/1723784344929-9eb37acf-ebd8-4ca4-b324-3e07d73d18e6.png?x-oss-process=image%2Fformat%2Cwebp" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34459469/1723784369873-1c834861-53be-421c-b596-4eb6548de6cc.png?x-oss-process=image%2Fformat%2Cwebp" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34459469/1723861882393-b3c542ca-273c-4bd7-a0da-49caae851720.png?x-oss-process=image%2Fformat%2Cwebp%2Fresize%2Cw_537%2Climit_0" alt="image.png"></p></li><li><p>直接赋值{} 的话,需要这样去添加构造器</p></li><li><p>普通的属性不能直接放原型 会被替换 一般只在原型上放函数</p></li></ul><h2 id="继承的实现" tabindex="-1">继承的实现 <a class="header-anchor" href="#继承的实现" aria-label="Permalink to &quot;继承的实现&quot;">​</a></h2><h3 id="_1-原型链继承" tabindex="-1">1.原型链继承 <a class="header-anchor" href="#_1-原型链继承" aria-label="Permalink to &quot;1.原型链继承&quot;">​</a></h3><p><img src="' + _imports_2 + '" alt="image-20240824120106992"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 父类: 公共属性和方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;why&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.friends </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> []</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eating</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot; eating~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 子类: 特有属性和方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.sno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 111</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">studying</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot; studying~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// name/sno</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stu </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// console.log(stu.name)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// stu.eating()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// stu.studying()</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 原型链实现继承的弊端:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1.第一个弊端: 打印stu对象, 继承的属性是看不到的</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// console.log(stu.name)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2.第二个弊端: 创建出来两个stu的对象</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stu1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stu2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 直接修改对象上的属性, 是给本对象添加了一个新属性</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">stu1.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;kobe&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(stu2.name)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 获取引用, 修改引用中的值, 会相互影响</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">stu1.friends.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;kobe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(stu1.friends)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(stu2.friends)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 3.第三个弊端: 在前面实现类的过程中都没有传递参数</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stu3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;lilei&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">112</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p><img src="' + _imports_3 + '" alt="image-20240824120010835"></p><h3 id="_2-构造函数继承" tabindex="-1">2.构造函数继承 <a class="header-anchor" href="#_2-构造函数继承" aria-label="Permalink to &quot;2.构造函数继承&quot;">​</a></h3><p><img src="' + _imports_4 + '" alt="image-20240824120037432"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 父类: 公共属性和方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">friends</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // this = stu</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> age</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.friends </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> friends</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eating</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot; eating~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 子类: 特有属性和方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">friends</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">sno</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, name, age, friends)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // this.name = name</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // this.age = age</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // this.friends = friends</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.sno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 111</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> p</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">studying</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot; studying~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// name/sno</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stu </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;kobe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// console.log(stu.name)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// stu.eating()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// stu.studying()</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 原型链实现继承已经解决的弊端</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1.第一个弊端: 打印stu对象, 继承的属性是看不到的</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(stu)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2.第二个弊端: 创建出来两个stu的对象</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stu1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;lilei&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stu2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;kobe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;james&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">112</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// // 直接修改对象上的属性, 是给本对象添加了一个新属性</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// stu1.name = &quot;kobe&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// console.log(stu2.name)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// // 获取引用, 修改引用中的值, 会相互影响</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">stu1.friends.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;lucy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(stu1.friends)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(stu2.friends)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// // 3.第三个弊端: 在前面实现类的过程中都没有传递参数</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// var stu3 = new Student(&quot;lilei&quot;, 112)</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 强调: 借用构造函数也是有弊端:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1.第一个弊端: Person函数至少被调用了两次</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2.第二个弊端: stu的原型对象上会多出一些属性, 但是这些属性是没有存在的必要</span></span></code></pre></div><h3 id="_3-父类原型赋值给子类" tabindex="-1">3.父类原型赋值给子类 <a class="header-anchor" href="#_3-父类原型赋值给子类" aria-label="Permalink to &quot;3.父类原型赋值给子类&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 父类: 公共属性和方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">friends</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // this = stu</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> age</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.friends </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> friends</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eating</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot; eating~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 子类: 特有属性和方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">friends</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">sno</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, name, age, friends)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // this.name = name</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // this.age = age</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // this.friends = friends</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.sno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 111</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 直接将父类的原型赋值给子类, 作为子类的原型</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">studying</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot; studying~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// name/sno</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stu </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;kobe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(stu)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">stu.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eating</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span></code></pre></div><p>当尝试通过 <code>student.prototype = person.prototype</code> 的方式让 <code>student</code> 继承 <code>person</code> 时，会产生一个严重的问题。因为这样做实际上是将 <code>student.prototype</code> 和 <code>person.prototype</code> 指向了<strong>同一个对象</strong>。如果此时再创建另一个类 <code>teacher</code> 并通过同样的方式让它继承 <code>person</code>，即 <code>teacher.prototype = person.prototype</code>，那么 <code>student.prototype</code> 和 <code>teacher.prototype</code> 都会指向同一个原型对象。</p><ul><li>当你修改 <code>student</code> 的原型（例如，给 <code>student</code> 添加一些特有的属性或方法），这些更改也会反映在 <code>teacher</code> 上，因为 <code>student.prototype</code> 和 <code>teacher.prototype</code> 实际上是同一个对象。</li><li>这种共享原型的做法会导致不同子类之间的属性和方法<strong>互相污染</strong>，也就是 <code>teacher</code> 和 <code>student</code> 会共享相同的原型链，破坏类的独立性。</li></ul><h3 id="_4-原型式继承-对象" tabindex="-1">4.原型式继承-对象 <a class="header-anchor" href="#_4-原型式继承-对象" aria-label="Permalink to &quot;4.原型式继承-对象&quot;">​</a></h3><p><img src="' + _imports_5 + '" alt="image-20240824120154960"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 原型式继承函数</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createObject1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">o</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> newObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(newObj, o)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> newObj</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createObject2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">o</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Fn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  Fn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> o</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> newObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Fn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> newObj</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// var info = createObject2(obj)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> info </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(obj)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(info)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(info.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p>该方式最原始的方式</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34459469/1724035390024-5187555c-332c-4404-88b5-0d777195eabc.png?x-oss-process=image%2Fformat%2Cwebp" alt="image.png"></p><blockquote><p>Object,create方法和以上两种方式一致</p><h3 id="_1-object-create-方法" tabindex="-1"><strong>1. <code>Object.create()</code> 方法</strong> <a class="header-anchor" href="#_1-object-create-方法" aria-label="Permalink to &quot;**1. `Object.create()` 方法**&quot;">​</a></h3><p><code>Object.create()</code> 是一种推荐的继承方式，它创建一个新对象并将其原型设置为传入的对象。通过这种方式，<code>student.prototype</code> 和 <code>teacher.prototype</code> 会分别创建出各自的原型对象，而这些原型对象继承自 <code>person.prototype</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">greet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Hello, my name is &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">grade</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 调用父类构造函数</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.grade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> grade;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用 Object.create 继承父类原型</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Student; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 修正 constructor 指向</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">study</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39; is studying.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Teacher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">subject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, name);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.subject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> subject;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Teacher 也通过 Object.create 继承</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Teacher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Teacher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Teacher; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 修正 constructor 指向</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Teacher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">teach</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39; is teaching &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.subject);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><h3 id="_2-手动设置原型链" tabindex="-1"><strong>2. 手动设置原型链</strong> <a class="header-anchor" href="#_2-手动设置原型链" aria-label="Permalink to &quot;**2. 手动设置原型链**&quot;">​</a></h3><p>如果不能使用 <code>Object.create()</code>，可以手动创建一个新的对象，将其 <code>__proto__</code> 指向 <code>person.prototype</code>，从而实现子类原型的独立性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">grade</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, name);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.grade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> grade;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建新对象继承 person.prototype</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Student; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 修正 constructor</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Teacher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">subject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, name);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.subject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> subject;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Teacher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建独立的原型对象</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Teacher</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Teacher; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 修正 constructor</span></span></code></pre></div><ul><li><strong>问题：</strong> 如果直接将 <code>student.prototype = person.prototype</code>，<code>student</code> 和 <code>teacher</code> 之间会共享同一个原型对象，导致不同子类的属性和方法互相污染。</li><li><strong>解决方案：</strong> 使用 <code>Object.create()</code> 或通过创建独立的对象来继承父类的原型。这样可以确保每个子类拥有独立的原型对象，但它们的原型链都指向 <code>person.prototype</code>，从而实现父类原型的继承而不共享实例。</li></ul></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34459469/1724035415268-241cb111-2d45-4675-a907-879ae748ca2f.png?x-oss-process=image%2Fformat%2Cwebp%2Fresize%2Cw_802%2Climit_0" alt="image.png"></p><h3 id="_5-寄生式继承-对象" tabindex="-1">5.寄生式继承-对象 <a class="header-anchor" href="#_5-寄生式继承-对象" aria-label="Permalink to &quot;5.寄生式继承-对象&quot;">​</a></h3><p><img src="' + _imports_6 + '" alt="image-20240824120400792"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> personObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  running</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;running&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createStudent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stu </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(personObj)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  stu.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  stu.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">studying</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;studying~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stu</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stuObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createStudent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stuObj1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createStudent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;kobe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stuObj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createStudent</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;james&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34459469/1724036543420-3594e6d0-d81e-4e96-a90c-2abe386a8e4d.png?x-oss-process=image%2Fformat%2Cwebp%2Fresize%2Cw_737%2Climit_0" alt="image.png"></p><blockquote><p>原型式继承和工厂函数结合 弊端是无法准确知道工厂函数的弊端</p></blockquote><h3 id="_6-寄生组合式继承" tabindex="-1">6.寄生组合式继承 <a class="header-anchor" href="#_6-寄生组合式继承" aria-label="Permalink to &quot;6.寄生组合式继承&quot;">​</a></h3><p><img src="' + _imports_7 + '" alt="image-20240824120412869"></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">o</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Fn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  Fn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> o</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Fn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> inheritPrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">SubType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">SuperType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  SubType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Objec.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">SuperType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">SubType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;constructor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    value: SubType</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  })</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">friends</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> age</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.friends </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> friends</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">running</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;running~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eating</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;eating~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">friends</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">sno</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">score</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, name, age, friends)</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.sno </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sno</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> score</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">inheritPrototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(Student, Person)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">studying</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;studying~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> stu </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;kobe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">111</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(stu)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">stu.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">studying</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">stu.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">running</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">stu.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">eating</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(stu.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.name)</span></span></code></pre></div><blockquote><p>核心代码</p></blockquote><p><img src="' + _imports_8 + '" alt="image-20240824120448020"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/34459469/1724037410496-431eaebe-5a66-42c4-9119-bb705f3aace2.png?x-oss-process=image%2Fformat%2Cwebp%2Fresize%2Cw_698%2Climit_0" alt="image.png"></p>', 194);
const _hoisted_195 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_195);
}
const _10_______ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _10_______ as default
};
