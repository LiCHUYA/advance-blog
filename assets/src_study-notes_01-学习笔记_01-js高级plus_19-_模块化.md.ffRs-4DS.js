import { _ as _export_sfc, o as openBlock, c as createElementBlock, R as createStaticVNode } from "./chunks/framework.b55ravPP.js";
const _imports_0 = "/advance-blog/assets/image-20240901154359445.kHOgxPfo.png";
const _imports_1 = "/advance-blog/assets/image-20240901160016490.-LnnRuuJ.png";
const _imports_2 = "/advance-blog/assets/image-20240901155427651.K52yu7vb.png";
const _imports_3 = "/advance-blog/assets/image-20240901155840948.EkOh1uOf.png";
const _imports_4 = "/advance-blog/assets/image-20240901161749377.-lfzbasG.png";
const _imports_5 = "/advance-blog/assets/image-20240901161952825.eyQk7IRB.png";
const _imports_6 = "/advance-blog/assets/image-20240901160342936._VT--2yT.png";
const _imports_7 = "/advance-blog/assets/image-20240901215342443.Uy9OmV_U.png";
const _imports_8 = "/advance-blog/assets/image-20240901215522822.UbpnyMSz.png";
const __pageData = JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"src/study-notes/01-学习笔记/01-js高级plus/19-_模块化.md","filePath":"src/study-notes/01-学习笔记/01-js高级plus/19-_模块化.md","lastUpdated":1739460242000}');
const _sfc_main = { name: "src/study-notes/01-学习笔记/01-js高级plus/19-_模块化.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<p>JavaScript 的模块化历经了一个不断发展的过程，从最初的简单拼接文件到现代化的模块系统，如 ES Modules（ESM）。在这个过程中，开发者们不断面对各种挑战，并且通过不同的方案逐步解决这些问题。</p><h3 id="_1-初期的脚本拼接方式" tabindex="-1">1. <strong>初期的脚本拼接方式</strong> <a class="header-anchor" href="#_1-初期的脚本拼接方式" aria-label="Permalink to &quot;1. **初期的脚本拼接方式**&quot;">​</a></h3><h4 id="问题背景" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景" aria-label="Permalink to &quot;问题背景&quot;">​</a></h4><p>在 JavaScript 诞生之初，并没有提供任何原生的模块化支持。开发者通常会把所有代码写在一个文件里，随着项目规模的扩大，这种方式很快就变得难以维护。于是，开发者们开始将代码拆分到多个文件中，然后通过 <code>&lt;script&gt;</code> 标签依次在 HTML 文件中引入这些脚本文件。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;module1.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;module2.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;app.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><h4 id="遇到的问题" tabindex="-1">遇到的问题 <a class="header-anchor" href="#遇到的问题" aria-label="Permalink to &quot;遇到的问题&quot;">​</a></h4><ul><li><strong>全局作用域污染</strong>：所有的代码都在同一个全局作用域中运行，容易发生变量冲突。</li><li><strong>依赖管理困难</strong>：手动控制脚本的加载顺序，容易出现依赖问题。</li><li><strong>难以维护</strong>：随着项目规模的增长，管理脚本文件变得越来越复杂。</li></ul><h3 id="_2-立即执行函数表达式-iife" tabindex="-1">2. <strong>立即执行函数表达式（IIFE）</strong> <a class="header-anchor" href="#_2-立即执行函数表达式-iife" aria-label="Permalink to &quot;2. **立即执行函数表达式（IIFE）**&quot;">​</a></h3><p>为了避免全局作用域污染，开发者们开始使用 <strong>立即执行函数表达式（Immediately Invoked Function Expression，IIFE）</strong>。这种模式允许开发者创建私有作用域，从而防止变量泄漏到全局。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> privateVariable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;I am private&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> privateFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(privateVariable);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  window.myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    publicFunction: privateFunction</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})();</span></span></code></pre></div><h4 id="遇到的问题-1" tabindex="-1">遇到的问题 <a class="header-anchor" href="#遇到的问题-1" aria-label="Permalink to &quot;遇到的问题&quot;">​</a></h4><ul><li><strong>依赖管理依然困难</strong>：虽然 IIFE 解决了全局作用域污染的问题，但仍然需要手动管理依赖关系。</li><li><strong>模块间耦合</strong>：不同模块之间无法清晰地表达依赖关系，导致模块间的耦合度较高。</li></ul><h3 id="_3-commonjs-模块化" tabindex="-1">3. <strong>CommonJS 模块化</strong> <a class="header-anchor" href="#_3-commonjs-模块化" aria-label="Permalink to &quot;3. **CommonJS 模块化**&quot;">​</a></h3><p><img src="' + _imports_0 + '" alt="image-20240901154359445"></p><p><img src="' + _imports_1 + '" alt="image-20240901160016490"></p><h4 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h4><p>随着 Node.js 的出现，JavaScript 开发者开始需要一个更强大的模块系统。Node.js 引入了 <strong>CommonJS</strong> 模块化规范，这种规范通过 <code>require</code> 和 <code>module.exports</code> 实现模块的引入和导出。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// math.js</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  add</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// app.js</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> math</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./math.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 5</span></span></code></pre></div><h5 id="_1-什么是module" tabindex="-1">1.什么是module <a class="header-anchor" href="#_1-什么是module" aria-label="Permalink to &quot;1.什么是module&quot;">​</a></h5><p><img src="' + _imports_2 + '" alt="image-20240901155427651"></p><ul><li>使用<code>require函数</code>可以引入导出的东西</li><li>还有一种<code>exports.xx</code>的写法,源码是<code>module.exports={} , exports=module.exports</code></li><li><img src="' + _imports_3 + '" alt="image-20240901155840948"></li></ul><h5 id="_2-有了module-exports后-为什么需要exports" tabindex="-1">2.有了module.exports后,为什么需要<code>exports</code> <a class="header-anchor" href="#_2-有了module-exports后-为什么需要exports" aria-label="Permalink to &quot;2.有了module.exports后,为什么需要`exports`&quot;">​</a></h5><p>为了符合commonjs的规范,现在已经逐渐被抛弃</p><h5 id="_3-require函数" tabindex="-1">3.require函数 <a class="header-anchor" href="#_3-require函数" aria-label="Permalink to &quot;3.require函数&quot;">​</a></h5><p>在Node.js中，<code>require</code>是一个非常重要且常用的模块加载机制，用于引入其他模块或文件。它在Node.js中充当了模块依赖管理的核心功能。接下来我将详细讲解<code>require</code>的工作原理、使用方式以及一些常见的知识点。</p><h6 id="_1-require-的基本工作原理" tabindex="-1">1. <strong><code>require</code> 的基本工作原理</strong> <a class="header-anchor" href="#_1-require-的基本工作原理" aria-label="Permalink to &quot;1. **`require` 的基本工作原理**&quot;">​</a></h6><p><code>require</code> 是一个函数，用于加载并执行模块中的代码，并返回模块的<code>exports</code>对象。它的基本语法如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;module_name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p>当你调用 <code>require</code> 时，Node.js 会执行以下操作：</p><ul><li><p><strong>解析模块路径</strong>：Node.js首先会确定你所请求的模块的位置。如果是一个内置模块（如<code>fs</code>），则直接加载。如果是一个路径（如<code>./module</code>），则根据提供的路径加载。如果是一个包（如<code>express</code>），Node.js 会在<code>node_modules</code>目录下查找。</p></li><li><p><strong>缓存检查</strong>：Node.js 会检查这个模块是否已经被加载过。如果是，直接从缓存中返回该模块的<code>exports</code>对象。这样避免了重复加载，提高了效率。</p></li><li><p><strong>加载与编译</strong>：如果模块尚未加载，Node.js 会根据文件类型执行相应的操作：对于<code>.js</code>文件，会使用<code>fs.readFileSync</code>读取文件内容，并使用<code>vm</code>模块编译和执行代码；对于<code>.json</code>文件，会直接使用<code>JSON.parse</code>解析并返回；对于<code>.node</code>文件（C++扩展），则使用<code>process.dlopen</code>加载。</p></li><li><p><strong>返回<code>exports</code>对象</strong>：模块中的代码执行完毕后，<code>module.exports</code>的值会作为<code>require</code>函数的返回值返回。</p></li></ul><h6 id="_2-模块路径解析" tabindex="-1">2. <strong>模块路径解析</strong> <a class="header-anchor" href="#_2-模块路径解析" aria-label="Permalink to &quot;2. **模块路径解析**&quot;">​</a></h6><p><code>require</code>支持多种路径形式：</p><ul><li><p><strong>绝对路径</strong>：如果路径以<code>/</code>开头，Node.js将其视为绝对路径并直接查找。例如：<code>require(&#39;/home/user/project/module.js&#39;)</code>。</p></li><li><p><strong>相对路径</strong>：如果路径以<code>./</code>或<code>../</code>开头，Node.js会将其视为相对于当前文件的相对路径。例如：<code>require(&#39;./module&#39;)</code>。</p><p>在相对路径的情况下，Node.js按以下顺序尝试查找：</p><ol><li>查找该路径下是否存在对应的文件（带或不带扩展名）。如果存在，直接加载。</li><li>如果没有找到文件，Node.js会尝试将路径视为一个目录，查找该目录下的<code>index.js</code>或<code>index.json</code>文件。</li></ol></li><li><p><strong>不带路径的模块</strong>：例如<code>require(&#39;moduleName&#39;)</code>，这种情况下，Node.js会认为这是一个第三方模块或本地安装的模块，并进行如下查找。</p></li><li><p><img src="' + _imports_4 + '" alt="image-20240901161749377"></p></li></ul><h6 id="_3-模块加载过程" tabindex="-1">3. <strong>模块加载过程</strong> <a class="header-anchor" href="#_3-模块加载过程" aria-label="Permalink to &quot;3. **模块加载过程**&quot;">​</a></h6><p><img src="' + _imports_5 + '" alt="image-20240901161952825"></p><p>模块在首次被<code>require</code>后会被缓存，这意味着后续的<code>require</code>调用将返回缓存中的模块，而不会再次执行模块中的代码。你可以通过<code>require.cache</code>访问这些缓存。</p><p><strong>清除缓存</strong>：你可以通过<code>delete require.cache[require.resolve(&#39;module_name&#39;)]</code>来清除缓存，之后再次<code>require</code>该模块时，会重新加载。</p><h6 id="_4-module-exports-和-exports" tabindex="-1">4. <strong><code>module.exports</code> 和 <code>exports</code></strong> <a class="header-anchor" href="#_4-module-exports-和-exports" aria-label="Permalink to &quot;4. **`module.exports` 和 `exports`**&quot;">​</a></h6><p><code>module.exports</code>和<code>exports</code>是用于导出模块的两个关键对象。</p><ul><li><strong><code>module.exports</code></strong>：这是最终的导出对象，当其他文件<code>require</code>此模块时，得到的就是<code>module.exports</code>的内容。</li><li><strong><code>exports</code></strong>：它是<code>module.exports</code>的一个引用，通常用于方便地添加导出的属性。</li></ul><p>注意：如果你直接赋值给<code>exports</code>，会断开它与<code>module.exports</code>的引用关系，只有<code>module.exports</code>才会最终被返回。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 正确导出方式：</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 或者</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 错误导出方式：</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> };  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 此时不会导出</span></span></code></pre></div><h6 id="_5-require-的一些高级用法" tabindex="-1">5. <strong><code>require</code> 的一些高级用法</strong> <a class="header-anchor" href="#_5-require-的一些高级用法" aria-label="Permalink to &quot;5. **`require` 的一些高级用法**&quot;">​</a></h6><ul><li><p><strong>动态<code>require</code></strong>：你可以在代码的运行时动态加载模块，例如根据条件加载不同的模块。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> moduleName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> condition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;moduleA&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;moduleB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(moduleName);</span></span></code></pre></div></li><li><p><strong><code>require.resolve</code></strong>：返回模块的解析路径而不加载模块，用于查看模块的实际路径。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> require.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;module_name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div></li><li><p><strong>循环依赖</strong>：当两个模块互相<code>require</code>对方时，会形成循环依赖。Node.js能处理这种情况，但要注意，可能会导致模块加载不完全。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// moduleA.js</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.loaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./moduleB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.loaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// moduleB.js</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./moduleA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.loaded);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// false</span></span></code></pre></div></li></ul><h6 id="_6-require与es6-import的区别" tabindex="-1">6. <strong><code>require</code>与ES6 <code>import</code>的区别</strong> <a class="header-anchor" href="#_6-require与es6-import的区别" aria-label="Permalink to &quot;6. **`require`与ES6 `import`的区别**&quot;">​</a></h6><p><code>require</code> 是 CommonJS 规范的一部分，而 <code>import</code> 是 ES6 的模块导入语法。主要区别如下：</p><ul><li><strong>同步与异步</strong>：<code>require</code> 是同步的，而 <code>import</code> 是异步加载的，适用于模块打包和浏览器环境。</li><li><strong>静态与动态</strong>：<code>import</code> 会在编译时解析模块依赖，而<code>require</code> 是在运行时解析。</li><li><strong>导出方式</strong>：<code>require</code> 中使用 <code>module.exports</code> 导出，<code>import</code> 中使用 <code>export</code> 或 <code>export default</code>。</li></ul><p>在现代Node.js开发中，尤其在使用ES6语法的情况下，<code>import</code> 和 <code>require</code> 常常可以互换使用，但要注意两者的语法与特性差异。</p><h6 id="_7-常见问题与调试技巧" tabindex="-1">7. <strong>常见问题与调试技巧</strong> <a class="header-anchor" href="#_7-常见问题与调试技巧" aria-label="Permalink to &quot;7. **常见问题与调试技巧**&quot;">​</a></h6><ul><li><strong>找不到模块</strong>：确保路径正确，且该模块已安装在<code>node_modules</code>中。</li><li><strong>循环依赖问题</strong>：注意避免或合理设计模块结构，防止模块加载不完整。</li></ul><p>通过理解并掌握<code>require</code>的这些细节与知识点，能够更高效地进行Node.js的模块化开发，提升代码的复用性与维护性。</p><h4 id="遇到的问题-2" tabindex="-1">遇到的问题 <a class="header-anchor" href="#遇到的问题-2" aria-label="Permalink to &quot;遇到的问题&quot;">​</a></h4><ul><li><strong>同步加载</strong>：CommonJS 是同步加载模块的，这在服务器端没有问题，因为文件是本地的且加载速度快。但在浏览器环境下，网络请求是异步的，CommonJS 的同步特性导致其在浏览器端的表现不佳。</li><li><strong>模块打包困难</strong>：由于浏览器不支持原生的 <code>require</code>，需要工具（如 Browserify）将 CommonJS 模块打包成一个文件，这增加了复杂性。</li><li><img src="' + _imports_6 + '" alt="image-20240901160342936"></li></ul><h3 id="_4-asynchronous-module-definition-amd" tabindex="-1">4. <strong>Asynchronous Module Definition (AMD)</strong> <a class="header-anchor" href="#_4-asynchronous-module-definition-amd" aria-label="Permalink to &quot;4. **Asynchronous Module Definition (AMD)**&quot;">​</a></h3><h4 id="解决方案-1" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案-1" aria-label="Permalink to &quot;解决方案&quot;">​</a></h4><p>为了在浏览器环境中更好地支持异步加载，开发者们设计了 <strong>AMD</strong> 规范。AMD 通过 <code>define</code> 函数定义模块，通过 <code>require</code> 异步加载依赖。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 定义模块 math.js</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;math&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, [], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> b;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用模块</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;math&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">math</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 输出: 5</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><h4 id="遇到的问题-3" tabindex="-1">遇到的问题 <a class="header-anchor" href="#遇到的问题-3" aria-label="Permalink to &quot;遇到的问题&quot;">​</a></h4><ul><li><strong>语法复杂</strong>：AMD 的定义和使用方式较为繁琐，不如 CommonJS 简洁。</li><li><strong>过度灵活</strong>：虽然 AMD 允许模块异步加载，但其过于灵活的依赖管理使得代码难以维护。</li></ul><p>AMD（Asynchronous Module Definition，即异步模块定义）是一个在浏览器环境下用于模块化JavaScript代码的规范。它的出现主要是为了应对以下几个问题和需求：</p><h4 id="_1-javascript模块化的需求" tabindex="-1">1. <strong>JavaScript模块化的需求</strong> <a class="header-anchor" href="#_1-javascript模块化的需求" aria-label="Permalink to &quot;1. **JavaScript模块化的需求**&quot;">​</a></h4><p>早期的JavaScript开发中，所有代码通常都写在一个或几个文件中，随着应用程序的复杂性增加，代码变得难以维护和管理。因此，模块化开发的需求逐渐变得迫切。</p><p>在Node.js中，CommonJS规范提供了<code>require</code>等功能来实现模块化，但这种同步的模块加载方式并不适合在浏览器环境下使用。</p><h4 id="_2-异步加载的需求" tabindex="-1">2. <strong>异步加载的需求</strong> <a class="header-anchor" href="#_2-异步加载的需求" aria-label="Permalink to &quot;2. **异步加载的需求**&quot;">​</a></h4><p>浏览器环境与Node.js环境有一个关键的不同点：网络延迟。在浏览器中，加载外部资源（如JavaScript文件）是通过HTTP请求完成的，可能存在较大的延迟。传统的同步加载方式会阻塞页面的渲染和执行，影响用户体验。</p><p>为了应对这种情况，AMD规范应运而生。它允许模块的异步加载，避免了页面的阻塞，提升了性能和用户体验。</p><h4 id="_3-模块依赖管理" tabindex="-1">3. <strong>模块依赖管理</strong> <a class="header-anchor" href="#_3-模块依赖管理" aria-label="Permalink to &quot;3. **模块依赖管理**&quot;">​</a></h4><p>在大型应用程序中，模块之间的依赖关系复杂多样。AMD规范通过显式地声明依赖关系，使得模块之间的依赖更加清晰、易于管理，并且能够并行加载依赖模块，从而进一步优化性能。</p><h4 id="_4-适应浏览器环境" tabindex="-1">4. <strong>适应浏览器环境</strong> <a class="header-anchor" href="#_4-适应浏览器环境" aria-label="Permalink to &quot;4. **适应浏览器环境**&quot;">​</a></h4><p>由于浏览器环境的限制，传统的同步模块加载方式（如CommonJS的<code>require</code>）在浏览器中不太合适。AMD通过异步加载解决了这一问题，并且与浏览器的工作机制更为契合。</p><h4 id="_5-推动者-requirejs" tabindex="-1">5. <strong>推动者：RequireJS</strong> <a class="header-anchor" href="#_5-推动者-requirejs" aria-label="Permalink to &quot;5. **推动者：RequireJS**&quot;">​</a></h4><p>RequireJS是一个实现了AMD规范的库，并且在前端开发中得到了广泛的使用。它不仅提供了模块定义和异步加载的功能，还提供了依赖管理、脚本优化和打包等特性，使得前端开发更加模块化和高效。</p><h4 id="amd的工作原理" tabindex="-1"><strong>AMD的工作原理</strong> <a class="header-anchor" href="#amd的工作原理" aria-label="Permalink to &quot;**AMD的工作原理**&quot;">​</a></h4><p>在AMD中，模块通常使用<code>define</code>函数定义，模块的依赖关系和回调函数都在模块定义时明确指出：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;dependency1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;dependency2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">dep1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">dep2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 模块代码</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 导出内容</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><ul><li><strong><code>define</code>函数</strong>：用于定义模块，参数包括依赖数组和回调函数。</li><li><strong>依赖数组</strong>：列出模块所依赖的其他模块，这些依赖会被异步加载。</li><li><strong>回调函数</strong>：在依赖加载完成后执行，参数是依赖模块的导出内容。</li></ul><h4 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h4><p>AMD的出现是为了满足浏览器环境下的模块化需求，特别是异步加载和依赖管理的需求。通过AMD，开发者可以更好地组织JavaScript代码，提高代码的可维护性，同时也能够提升应用程序的性能。随着现代前端开发工具（如Webpack）的出现，AMD的使用逐渐减少，但它仍然是模块化历史中的重要一环。</p><h3 id="cmd-common-module-definition" tabindex="-1">CMD（Common Module Definition） <a class="header-anchor" href="#cmd-common-module-definition" aria-label="Permalink to &quot;CMD（Common Module Definition）&quot;">​</a></h3><h4 id="_1-cmd-规范的背景和动机" tabindex="-1">1. <strong>CMD 规范的背景和动机</strong> <a class="header-anchor" href="#_1-cmd-规范的背景和动机" aria-label="Permalink to &quot;1. **CMD 规范的背景和动机**&quot;">​</a></h4><p>CMD（Common Module Definition）规范诞生于浏览器端模块化开发的需求中。虽然AMD规范已经解决了一部分问题，但在一些场景下，AMD的设计显得过于繁琐，尤其是它的预加载方式不适合依赖关系复杂的项目。CMD 规范的设计初衷是提供一种更灵活、更简洁的模块定义和加载方式，主要目标包括：</p><ul><li><strong>按需加载</strong>：CMD希望模块在需要时才加载，而不是在定义时就加载所有依赖，这样可以减少不必要的开销。</li><li><strong>直观的依赖声明</strong>：CMD让开发者可以在模块内部直接使用<code>require</code>加载依赖，这种方式更符合JavaScript开发者的习惯。</li></ul><h4 id="_2-cmd-规范的核心概念" tabindex="-1">2. <strong>CMD 规范的核心概念</strong> <a class="header-anchor" href="#_2-cmd-规范的核心概念" aria-label="Permalink to &quot;2. **CMD 规范的核心概念**&quot;">​</a></h4><p>CMD 规范的核心是通过<code>define</code>函数来定义模块，模块之间通过<code>require</code>进行依赖关系的处理。与AMD的预加载不同，CMD更加推崇在模块执行时加载依赖。</p><h5 id="_2-1-模块定义" tabindex="-1">2.1 <strong>模块定义</strong> <a class="header-anchor" href="#_2-1-模块定义" aria-label="Permalink to &quot;2.1 **模块定义**&quot;">​</a></h5><p>在CMD中，模块的定义通常是这样的：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dep1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./dep1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dep2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./dep2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 模块内部逻辑</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    exports</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">someFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><ul><li><strong><code>require</code></strong>: 用于加载其他模块，并返回该模块的导出内容。</li><li><strong><code>exports</code></strong>: 是一个对象，用于导出当前模块的功能，其他模块通过<code>require</code>加载这个模块时，会获取到<code>exports</code>对象。</li><li><strong><code>module</code></strong>: 代表当前模块的元信息，例如<code>module.id</code>代表模块的唯一标识符。</li></ul><p>这种模式下，依赖只有在<code>require</code>被调用时才会被加载，这种方式减少了不必要的依赖加载，尤其在复杂的项目中，能够显著提升性能。</p><h5 id="_2-2-模块加载" tabindex="-1">2.2 <strong>模块加载</strong> <a class="header-anchor" href="#_2-2-模块加载" aria-label="Permalink to &quot;2.2 **模块加载**&quot;">​</a></h5><p>CMD的一个特点是依赖按需加载，通常是在模块代码执行到<code>require</code>语句时，才会加载所需模块。这种设计特别适合于大型应用程序，能够显著减少初始加载时间。具体而言，CMD的加载方式带来了几个好处：</p><ul><li><strong>性能优化</strong>：由于依赖是在使用时才加载，因此可以避免不必要的模块在应用启动时加载，从而减少了启动时间。</li><li><strong>模块间低耦合</strong>：模块之间的依赖关系更加明确，并且依赖关系只有在真正需要时才会被解析。</li></ul><h4 id="_3-seajs的诞生与特点" tabindex="-1">3. <strong>SeaJS的诞生与特点</strong> <a class="header-anchor" href="#_3-seajs的诞生与特点" aria-label="Permalink to &quot;3. **SeaJS的诞生与特点**&quot;">​</a></h4><p>SeaJS 是一个基于CMD规范的模块加载器，由淘宝前端团队开发。它的设计目标是解决浏览器端复杂应用程序的模块化问题。</p><h5 id="_3-1-seajs-的特点" tabindex="-1">3.1 <strong>SeaJS 的特点</strong> <a class="header-anchor" href="#_3-1-seajs-的特点" aria-label="Permalink to &quot;3.1 **SeaJS 的特点**&quot;">​</a></h5><ol><li><p><strong>基于 CMD 规范</strong>：</p><ul><li>SeaJS完全遵循CMD规范，这使得它可以很好地支持按需加载的模块化开发方式。</li></ul></li><li><p><strong>简单易用的 API</strong>：</p><ul><li>SeaJS 的API设计非常简洁直观，开发者可以轻松上手，无需复杂的配置或学习成本。</li></ul></li><li><p><strong>灵活的模块加载机制</strong>：</p><ul><li>SeaJS 的模块加载方式非常灵活，允许模块在任何时候加载和执行，这种灵活性适用于复杂的Web应用程序。</li></ul></li><li><p><strong>插件机制</strong>：</p><ul><li>SeaJS 提供了丰富的插件支持，开发者可以根据项目的需要编写或使用现成的插件，比如异步加载插件、调试插件等。这种扩展性使得SeaJS在各种场景下都能灵活应用。</li></ul></li></ol><h5 id="_3-2-seajs-的工作原理" tabindex="-1">3.2 <strong>SeaJS 的工作原理</strong> <a class="header-anchor" href="#_3-2-seajs-的工作原理" aria-label="Permalink to &quot;3.2 **SeaJS 的工作原理**&quot;">​</a></h5><p>SeaJS 的模块加载与执行主要依赖以下两个核心方法：</p><ul><li><p><strong><code>define</code></strong>：用于定义模块，并可以通过<code>require</code>加载其他模块。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">define</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dep1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./dep1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dep2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./dep2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    exports</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">sayHello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Hello, SeaJS!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div></li><li><p><strong><code>seajs.use</code></strong>：用于加载和启动模块。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">seajs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./myModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">myModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    myModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><ul><li><code>seajs.use</code>通常作为入口函数来启动应用程序。</li><li>当调用<code>seajs.use</code>时，SeaJS会根据模块的依赖关系按需加载模块，并在所有依赖加载完成后执行回调函数。</li></ul></li></ul><h5 id="_3-3-seajs-的模块加载流程" tabindex="-1">3.3 <strong>SeaJS 的模块加载流程</strong> <a class="header-anchor" href="#_3-3-seajs-的模块加载流程" aria-label="Permalink to &quot;3.3 **SeaJS 的模块加载流程**&quot;">​</a></h5><ol><li><strong>解析入口模块</strong>：SeaJS 首先根据入口模块的路径，确定需要加载的模块。</li><li><strong>解析依赖关系</strong>：在加载入口模块时，SeaJS 会分析模块中的<code>require</code>语句，从而确定其他依赖模块。</li><li><strong>异步加载模块</strong>：所有依赖的模块都会被异步加载，以避免阻塞页面的渲染和执行。</li><li><strong>执行模块回调</strong>：当所有模块都加载完成后，执行回调函数，开始应用程序的主逻辑。</li></ol><h4 id="_4-cmd-与-seajs-的影响和现状" tabindex="-1">4. <strong>CMD 与 SeaJS 的影响和现状</strong> <a class="header-anchor" href="#_4-cmd-与-seajs-的影响和现状" aria-label="Permalink to &quot;4. **CMD 与 SeaJS 的影响和现状**&quot;">​</a></h4><p>CMD规范和SeaJS在早期的前端开发中起到了重要作用，尤其是在处理复杂的Web应用程序时，SeaJS提供的灵活性和性能优化是当时很多前端开发者的首选。</p><p>然而，随着前端技术的快速发展，诸如Webpack、ES6模块（ESM）等新一代模块化工具和标准的出现，CMD和SeaJS的使用逐渐减少。Webpack通过模块打包和各种插件机制，能够更好地支持现代前端开发需求，而ESM作为JavaScript语言的官方模块系统，也提供了更加标准化和高效的模块化解决方案。</p><h4 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h4><ul><li><strong>CMD</strong> 规范是为了解决浏览器端复杂应用中的模块化需求，尤其是按需加载问题，它提供了一种更灵活的依赖管理方式，避免了不必要的模块加载。</li><li><strong>SeaJS</strong> 作为CMD的一个具体实现，进一步推动了CMD规范的发展，提供了一套完整的模块加载机制，并且通过插件机制增强了扩展性和灵活性。</li><li>尽管随着现代前端工具的崛起，CMD和SeaJS的使用有所减少，但它们在前端模块化历史中仍然具有重要的地位和影响。</li></ul><p>希望这些详细解释能帮助你更好地理解CMD规范和SeaJS的设计初衷、工作原理及其在前端开发中的应用。</p><h3 id="umd-universal-module-definition-的出现背景" tabindex="-1">UMD (Universal Module Definition) 的出现背景 <a class="header-anchor" href="#umd-universal-module-definition-的出现背景" aria-label="Permalink to &quot;UMD (Universal Module Definition) 的出现背景&quot;">​</a></h3><p>UMD（<strong>Universal Module Definition</strong>）是一种模块化格式，用于在不同的 JavaScript 环境（如浏览器、Node.js、以及模块加载器）中进行代码的兼容性打包。</p><h4 id="_1-模块化的需求" tabindex="-1">1. <strong>模块化的需求</strong> <a class="header-anchor" href="#_1-模块化的需求" aria-label="Permalink to &quot;1. **模块化的需求**&quot;">​</a></h4><p>随着前端应用变得越来越复杂，模块化成为一种趋势，允许开发者将代码分解为更小的、独立的模块。不同的模块化标准应运而生，其中主要包括：</p><ul><li><strong>CommonJS</strong>：Node.js 的标准模块化格式，采用同步的 <code>require()</code> 语句进行模块导入。</li><li><strong>AMD (Asynchronous Module Definition)</strong>：主要用于浏览器环境的模块化格式，强调异步加载模块，通常与 <code>RequireJS</code> 一起使用。</li><li><strong>ESModule (ESM)</strong>：原生支持的模块化标准，引入于 ECMAScript 2015（ES6），现已成为主流，但早期支持较为有限。</li></ul><p>然而，随着这些模块化系统的发展，开发者面临着一个问题：<strong>不同的环境使用不同的模块化规范</strong>。这意味着，开发一个跨平台的 JavaScript 库时，需要考虑不同的环境如何加载模块。例如：</p><ul><li>在 Node.js 环境中，使用的是 CommonJS 规范。</li><li>在浏览器端，有些项目使用 AMD，有些可能不使用模块化规范。</li><li>后来，随着 ESModule 的出现，浏览器开始支持原生模块。</li></ul><h4 id="_2-umd-的出现" tabindex="-1">2. <strong>UMD 的出现</strong> <a class="header-anchor" href="#_2-umd-的出现" aria-label="Permalink to &quot;2. **UMD 的出现**&quot;">​</a></h4><p>由于不同环境的模块系统不兼容，开发者不得不编写不同版本的代码来适应这些差异。为了解决这个问题，<strong>UMD</strong> 规范被引入，作为一种通用模块定义格式，<strong>旨在使同一个模块能够在不同的环境中被加载和使用</strong>。</p><p>UMD 结合了 CommonJS 和 AMD 的特点，并且同时支持全局变量的方式，从而允许模块在以下几种场景下使用：</p><ul><li><strong>CommonJS 环境</strong>：如 Node.js，使用 <code>require()</code> 加载模块。</li><li><strong>AMD 环境</strong>：如浏览器中的 <code>RequireJS</code>，使用异步的 <code>define()</code> 函数加载模块。</li><li><strong>非模块化环境</strong>：如传统的浏览器环境，模块会暴露为全局变量。</li></ul><h4 id="_3-umd-的实现方式" tabindex="-1">3. <strong>UMD 的实现方式</strong> <a class="header-anchor" href="#_3-umd-的实现方式" aria-label="Permalink to &quot;3. **UMD 的实现方式**&quot;">​</a></h4><p>UMD 的实现实际上就是通过一段逻辑判断代码当前所处的环境，并根据环境条件选择适当的模块加载方式。以下是一个典型的 UMD 模板示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> define </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;function&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> define.amd) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // AMD 环境</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        define</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">([], factory);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ===</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;object&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // CommonJS 环境</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 浏览器全局变量</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        root.myLibrary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 模块内容</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        hello</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            return</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;Hello, UMD!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}));</span></span></code></pre></div><ul><li><strong>AMD 环境</strong>：<code>define</code> 函数存在，UMD 通过它来定义模块。</li><li><strong>CommonJS 环境</strong>：<code>module.exports</code> 存在，UMD 通过它来导出模块。</li><li><strong>全局变量环境</strong>：如果既不存在 <code>define</code> 也不存在 <code>module.exports</code>，UMD 会将模块暴露为浏览器全局变量，如 <code>window.myLibrary</code>。</li></ul><h4 id="_4-umd-的优点与局限" tabindex="-1">4. <strong>UMD 的优点与局限</strong> <a class="header-anchor" href="#_4-umd-的优点与局限" aria-label="Permalink to &quot;4. **UMD 的优点与局限**&quot;">​</a></h4><h5 id="_4-1-优点" tabindex="-1">4.1 <strong>优点</strong> <a class="header-anchor" href="#_4-1-优点" aria-label="Permalink to &quot;4.1 **优点**&quot;">​</a></h5><ul><li><strong>通用性</strong>：UMD 格式使得同一个模块可以在不同的环境中使用，大大简化了跨平台库的开发。</li><li><strong>兼容性</strong>：UMD 是针对多种模块系统的桥梁，解决了模块化标准不统一的问题，尤其是在模块化标准尚未完全确定的早期，它帮助了开发者应对多样的环境。</li></ul><h5 id="_4-2-局限" tabindex="-1">4.2 <strong>局限</strong> <a class="header-anchor" href="#_4-2-局限" aria-label="Permalink to &quot;4.2 **局限**&quot;">​</a></h5><ul><li><strong>复杂性</strong>：UMD 本质上是一个权宜之计，虽然解决了环境不兼容的问题，但它的复杂性高于单一模块标准。UMD 需要写额外的兼容代码，这使得代码维护更加复杂。</li><li><strong>性能</strong>：由于需要判断环境，UMD 可能在加载时有轻微的性能损耗，特别是在前端浏览器环境中。</li></ul><h4 id="_5-umd-的现状" tabindex="-1">5. <strong>UMD 的现状</strong> <a class="header-anchor" href="#_5-umd-的现状" aria-label="Permalink to &quot;5. **UMD 的现状**&quot;">​</a></h4><p>随着 ESModule 的普及和现代构建工具（如 Webpack 和 Rollup）的广泛应用，UMD 的需求逐渐减少。现在开发者通常会使用工具来构建针对不同模块系统的版本，而不再手动编写 UMD 格式的代码。然而，UMD 仍然被许多第三方库使用，尤其是那些需要兼容多个运行时环境的库（如浏览器和 Node.js）。</p><h3 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>UMD 的出现是为了应对 JavaScript 模块化历史上的兼容性问题。它提供了一种解决方案，允许开发者编写一次代码，并在多种不同的模块系统中使用。这种通用性在模块化标准尚未统一的时期非常重要。然而，随着 ESModule 的广泛支持和现代构建工具的发展，UMD 的使用逐渐减少，但在某些需要兼容多个环境的场景中仍然有它的价值。</p><h3 id="esmodule-的详细讲解" tabindex="-1">ESModule 的详细讲解 <a class="header-anchor" href="#esmodule-的详细讲解" aria-label="Permalink to &quot;ESModule 的详细讲解&quot;">​</a></h3><h4 id="_1-esmodule-的背景与动机" tabindex="-1">1. <strong>ESModule 的背景与动机</strong> <a class="header-anchor" href="#_1-esmodule-的背景与动机" aria-label="Permalink to &quot;1. **ESModule 的背景与动机**&quot;">​</a></h4><p>在JavaScript发展的早期，模块化开发的需求并不明显，主要原因是JavaScript最初只是用于在浏览器中处理一些简单的交互。随着前端应用的复杂性不断增加，JavaScript代码库变得越来越庞大和难以维护，模块化的需求开始显现。</p><p>为了应对这一需求，社区内诞生了多种模块化方案，比如 <strong>CommonJS</strong>（用于Node.js）和 <strong>AMD</strong>（用于浏览器端）。虽然这些方案各有优点，但它们并不是JavaScript语言的原生解决方案，而是社区的规范或工具。为了解决这一问题，JavaScript语言标准（ECMAScript）在 <strong>ES6（ECMAScript 2015）</strong> 中引入了 <strong>ESModule</strong>，即原生的模块系统。</p><h4 id="_2-esmodule-的核心特性" tabindex="-1">2. <strong>ESModule 的核心特性</strong> <a class="header-anchor" href="#_2-esmodule-的核心特性" aria-label="Permalink to &quot;2. **ESModule 的核心特性**&quot;">​</a></h4><p>ESModule（ESM）引入了一种标准化的方式来定义、导入和导出模块，与之前的模块化方案相比，ESModule具有以下核心特性：</p><h5 id="_2-1-静态分析" tabindex="-1">2.1 <strong>静态分析</strong> <a class="header-anchor" href="#_2-1-静态分析" aria-label="Permalink to &quot;2.1 **静态分析**&quot;">​</a></h5><p>ESModule 的设计使得 JavaScript 引擎能够在编译时（而不是在运行时）解析模块的依赖关系。这意味着：</p><ul><li><strong>提前加载</strong>：引擎可以在代码运行之前确定所有模块的依赖关系，从而优化加载顺序。</li><li><strong>更好的工具支持</strong>：由于依赖关系是静态的，开发工具（如编译器和代码编辑器）能够提供更好的代码分析、自动补全和错误检查。</li></ul><h5 id="_2-2-模块导入和导出" tabindex="-1">2.2 <strong>模块导入和导出</strong> <a class="header-anchor" href="#_2-2-模块导入和导出" aria-label="Permalink to &quot;2.2 **模块导入和导出**&quot;">​</a></h5><p>ESModule 提供了两种主要的语法来导入和导出模块：</p><ul><li><p><strong>导出（Export）</strong>：</p><ul><li><code>export</code> 关键字用于从一个模块中导出变量、函数、类等，可以是默认导出或命名导出。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 命名导出</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;ChatGPT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Hello from ESModule!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 默认导出</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">() </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;This is the default export&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1.第一种方式: export 声明语句</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// export const name = &quot;why&quot;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// export const age = 18</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// export function foo() {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   console.log(&quot;foo function&quot;)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// export class Person {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2.第二种方式: export 导出 和 声明分开</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;why&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 18</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;foo function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  foo</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 3.第三种方式: 第二种导出时起别名</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// export {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   name as fName,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   age as fAge,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   foo as fFoo</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// }</span></span></code></pre></div><ul><li><p><strong>批量导出</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1.导出方式一:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// import { add, sub } from &#39;./math.js&#39;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// import { timeFormat, priceFormat } from &#39;./format.js&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// export {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   add,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   sub,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   timeFormat,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//   priceFormat</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2.导出方式二:</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// export { add, sub } from &#39;./math.js&#39;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// export { timeFormat, priceFormat } from &#39;./format.js&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 3.导出方式三:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./math.js&#39;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./format.js&#39;</span></span></code></pre></div></li><li><p><strong>导入（Import）</strong>：</p><ul><li><code>import</code> 关键字用于在一个模块中引入其他模块的导出内容。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 导入命名导出</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { name, greet } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 导入默认导出</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> defaultExport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 起别名</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fName, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fAge, foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> fFoo } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./foo.js&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 导入整个模块</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div></li></ul><h5 id="_2-3-模块作用域" tabindex="-1">2.3 <strong>模块作用域</strong> <a class="header-anchor" href="#_2-3-模块作用域" aria-label="Permalink to &quot;2.3 **模块作用域**&quot;">​</a></h5><p>ESModule 中的每个模块都有自己的独立作用域。这意味着在一个模块中定义的变量和函数不会泄露到全局作用域，也不会影响其他模块的作用域。只有明确导出的内容才能被其他模块访问，这种设计极大地降低了变量冲突的风险。</p><h5 id="_2-4-异步加载" tabindex="-1">2.4 <strong>异步加载</strong> <a class="header-anchor" href="#_2-4-异步加载" aria-label="Permalink to &quot;2.4 **异步加载**&quot;">​</a></h5><p>虽然 ESModule 是通过静态分析的方式确定模块依赖，但它也支持异步加载模块，特别是通过 <code>import()</code> 函数，可以动态地在运行时加载模块，这对于分割代码和提高性能非常有用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 动态导入</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./module.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><h4 id="_3-esmodule-的工作原理" tabindex="-1">3. <strong>ESModule 的工作原理</strong> <a class="header-anchor" href="#_3-esmodule-的工作原理" aria-label="Permalink to &quot;3. **ESModule 的工作原理**&quot;">​</a></h4><h5 id="_3-1-模块的导出" tabindex="-1">3.1 <strong>模块的导出</strong> <a class="header-anchor" href="#_3-1-模块的导出" aria-label="Permalink to &quot;3.1 **模块的导出**&quot;">​</a></h5><p>ESModule 支持两种类型的导出：<strong>命名导出</strong> 和 <strong>默认导出</strong>。</p><ul><li><p><strong>命名导出（Named Export）</strong>：允许从模块中导出多个变量或函数，这些导出在导入时需要按名称引用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// module1.js</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Doing something&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在其他模块中导入：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// main.js</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { x, doSomething } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./module1.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 42</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Doing something</span></span></code></pre></div></li><li><p><strong>默认导出（Default Export）</strong>：一个模块只能有一个默认导出，导入时可以自定义导入名称。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// module2.js</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">() </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;This is the default export&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在其他模块中导入：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// main.js</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> myFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./module2.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">myFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// This is the default export</span></span></code></pre></div></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;why&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 18</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;foo value&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 1.默认导出的方式一:</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // named export</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // age as default,</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // foo as default</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 2.默认导出的方式二: 常见</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> foo</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 注意: 默认导出只能有一个</span></span></code></pre></div><h5 id="_3-2-模块的导入" tabindex="-1">3.2 <strong>模块的导入</strong> <a class="header-anchor" href="#_3-2-模块的导入" aria-label="Permalink to &quot;3.2 **模块的导入**&quot;">​</a></h5><p>ESModule 提供了灵活的导入方式，可以根据需要导入整个模块、部分导出或动态导入：</p><ul><li><p><strong>导入整个模块</strong>：使用 <code>import * as</code> 语法，可以将整个模块作为一个对象导入，其中每个导出都会成为对象的一个属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./module1.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(MyModule.x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 42</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">MyModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Doing something</span></span></code></pre></div></li><li><p><strong>导入单个或多个命名导出</strong>：可以按名称导入模块的部分内容。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { x } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./module1.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div></li><li><p><strong>导入默认导出</strong>：可以导入默认导出并为其指定一个名称。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> myFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./module2.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div></li><li><p><strong>动态导入</strong>：<code>import()</code> 是一个可以在运行时动态导入模块的函数，这在按需加载和代码分割时非常有用。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./module1.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.x); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 42</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div></li></ul><h5 id="_3-3-import函数" tabindex="-1">3.3 import函数 <a class="header-anchor" href="#_3-3-import函数" aria-label="Permalink to &quot;3.3 import函数&quot;">​</a></h5><p><code>import()</code> 函数是 JavaScript 中的一种动态导入语法，允许在运行时按需加载模块。它是 ES2020（ES11）规范的一部分，提供了一种异步加载模块的方式，与传统的静态导入 <code>import ... from</code> 语句不同，<code>import()</code> 是一个函数，返回一个 <code>Promise</code>。</p><h6 id="_1-import-函数的基础概念" tabindex="-1">1. <strong><code>import()</code> 函数的基础概念</strong> <a class="header-anchor" href="#_1-import-函数的基础概念" aria-label="Permalink to &quot;1. **`import()` 函数的基础概念**&quot;">​</a></h6><p><code>import()</code> 函数用于在 JavaScript 代码执行过程中按需加载模块，而不是在编译时加载。这意味着可以根据程序的逻辑动态地加载所需的模块。</p><p>语法：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(moduleSpecifier)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 使用导入的模块</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  })</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 处理加载失败</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  });</span></span></code></pre></div><ul><li><code>moduleSpecifier</code>：一个字符串，指定要导入的模块路径（相对路径或绝对路径）。</li><li><code>Promise</code>：<code>import()</code> 函数返回一个 Promise，当模块加载成功时，Promise 解析为一个模块对象；如果加载失败，则 Promise 被拒绝。</li></ul><h6 id="_2-import-函数的使用场景" tabindex="-1">2. <strong><code>import()</code> 函数的使用场景</strong> <a class="header-anchor" href="#_2-import-函数的使用场景" aria-label="Permalink to &quot;2. **`import()` 函数的使用场景**&quot;">​</a></h6><p><code>import()</code> 函数适用于以下场景：</p><ul><li><strong>按需加载</strong>：当模块的使用频率不高，或模块体积较大时，可以使用 <code>import()</code> 进行按需加载以减少初始加载时间。</li><li><strong>条件加载</strong>：根据条件加载不同的模块（如基于用户操作、环境变量等）。</li><li><strong>代码分割（Code Splitting）</strong>：结合打包工具（如 Webpack）使用 <code>import()</code>，可以将代码拆分成多个包，从而提升性能。</li><li><strong>懒加载（Lazy Loading）</strong>：延迟加载某些功能模块，直到需要时才加载，以优化页面性能。</li></ul><h6 id="_3-import-使用示例" tabindex="-1">3. <strong><code>import()</code> 使用示例</strong> <a class="header-anchor" href="#_3-import-使用示例" aria-label="Permalink to &quot;3. **`import()` 使用示例**&quot;">​</a></h6><p>####### 3.1 <strong>基本用法</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 在某个操作下按需加载模块</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;loadButton&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;click&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./math.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">math</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 假设 math.js 导出了一个 add 函数</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    })</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;模块加载失败:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, error);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><p>在上面的例子中，<code>import(&#39;./math.js&#39;)</code> 仅在用户点击按钮时执行，避免了页面初始加载时不必要的模块加载。</p><p>####### 3.2 <strong>条件加载</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> loadModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">moduleName</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (moduleName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;math&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./math.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;Math module loaded:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (moduleName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./string.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;String module loaded:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    });</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">loadModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;math&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 这将动态加载 math.js 模块</span></span></code></pre></div><p>根据传入的 <code>moduleName</code> 参数条件性地加载不同的模块。</p><p>####### 3.3 <strong>与 <code>async/await</code> 结合使用</strong></p><p><code>import()</code> 可以与 <code>async/await</code> 结合使用，以实现更简洁的异步代码。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> loadAndUseModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> math</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;./math.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用动态加载的模块</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (error) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;模块加载失败:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, error);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">loadAndUseModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><h6 id="_4-import-函数的特性" tabindex="-1">4. <strong><code>import()</code> 函数的特性</strong> <a class="header-anchor" href="#_4-import-函数的特性" aria-label="Permalink to &quot;4. **`import()` 函数的特性**&quot;">​</a></h6><ul><li><strong>异步性</strong>：<code>import()</code> 是异步的，返回一个 Promise，使得模块加载不会阻塞主线程。</li><li><strong>模块作用域</strong>：使用 <code>import()</code> 动态加载的模块，其作用域与加载它的模块相同，加载后可以访问模块中的所有导出内容。</li><li><strong>只读模块</strong>：通过 <code>import()</code> 导入的模块对象是只读的，不能修改导入的模块的绑定。</li><li><strong>缓存行为</strong>：<code>import()</code> 加载的模块遵循模块缓存机制。模块加载后，如果再次使用 <code>import()</code> 加载相同的模块，不会重新加载，而是直接从缓存中获取。</li></ul><h6 id="_5-浏览器和-node-js-支持" tabindex="-1">5. <strong>浏览器和 Node.js 支持</strong> <a class="header-anchor" href="#_5-浏览器和-node-js-支持" aria-label="Permalink to &quot;5. **浏览器和 Node.js 支持**&quot;">​</a></h6><ul><li><strong>浏览器</strong>：大多数现代浏览器都支持 <code>import()</code> 函数。需要注意的是，<code>import()</code> 是 ES Modules 的一部分，所以使用时文件类型应为 <code>.js</code>，且需运行在支持 ESM 的环境下（如通过 <code>&lt;script type=&quot;module&quot;&gt;</code> 引入）。</li><li><strong>Node.js</strong>：从 Node.js 12.17.0 和 Node.js 14 开始，<code>import()</code> 已经被完全支持。需要将文件扩展名设置为 <code>.mjs</code> 或者在 <code>package.json</code> 中设置 <code>&quot;type&quot;: &quot;module&quot;</code> 来启用 ESM 支持。</li></ul><h4 id="_4-esmodule-的优势" tabindex="-1">4. <strong>ESModule 的优势</strong> <a class="header-anchor" href="#_4-esmodule-的优势" aria-label="Permalink to &quot;4. **ESModule 的优势**&quot;">​</a></h4><h5 id="_4-1-原生支持" tabindex="-1">4.1 <strong>原生支持</strong> <a class="header-anchor" href="#_4-1-原生支持" aria-label="Permalink to &quot;4.1 **原生支持**&quot;">​</a></h5><p>ESModule 是 JavaScript 语言标准的一部分，这意味着它在现代浏览器和Node.js环境中得到了广泛支持。与 CommonJS 和 AMD 等社区规范不同，ESModule 具有更好的兼容性和更长的生命周期。</p><h5 id="_4-2-静态分析" tabindex="-1">4.2 <strong>静态分析</strong> <a class="header-anchor" href="#_4-2-静态分析" aria-label="Permalink to &quot;4.2 **静态分析**&quot;">​</a></h5><p>由于 ESModule 是静态定义的，JavaScript 引擎可以在加载和解析时优化代码，比如移除未使用的代码（Tree Shaking）。这在现代前端开发中尤为重要，可以有效减少最终打包文件的体积。</p><h5 id="_4-3-模块作用域隔离" tabindex="-1">4.3 <strong>模块作用域隔离</strong> <a class="header-anchor" href="#_4-3-模块作用域隔离" aria-label="Permalink to &quot;4.3 **模块作用域隔离**&quot;">​</a></h5><p>每个 ESModule 都有自己的独立作用域，这减少了全局污染的风险，降低了模块之间的耦合度，从而提高了代码的可维护性。</p><h5 id="_4-4-与现代工具链的集成" tabindex="-1">4.4 <strong>与现代工具链的集成</strong> <a class="header-anchor" href="#_4-4-与现代工具链的集成" aria-label="Permalink to &quot;4.4 **与现代工具链的集成**&quot;">​</a></h5><p>ESModule 与现代前端工具（如Webpack、Rollup、Babel）无缝集成，使得开发者能够利用这些工具的强大功能，如代码分割、按需加载和兼容性转换。</p><h4 id="_5-esmodule-与其他模块系统的比较" tabindex="-1">5. <strong>ESModule 与其他模块系统的比较</strong> <a class="header-anchor" href="#_5-esmodule-与其他模块系统的比较" aria-label="Permalink to &quot;5. **ESModule 与其他模块系统的比较**&quot;">​</a></h4><ul><li><p><strong>与 CommonJS 的比较</strong>：</p><ul><li>CommonJS 是Node.js的标准模块系统，采用同步加载方式，适合服务器端环境。</li><li>ESModule 则采用静态分析和异步加载方式，更适合浏览器端环境。</li></ul></li><li><p><strong>与 AMD 的比较</strong>：</p><ul><li>AMD 主要用于浏览器端，强调异步加载，但语法相对复杂。</li><li>ESModule 提供了更简洁的语法和更高效的加载机制，逐渐取代了AMD在浏览器端的使用。</li></ul></li></ul><h4 id="_6-为什么esmodule不支持file协议" tabindex="-1">6.为什么ESModule不支持file协议 <a class="header-anchor" href="#_6-为什么esmodule不支持file协议" aria-label="Permalink to &quot;6.为什么ESModule不支持file协议&quot;">​</a></h4><p>ES 模块（ES Modules，ESM）在浏览器中加载时，确实存在只能通过 HTTP/HTTPS 协议而不能直接通过 <code>file://</code> 协议加载的限制。这个限制的主要原因涉及到<strong>安全性</strong>和<strong>跨域策略</strong>。</p><h5 id="_1-安全性" tabindex="-1">1. <strong>安全性</strong> <a class="header-anchor" href="#_1-安全性" aria-label="Permalink to &quot;1. **安全性**&quot;">​</a></h5><p>浏览器在处理 JavaScript 模块时，会严格遵循同源策略（Same-Origin Policy）来防止潜在的安全漏洞。通过 HTTP/HTTPS 协议加载 ES 模块，可以确保模块来自受信任的源，并且在请求过程中，浏览器可以应用额外的安全检查，比如 CORS（跨域资源共享）策略。</p><p><strong><code>file://</code> 协议</strong>，则是指直接从本地文件系统加载资源。由于本地文件系统不受网络隔离的保护，允许模块通过 <code>file://</code> 协议加载可能会引发安全风险，例如：</p><ul><li><strong>文件泄露</strong>：恶意代码可能会利用本地路径直接访问用户文件系统中的敏感文件。</li><li><strong>跨文件系统攻击</strong>：由于不同的文件路径可能属于不同的安全域，使用 <code>file://</code> 协议可能会导致对不相关文件的未授权访问。</li></ul><h5 id="_2-跨域策略" tabindex="-1">2. <strong>跨域策略</strong> <a class="header-anchor" href="#_2-跨域策略" aria-label="Permalink to &quot;2. **跨域策略**&quot;">​</a></h5><p>ESM 的一个重要特性是模块的<strong>静态分析</strong>。在模块加载之前，浏览器会先解析所有的模块依赖（包括 <code>import</code> 的路径），然后再进行实际加载。这意味着浏览器必须确定所有依赖模块的源头，并确保它们符合同源策略。</p><p>当使用 <code>file://</code> 协议时，每个文件被视为不同的源（origin），这与通过 HTTP/HTTPS 协议加载的模块（通常来自同一个域名）有所不同。因此，浏览器很难确保所有模块都符合同源策略，尤其是在处理复杂的模块依赖时。</p><h5 id="_3-开发和部署的分离" tabindex="-1">3. <strong>开发和部署的分离</strong> <a class="header-anchor" href="#_3-开发和部署的分离" aria-label="Permalink to &quot;3. **开发和部署的分离**&quot;">​</a></h5><p>ESM 的设计初衷之一是推动更现代化的开发和部署流程。通过强制使用 HTTP/HTTPS 协议，浏览器鼓励开发者将代码放置在服务器上，并通过开发服务器或构建工具（如 Webpack、Vite 等）进行模块化开发和测试。这种方法还支持以下优势：</p><ul><li><strong>热更新</strong>：使用开发服务器，可以支持模块的热更新，提升开发效率。</li><li><strong>资源优化</strong>：通过构建工具，模块可以进行压缩、打包和代码分割等优化。</li><li><strong>缓存机制</strong>：HTTP 协议下的模块可以利用浏览器的缓存机制，提升加载性能。</li></ul><h5 id="_4-如何在本地测试-es-模块" tabindex="-1">4. <strong>如何在本地测试 ES 模块</strong> <a class="header-anchor" href="#_4-如何在本地测试-es-模块" aria-label="Permalink to &quot;4. **如何在本地测试 ES 模块**&quot;">​</a></h5><p>由于直接使用 <code>file://</code> 协议加载 ES 模块会产生上述问题，因此推荐以下方法在本地进行开发和测试：</p><ul><li><strong>使用开发服务器</strong>：例如，使用 <code>Live Server</code>（VS Code 插件）或 <code>http-server</code>（Node.js 包）启动一个本地 HTTP 服务器，这样可以模拟 HTTP 环境，避免 <code>file://</code> 协议带来的限制。</li><li><strong>构建工具</strong>：如 Vite、Webpack 等，可以在开发环境中创建一个本地服务器，并自动处理模块的加载和打包。</li></ul><h5 id="总结-3" tabindex="-1">总结 <a class="header-anchor" href="#总结-3" aria-label="Permalink to &quot;总结&quot;">​</a></h5><p>ES 模块在浏览器中不能使用 <code>file://</code> 协议加载是出于安全性和模块依赖解析的考虑。通过强制使用 HTTP/HTTPS 协议，浏览器能够确保模块的安全加载，同时鼓励开发者采用更现代的开发和部署流程。对于本地开发，建议使用开发服务器或构建工具来模拟 HTTP 环境进行测试。</p><h2 id="esmodule原理" tabindex="-1">ESModule原理 <a class="header-anchor" href="#esmodule原理" aria-label="Permalink to &quot;ESModule原理&quot;">​</a></h2><h3 id="_1-esmodule-的基本工作流程" tabindex="-1">1. ESModule 的基本工作流程 <a class="header-anchor" href="#_1-esmodule-的基本工作流程" aria-label="Permalink to &quot;1. ESModule 的基本工作流程&quot;">​</a></h3><p><a href="https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/" target="_blank" rel="noreferrer">ESmodule原理-文章</a></p><p><code>ESModule</code>，即 ECMAScript 模块，是 JavaScript 中用于组织和管理代码的标准化模块系统。它引入了 <code>import</code> 和 <code>export</code> 语法，使得模块化代码编写更为简单和清晰。</p><p>在 JavaScript 引擎中，<code>ESModule</code> 的加载和执行过程通常分为以下几个步骤：</p><ol><li><strong>模块解析（Module Resolution）</strong>：当一个模块被引入时，JavaScript 引擎会解析模块的路径，确定模块的文件位置。</li><li><strong>依赖图构建（Dependency Graph Construction）</strong>：引擎会解析模块的 <code>import</code> 语句，递归地解析并构建出模块的依赖图。</li><li><strong>模块实例化（Module Instantiation）</strong>：模块实例化阶段中，JavaScript 引擎会为每个模块创建一个模块记录（Module Record），其中包含了模块的元数据和所有的导出绑定（bindings）。</li><li><strong>模块执行（Module Evaluation）</strong>：最后，引擎会按依赖顺序执行模块代码，并将导出的值绑定到相应的模块记录中。</li></ol><h3 id="_2-源码分析" tabindex="-1">2. 源码分析 <a class="header-anchor" href="#_2-源码分析" aria-label="Permalink to &quot;2. 源码分析&quot;">​</a></h3><p>以下是简要的 <code>ESModule</code> 实现的源码解析过程，具体实现可能因不同的 JavaScript 引擎（如 V8, SpiderMonkey 等）而有所不同。</p><h4 id="_2-1-模块解析" tabindex="-1">2.1 模块解析 <a class="header-anchor" href="#_2-1-模块解析" aria-label="Permalink to &quot;2.1 模块解析&quot;">​</a></h4><p>当引擎遇到 <code>import</code> 或 <code>export</code> 语句时，它会启动模块解析过程，解析模块的路径，并检查模块是否已经被加载, 构建（Construction），根据地址查找js文件，并且下载，将其解析成模块记录（ModuleRecord）。</p><ul><li>静态分析阶段,所以只能在顶层写<code>import</code></li></ul><p><img src="' + _imports_7 + '" alt="image-20240901215342443"></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Pseudo-code for module resolution</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> resolveModuleSpecifier</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">specifier</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">parentModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 处理相对路径和绝对路径</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> resolvedPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> resolvePath</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(specifier, parentModule.baseURL);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> loadModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(resolvedPath);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="_2-2-模块实例化" tabindex="-1">2.2 模块实例化 <a class="header-anchor" href="#_2-2-模块实例化" aria-label="Permalink to &quot;2.2 模块实例化&quot;">​</a></h4><p>模块解析完成后，引擎会为每个模块创建模块记录。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Pseudo-code for module instantiation</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> instantiateModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">moduleRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> moduleNamespace </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createNamespaceObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(moduleRecord);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 将模块的导出绑定到 namespace 对象中</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [exportName, exportValue] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> moduleRecord.exports) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(moduleNamespace, exportName, exportValue);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> moduleNamespace;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="_2-3-模块执行" tabindex="-1">2.3 模块执行 <a class="header-anchor" href="#_2-3-模块执行" aria-label="Permalink to &quot;2.3 模块执行&quot;">​</a></h4><p>模块的执行通常是自顶向下的，并且会在所有依赖加载完成后执行。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// Pseudo-code for module evaluation</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> evaluateModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">moduleRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (moduleRecord.evaluated) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 递归地先执行所有的依赖</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dependency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> moduleRecord.dependencies) {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        evaluateModule</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dependency);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 执行当前模块</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    moduleRecord.evaluated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    executeModuleCode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(moduleRecord.code);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="_3-总结" tabindex="-1">3. 总结 <a class="header-anchor" href="#_3-总结" aria-label="Permalink to &quot;3. 总结&quot;">​</a></h3><p><img src="' + _imports_8 + '" alt="image-20240901215522822"></p><p><code>ESModule</code> 的实现涉及模块解析、依赖图构建、模块实例化和执行等多个环节。不同的 JavaScript 引擎在细节实现上可能有所不同，但整体流程大致相似。</p><h3 id="_4-解析" tabindex="-1">4.解析 <a class="header-anchor" href="#_4-解析" aria-label="Permalink to &quot;4.解析&quot;">​</a></h3><ul><li><strong>Module Record</strong>：是 JavaScript 引擎内部用来表示模块的结构。每个模块都会有一个 <code>Module Record</code>，它包含了模块的元数据，包括模块的导入和导出声明等。</li><li><strong>Module Environment</strong>：是模块的执行上下文，类似于函数的执行上下文。它会存储模块的变量绑定、导入的内容、以及在模块中定义的函数和变量。</li></ul><p>在 JavaScript 中，<code>ESModule</code>（ECMAScript 模块）系统为模块化编程提供了标准化的解决方案。理解 <code>ESModule</code> 的工作原理对于掌握模块之间的相互作用至关重要。我们通过解析下面的代码示例，来详细解释 <code>ESModule</code> 的实现流程和它的机制。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// foo.js</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;why&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;kobe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 40</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  name,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  age</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//main.js</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { name, age } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name, age);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name, age);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// index.html</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;main.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><h4 id="_1-模块加载与解析过程" tabindex="-1">1 模块加载与解析过程 <a class="header-anchor" href="#_1-模块加载与解析过程" aria-label="Permalink to &quot;1 模块加载与解析过程&quot;">​</a></h4><p>当浏览器加载 <code>index.html</code> 并遇到 <code>&lt;script type=&quot;module&quot;&gt;</code> 标签时，会启动对 <code>main.js</code> 的解析。以下是 <code>ESModule</code> 运行的主要步骤：</p><h5 id="_1-1-模块解析-module-resolution" tabindex="-1">1.1 <strong>模块解析（Module Resolution）</strong> <a class="header-anchor" href="#_1-1-模块解析-module-resolution" aria-label="Permalink to &quot;1.1 **模块解析（Module Resolution）**&quot;">​</a></h5><p>浏览器首先下载并解析 <code>main.js</code> 文件。<code>main.js</code> 包含一个 <code>import</code> 语句，它指向了 <code>foo.js</code>。此时，浏览器会递归地加载 <code>foo.js</code>，并为每个模块创建一个 <code>Module Record</code>。</p><ul><li><strong>Module Record</strong>：每个 <code>Module Record</code> 保存了模块的元数据，比如模块的导入和导出声明，以及对应的变量引用。</li></ul><p>在这个阶段，<code>foo.js</code> 和 <code>main.js</code> 都会生成各自的 <code>Module Record</code>，并且 <code>main.js</code> 的 <code>Module Record</code> 中会记录对 <code>foo.js</code> 中 <code>name</code> 和 <code>age</code> 的引用。</p><h5 id="_1-2-模块实例化-module-instantiation" tabindex="-1">1.2 <strong>模块实例化（Module Instantiation）</strong> <a class="header-anchor" href="#_1-2-模块实例化-module-instantiation" aria-label="Permalink to &quot;1.2 **模块实例化（Module Instantiation）**&quot;">​</a></h5><p>在解析完所有模块后，浏览器会进行模块实例化。此阶段并不会执行代码，而是会为每个模块的导出创建一个引用，这些引用指向模块内部的变量。</p><p>在 <code>foo.js</code> 中，<code>export { name, age }</code> 创建了 <code>name</code> 和 <code>age</code> 的引用，并将这些引用记录在 <code>Module Record</code> 中。此时，这些引用指向初始值 <code>&quot;why&quot;</code> 和 <code>18</code>。</p><h5 id="_1-3-模块执行-module-evaluation" tabindex="-1">1.3 <strong>模块执行（Module Evaluation）</strong> <a class="header-anchor" href="#_1-3-模块执行-module-evaluation" aria-label="Permalink to &quot;1.3 **模块执行（Module Evaluation）**&quot;">​</a></h5><p>模块的执行顺序取决于模块间的依赖关系。由于 <code>main.js</code> 依赖于 <code>foo.js</code>，因此 <code>foo.js</code> 会先被执行。</p><ul><li><strong>执行顺序</strong>： <ul><li><code>foo.js</code> 执行时，<code>name</code> 被初始化为 <code>&quot;why&quot;</code>，<code>age</code> 被初始化为 <code>18</code>。同时，<code>setTimeout</code> 设置了一个 100 毫秒后的回调，这个回调会将 <code>name</code> 和 <code>age</code> 更新为 <code>&quot;kobe&quot;</code> 和 <code>40</code>。</li><li>紧接着，<code>main.js</code> 开始执行。此时，它从 <code>foo.js</code> 中导入了 <code>name</code> 和 <code>age</code>，并打印出它们的当前值，即 <code>&quot;why&quot;</code> 和 <code>18&quot;</code>。</li></ul></li></ul><h5 id="_1-4-动态更新与引用" tabindex="-1">1.4 <strong>动态更新与引用</strong> <a class="header-anchor" href="#_1-4-动态更新与引用" aria-label="Permalink to &quot;1.4 **动态更新与引用**&quot;">​</a></h5><p>由于 <code>ESModule</code> 中的导出是通过引用实现的，因此当 <code>foo.js</code> 中的 <code>name</code> 和 <code>age</code> 在 100 毫秒后更新时，<code>main.js</code> 中导入的 <code>name</code> 和 <code>age</code> 也会随之更新。</p><ul><li><strong>动态引用</strong>： <ul><li>在 <code>main.js</code> 中，第一个 <code>console.log(name, age)</code> 打印出 <code>&quot;why&quot;</code> 和 <code>18&quot;</code>，因为此时 <code>foo.js</code> 中的 <code>setTimeout</code> 回调还未执行。</li><li>2000 毫秒后，<code>main.js</code> 的 <code>setTimeout</code> 回调执行时，<code>name</code> 和 <code>age</code> 已经更新为 <code>&quot;kobe&quot;</code> 和 <code>40&quot;</code>，因此第二个 <code>console.log(name, age)</code> 打印出了更新后的值。</li></ul></li></ul><h4 id="_2-关键点总结" tabindex="-1">2. 关键点总结 <a class="header-anchor" href="#_2-关键点总结" aria-label="Permalink to &quot;2. 关键点总结&quot;">​</a></h4><ol><li><p><strong>导出的是引用而非值</strong>：<code>ESModule</code> 中的 <code>export</code> 导出的是变量的引用，而非导出时的值。这意味着当导出的变量在原模块中发生变化时，任何导入它们的模块都会同步反映这些变化。</p></li><li><p><strong>模块解析与依赖</strong>：浏览器首先会解析模块并构建依赖图，然后根据依赖关系按顺序执行模块。先解析再执行的设计，保证了在执行某个模块时，其依赖模块已经准备就绪。</p></li><li><p><strong>动态更新</strong>：因为导出的是引用，导入模块会反映原模块中变量的最新值，这对模块间的数据共享和状态管理非常有用。</p></li></ol><h4 id="_3-完整执行流程" tabindex="-1">3. 完整执行流程 <a class="header-anchor" href="#_3-完整执行流程" aria-label="Permalink to &quot;3. 完整执行流程&quot;">​</a></h4><ol><li><strong>解析</strong>：<code>index.html</code> 加载 <code>main.js</code>，并发现其依赖 <code>foo.js</code>。</li><li><strong>实例化</strong>：创建 <code>Module Record</code>，记录 <code>name</code> 和 <code>age</code> 的引用。</li><li><strong>执行</strong>：按顺序执行模块，初始输出 <code>&quot;why&quot;</code> 和 <code>18&quot;</code>，然后在 2000 毫秒后输出 <code>&quot;kobe&quot;</code> 和 <code>40&quot;</code>。</li></ol><p>这个解释展示了 <code>ESModule</code> 的运行机制和引用行为，说明了模块之间的依赖关系和数据共享的动态性。</p><h2 id="commonjs-和esmodule-可以相互引用吗-什么条件下可以相互引用" tabindex="-1">CommonJS 和ESModule 可以相互引用吗 什么条件下可以相互引用 <a class="header-anchor" href="#commonjs-和esmodule-可以相互引用吗-什么条件下可以相互引用" aria-label="Permalink to &quot;CommonJS 和ESModule 可以相互引用吗 什么条件下可以相互引用&quot;">​</a></h2><p><code>CommonJS</code> 和 <code>ESModule</code> 是两种不同的模块系统，分别在 Node.js 和浏览器中广泛使用。然而，在某些条件下，它们可以相互引用，但存在一些限制和注意事项。</p><h3 id="_1-commonjs-和-esmodule-的基本区别" tabindex="-1">1. <strong>CommonJS 和 ESModule 的基本区别</strong> <a class="header-anchor" href="#_1-commonjs-和-esmodule-的基本区别" aria-label="Permalink to &quot;1. **CommonJS 和 ESModule 的基本区别**&quot;">​</a></h3><ul><li><strong>CommonJS</strong>：主要用于 Node.js 中，模块通过 <code>require()</code> 导入，<code>module.exports</code> 或 <code>exports</code> 导出。模块在运行时加载（同步）。</li><li><strong>ESModule</strong>：是 ECMAScript 标准中的模块系统，通过 <code>import</code> 导入，<code>export</code> 导出。模块在编译时静态解析（异步）。</li></ul><h3 id="_2-相互引用的条件" tabindex="-1">2. <strong>相互引用的条件</strong> <a class="header-anchor" href="#_2-相互引用的条件" aria-label="Permalink to &quot;2. **相互引用的条件**&quot;">​</a></h3><p>webpack环境下是可以的</p><h4 id="_2-1-commonjs-引用-esmodule" tabindex="-1">2.1 <strong>CommonJS 引用 ESModule</strong> <a class="header-anchor" href="#_2-1-commonjs-引用-esmodule" aria-label="Permalink to &quot;2.1 **CommonJS 引用 ESModule**&quot;">​</a></h4><p>在 Node.js 中，CommonJS 模块可以引用 ESModule，但由于 ESModule 是异步加载的，而 CommonJS 是同步加载的，这导致了一些特殊的处理。</p><ul><li><strong>条件</strong>：在 CommonJS 模块中，使用 <code>import()</code> 动态导入 ESModule。由于 <code>import()</code> 返回一个 Promise，因此必须使用 <code>then</code> 或 <code>async/await</code> 来处理异步操作。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// CommonJS 模块</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./esModule.mjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.default); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 访问 ESModule 的默认导出</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><ul><li><strong>注意事项</strong>：ESModule 的导出方式不同于 CommonJS，<code>module.default</code> 用于访问 ESModule 的默认导出，而其他命名导出可以通过 <code>module.namedExport</code> 访问。</li></ul><h4 id="_2-2-esmodule-引用-commonjs" tabindex="-1">2.2 <strong>ESModule 引用 CommonJS</strong> <a class="header-anchor" href="#_2-2-esmodule-引用-commonjs" aria-label="Permalink to &quot;2.2 **ESModule 引用 CommonJS**&quot;">​</a></h4><p>ESModule 引用 CommonJS 模块的情况比较简单，可以直接通过 <code>import</code> 语法导入 CommonJS 模块。</p><ul><li><strong>条件</strong>：在 ESModule 中使用 <code>import</code> 直接导入 CommonJS 模块。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// ESModule</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> commonjsModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;./commonjsModule.cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(commonjsModule); </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 直接访问 CommonJS 模块的导出</span></span></code></pre></div><ul><li><strong>注意事项</strong>：当引入 CommonJS 模块时，整个模块的导出会作为 <code>default</code> 导入。因此，即使 CommonJS 使用了 <code>module.exports</code> 导出一个对象，ESModule 也会将其视为 <code>default</code> 导出。</li></ul><h3 id="_3-相互引用的限制" tabindex="-1">3. <strong>相互引用的限制</strong> <a class="header-anchor" href="#_3-相互引用的限制" aria-label="Permalink to &quot;3. **相互引用的限制**&quot;">​</a></h3><ul><li><strong>Node.js 版本要求</strong>：相互引用需要 Node.js 12+ 版本，因为早期版本对 ESModule 的支持不完整。</li><li><strong>文件扩展名</strong>：ESModule 通常使用 <code>.mjs</code> 扩展名，CommonJS 使用 <code>.cjs</code> 或 <code>.js</code> 扩展名。必须明确指定扩展名，除非配置了特殊的文件解析规则。</li><li><strong>循环引用问题</strong>：如果两个模块相互引用，可能会导致循环依赖问题。这在 ESModule 中由于其静态解析特性尤为棘手，需要特别注意依赖顺序和设计。</li></ul><h2 id="现代模块打包工具" tabindex="-1"><strong>现代模块打包工具</strong> <a class="header-anchor" href="#现代模块打包工具" aria-label="Permalink to &quot;**现代模块打包工具**&quot;">​</a></h2><p>随着 JavaScript 应用程序变得越来越复杂，开发者需要更强大的工具来管理和打包模块。以下是一些流行的模块打包工具和它们的特点：</p><h4 id="_7-1-webpack" tabindex="-1">7.1 <strong>Webpack</strong> <a class="header-anchor" href="#_7-1-webpack" aria-label="Permalink to &quot;7.1 **Webpack**&quot;">​</a></h4><ul><li><strong>模块打包</strong>：Webpack 是一种模块打包工具，支持将不同类型的模块（JavaScript、CSS、图片等）打包为一个或多个文件。</li><li><strong>动态导入</strong>：Webpack 支持动态导入（<code>import()</code>），允许开发者按需加载模块，优化应用性能。</li><li><strong>插件和加载器</strong>：Webpack 拥有丰富的插件和加载器生态系统，能够处理各种格式的文件，并支持多种优化策略。</li></ul><h4 id="_7-2-rollup" tabindex="-1">7.2 <strong>Rollup</strong> <a class="header-anchor" href="#_7-2-rollup" aria-label="Permalink to &quot;7.2 **Rollup**&quot;">​</a></h4><ul><li><strong>树摇优化</strong>：Rollup 以其卓越的树摇优化（Tree Shaking）能力著称，能够移除未使用的代码，生成更小的打包文件。</li><li><strong>ESM 支持</strong>：Rollup 原生支持 ESM，适用于库的打包和发行。</li></ul><h4 id="_7-3-parcel" tabindex="-1">7.3 <strong>Parcel</strong> <a class="header-anchor" href="#_7-3-parcel" aria-label="Permalink to &quot;7.3 **Parcel**&quot;">​</a></h4><ul><li><strong>零配置</strong>：Parcel 是一种零配置的打包工具，能够自动处理依赖关系和优化，无需复杂的配置文件。</li><li><strong>快速构建</strong>：Parcel 使用多线程和文件系统缓存，加快了开发和构建速度。</li></ul>', 284);
const _hoisted_285 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_285);
}
const _19____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _19____ as default
};
